<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Dataedo.Repository.Services</name>
    </assembly>
    <members>
        <member name="T:Dataedo.Repository.Services.Builders.CollectionDTOBuilder`2">
            <summary>
            The class providing building <see cref="T:Dataedo.Repository.Services.DTO.CollectionDTO`1"></see>
            </summary>
            <typeparam name="TObject">Generic object type parameter.</typeparam>
            <typeparam name="TEnum">Generic enum type parameter.</typeparam>
        </member>
        <member name="M:Dataedo.Repository.Services.Builders.CollectionDTOBuilder`2.Build(System.Collections.Generic.IEnumerable{`0},System.Collections.Generic.IEnumerable{Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDefinitionDTO},`1[])">
            <summary>
            Initializes a new instance of the <see cref="T:Dataedo.Repository.Services.DTO.CollectionDTO`1"></see>
            </summary>
            <param name="objects">The collection of generic type objects.</param>
            <param name="definitions">The collection of <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDefinitionDTO"></see></param>
            <param name="join">The array of custom field definitions to load with objects.</param>
            <returns>The collection of objects with additional information about custom field definitions.</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Builders.DescriptionDTOBuilder">
            <summary>
            The class providing building objects.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Builders.DescriptionDTOBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dataedo.Repository.Services.Builders.DescriptionDTOBuilder"/> class.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Builders.DescriptionDTOBuilder.Description">
            <summary>
            Gets the description data transfer object.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Builders.DescriptionDTOBuilder.JoinDescriptionFormatted(System.String,System.Boolean)">
            <summary>
            Joins description.
            </summary>
            <param name="description"></param>
            <param name="condition"></param>
        </member>
        <member name="M:Dataedo.Repository.Services.Builders.DescriptionDTOBuilder.JoinDescriptionPlain(System.String,System.Boolean)">
            <summary>
            Joins description plain.
            </summary>
            <param name="descriptionPlain"></param>
            <param name="condition"></param>
        </member>
        <member name="M:Dataedo.Repository.Services.Builders.DescriptionDTOBuilder.JoinShortDescriptionPlain(System.String,System.Boolean)">
            <summary>
            Joins shortened description plain.
            </summary>
            <param name="descriptionPlain">Description plan of the object</param>
            <param name="condition"></param>
        </member>
        <member name="T:Dataedo.Repository.Services.Builders.PlainDescriptionDTOBuilder">
            <summary>
            The class providing building objects.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Builders.PlainDescriptionDTOBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dataedo.Repository.Services.Builders.PlainDescriptionDTOBuilder"/> class.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Builders.PlainDescriptionDTOBuilder.PlainDescription">
            <summary>
            Gets or sets the plain description data transfer object.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Builders.PlainDescriptionDTOBuilder.JoinPlainDescription(System.String,System.Boolean)">
            <summary>
            Joins plain description.
            </summary>
            <param name="description"></param>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Builders.PlainDescriptionDTOBuilder.JoinShortDescriptionPlain(System.String,System.Boolean)">
            <summary>
            Joins shortened plain description.
            </summary>
            <param name="descriptionPlain"></param>
            <param name="condition"></param>
            <returns></returns>
        </member>
        <member name="T:Dataedo.Repository.Services.DTO.CollectionDTO`1">
            <summary>
            The class providing information about collection of objects of generic type.
            </summary>
            <typeparam name="T">Generic object type parameter.</typeparam>
        </member>
        <member name="P:Dataedo.Repository.Services.DTO.CollectionDTO`1.CustomFieldDefinitions">
            <summary>
            Definitions of custom fields visible for selected object type.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.DTO.CollectionDTO`1.Objects">
            <summary>
            Collection of objects of selected type.
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.DTO.DatabaseObjectMetadataDTO">
            <summary>
            The class providing metadata (creation in DBMS, import, creation and modification information).
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.DTO.DatabaseObjectMetadataDTO.#ctor(Dataedo.Repository.EntityFrameworkModel.Customization.Interfaces.IDatabaseObjectMetadata)">
            <summary>
            Initializes a new instance of the <see cref="T:Dataedo.Repository.Services.DTO.DatabaseObjectMetadataDTO"/> class.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.DTO.DatabaseObjectMetadataDTO.DatabaseCreationDate">
            <summary>
            Gets or sets the time object was created.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.DTO.DatabaseObjectMetadataDTO.DatabaseLastModificationDate">
            <summary>
            Gets or sets the time object was last updated.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.DTO.DatabaseObjectMetadataDTO.ImportDate">
            <summary>
            Gets or sets the time of last import from database.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.DTO.DatabaseObjectMetadataDTO.ImportedBy">
            <summary>
            Gets or sets the login of user that last imported object from database.
            </summary>
            <example>dataedo_user</example>
        </member>
        <member name="T:Dataedo.Repository.Services.DTO.DescriptionDTO">
            <summary>
            The class providing description.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.DTO.DescriptionDTO.#ctor(System.String,System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Dataedo.Repository.Services.DTO.DescriptionDTO"/> class with descriptions.
            </summary>
            <param name="formatted">The formatted description of object.</param>
            <param name="plain">The plain text description of object.</param>
            <param name="plainShort">The plain short text description of object.</param>
        </member>
        <member name="P:Dataedo.Repository.Services.DTO.DescriptionDTO.Formatted">
            <summary>
            Gets or sets the formatted description of object.
            </summary>
            <example>
            <strong>Database tables and views.</strong><br/>Tables and views are distinguished by object_type column with 'TABLE' and 'VIEW' values.
            </example>
        </member>
        <member name="T:Dataedo.Repository.Services.DTO.MetadataDTO">
            <summary>
            The class providing the record metadata (creation and modification information).
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.DTO.MetadataDTO.#ctor(Dataedo.Repository.EntityFrameworkModel.Customization.Interfaces.IMetadata)">
            <summary>
            Initializes a new instance of the <see cref="T:Dataedo.Repository.Services.DTO.MetadataDTO"/> class.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.DTO.MetadataDTO.CreationDate">
            <summary>
            Gets or sets the time record was created.
            </summary>
            <example>dataedo_user</example>
        </member>
        <member name="P:Dataedo.Repository.Services.DTO.MetadataDTO.CreatedBy">
            <summary>
            Gets or sets the user that created record.
            </summary>
            <example>dataedo_user</example>
        </member>
        <member name="P:Dataedo.Repository.Services.DTO.MetadataDTO.LastModificationDate">
            <summary>
            Gets or sets the time record was updated.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.DTO.MetadataDTO.ModifiedBy">
            <summary>
            Gets or sets the user that updated record.
            </summary>
            <example>dataedo_user</example>
        </member>
        <member name="T:Dataedo.Repository.Services.DTO.PlainDescriptionDTO">
            <summary>
            The class providing plain description.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.DTO.PlainDescriptionDTO.Plain">
            <summary>
            Gets or sets the plain text description of object.
            </summary>
            <example>
            Database tables and views. 
            Tables and views are distinguished by object_type column with 'TABLE' and 'VIEW' values.
            </example>
        </member>
        <member name="P:Dataedo.Repository.Services.DTO.PlainDescriptionDTO.PlainShort">
            <summary>
            Gets or sets the short plain text description of object.
            </summary>
            <example>
            Database tables and views. 
            </example>
        </member>
        <member name="T:Dataedo.Repository.Services.DTO.ScriptDTO">
            <summary>
            The class providing plain description.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.DTO.ScriptDTO.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Dataedo.Repository.Services.DTO.ScriptDTO"/> class with definition.
            </summary>
            <param name="script">The definition of object.</param>
        </member>
        <member name="P:Dataedo.Repository.Services.DTO.ScriptDTO.Script">
            <summary>
            Gets or sets the definition of object.
            </summary>
            <example>
            CREATE PROCEDURE [log_error]
            AS
            BEGIN
            SET NOCOUNT ON;
            END;
            </example>
        </member>
        <member name="T:Dataedo.Repository.Services.DTO.ValueNameDTO">
            <summary>
            The class providing value from database and its display name.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.DTO.ValueNameDTO.Value">
            <summary>
            Gets or sets a value fetched from database.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.DTO.ValueNameDTO.DisplayName">
            <summary>
            Gets or sets display name of the value. 
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.Enums.ObjectTypeEnum">
            <summary>
            Class providing mappings for database object class.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Enums.ObjectTypeEnum.TypeToDisplayName(System.Nullable{Dataedo.Shared.Enums.SharedObjectTypeEnum.ObjectType})">
            <summary>
            Gets display name of <see cref="T:Dataedo.Shared.Enums.SharedObjectTypeEnum.ObjectType"></see>
            </summary>
            <param name="objectType"></param>
            <returns></returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Enums.ObjectTypeEnum.DataDictionaryTreeTypeToClass(System.String)">
            <summary>
            Gets the class based on database type.
            </summary>
            <param name="objectClass">The input parameter of database type.</param>
            <returns>The enum class based on string database type.</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Exceptions.AlreadyExistsException">
            <summary>
            The exception that is throw when object is not found.
            </summary>
            
        </member>
        <member name="M:Dataedo.Repository.Services.Exceptions.AlreadyExistsException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dataedo.Repository.Services.Exceptions.ObjectNotFoundException"/> class.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Exceptions.AlreadyExistsException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Dataedo.Repository.Services.Exceptions.ObjectNotFoundException"/> class with message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Dataedo.Repository.Services.Exceptions.AlreadyExistsException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Dataedo.Repository.Services.Exceptions.ObjectNotFoundException"/> class with message and inner exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="inner">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:Dataedo.Repository.Services.Exceptions.BadRequestException">
            <summary>
            The exception that is throw when object is not found.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Exceptions.BadRequestException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dataedo.Repository.Services.Exceptions.BadRequestException"/> class.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Exceptions.BadRequestException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Dataedo.Repository.Services.Exceptions.BadRequestException"/> class with message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Dataedo.Repository.Services.Exceptions.BadRequestException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Dataedo.Repository.Services.Exceptions.BadRequestException"/> class with message and inner exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="inner">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:Dataedo.Repository.Services.Exceptions.InvalidLicenseKeyException">
            <summary>
            The exception that is throw when liecnse key is invalid.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Exceptions.InvalidLicenseKeyException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dataedo.Repository.Services.Exceptions.InvalidLicenseKeyException"/> class.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Exceptions.InvalidLicenseKeyException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Dataedo.Repository.Services.Exceptions.InvalidLicenseKeyException"/> class with message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Dataedo.Repository.Services.Exceptions.InvalidLicenseKeyException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Dataedo.Repository.Services.Exceptions.InvalidLicenseKeyException"/> class with message and inner exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="inner">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:Dataedo.Repository.Services.Exceptions.InvalidLicenseKeyException.#ctor(System.String,Dataedo.Licenses.License.ValidationResultEnum.ValidationResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Dataedo.Repository.Services.Exceptions.InvalidLicenseKeyException"/> class with message and validation result.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="validationResult">The information about reason of exception.</param>
        </member>
        <member name="M:Dataedo.Repository.Services.Exceptions.InvalidLicenseKeyException.#ctor(System.String,System.Exception,Dataedo.Licenses.License.ValidationResultEnum.ValidationResult)">
            <summary>
            Initializes a new instance of the <see cref="T:Dataedo.Repository.Services.Exceptions.InvalidLicenseKeyException"/> class with message, inner exception and validation result.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="inner">The exception that is the cause of the current exception.</param>
            <param name="validationResult">The information about reason of exception.</param>
        </member>
        <member name="M:Dataedo.Repository.Services.Exceptions.InvalidValueException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dataedo.Repository.Services.Exceptions.BadRequestException"/> class.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Exceptions.InvalidValueException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Dataedo.Repository.Services.Exceptions.BadRequestException"/> class with message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Dataedo.Repository.Services.Exceptions.InvalidValueException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Dataedo.Repository.Services.Exceptions.BadRequestException"/> class with message and inner exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="inner">The exception that is the cause of the current exception.</param>
        </member>
        <member name="M:Dataedo.Repository.Services.Exceptions.ObjectNotFoundException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dataedo.Repository.Services.Exceptions.ObjectNotFoundException"/> class.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Exceptions.ObjectNotFoundException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Dataedo.Repository.Services.Exceptions.ObjectNotFoundException"/> class with message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Dataedo.Repository.Services.Exceptions.ObjectNotFoundException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Dataedo.Repository.Services.Exceptions.ObjectNotFoundException"/> class with message and inner exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="inner">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:Dataedo.Repository.Services.Exceptions.PrincipalServerDownException">
            <summary>
            The exception that is throw when could not connect to server for validating Windows users.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Exceptions.PrincipalServerDownException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dataedo.Repository.Services.Exceptions.PrincipalServerDownException"/> class.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Exceptions.PrincipalServerDownException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Dataedo.Repository.Services.Exceptions.PrincipalServerDownException"/> class with message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Dataedo.Repository.Services.Exceptions.PrincipalServerDownException.#ctor(System.String,System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Dataedo.Repository.Services.Exceptions.PrincipalServerDownException"/> class with message and domain.
            </summary>
            <param name="domain">The domain.</param>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="P:Dataedo.Repository.Services.Exceptions.PrincipalServerDownException.Domain">
            <summary>
            Gets the domain.
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.Exceptions.UnauthorizedException">
            <summary>
            The exception that is throw when authorization failed.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Exceptions.UnauthorizedException.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dataedo.Repository.Services.Exceptions.UnauthorizedException"/> class.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Exceptions.UnauthorizedException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the <see cref="T:Dataedo.Repository.Services.Exceptions.UnauthorizedException"/> class with message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="M:Dataedo.Repository.Services.Exceptions.UnauthorizedException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the <see cref="T:Dataedo.Repository.Services.Exceptions.UnauthorizedException"/> class with message and inner exception.
            </summary>
            <param name="message">The message that describes the error.</param>
            <param name="inner">The exception that is the cause of the current exception.</param>
        </member>
        <member name="T:Dataedo.Repository.Services.Extensions.LimitOffsetExtensions">
            <summary>
            The class providing getting required set of data by skipping and limiting items in source <see cref="T:System.Linq.IQueryable"/>.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Extensions.LimitOffsetExtensions.LimitAndOffset``1(System.Linq.IQueryable{``0},Dataedo.Repository.Services.Parameters.OffsetLimitParameters)">
            <summary>
            Returns an <see cref="T:System.Linq.IQueryable"/> that contains elements starting from offset and limited with limit value.
            </summary>
            <typeparam name="TSource">The type of the elements of source.</typeparam>
            <param name="source">An <see cref="T:System.Linq.IQueryable"/> that contains elements to get required data from.</param>
            <param name="parameters">An object containing offset and limit values.</param>
            <returns>An <see cref="T:System.Linq.IQueryable"/> that contains elements starting from offset and limited with limit value.</returns>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Classification.DTO.ClassifiedDataDTO.Source">
            <summary>
            Gets or sets the source.
            
            <para>Valid values:</para>
            
            <list type="bullet">
            <item><para>"DBMS" - an object is imported;</para></item>
            <item><para>"USER" - an object is defined by user;</para></item>
            </list>
            </summary>
            <example>Value = USER, DisplayName = User</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Classification.DTO.ClassifiedDataDTO.Status">
            <summary>
            Gets or sets the status of object existence in database.
            
            <para>Available values:</para>
            
            <list type="bullet">
            <item><para>"A" - an object exists in database;</para></item>
            <item><para>"D" - an object is deleted from database;</para></item>
            </list>
            </summary>
            <example>Value = A, DisplayName = Active</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Classification.DTO.ClassifiedDataDTO.Description">
            <summary>
            Gets or sets the description of object.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Classification.DTO.ClassifiedDataDTO.CustomFields">
            <summary>
            Gets or sets the custom fields.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Classification.DTO.ClassifiedDataDTO.Metadata">
            <summary>
            Gets or sets the metadata (creation and modification information) information.
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.Classification.Extensions.ClassificatorDTOExtensions">
            <summary>
            The class providing extensions for <see cref="T:Dataedo.Repository.Services.Features.Classification.Extensions.ClassificatorDTOExtensions"/> data.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Classification.Extensions.ClassificatorDTOExtensions.SelectDTO(System.Collections.Generic.IEnumerable{Dataedo.Repository.EntityFrameworkModel.Models.Classificators})">
            <summary>
            Gets queryable list of <see cref="T:Dataedo.Repository.Services.Features.Classification.DTO.ClassificatorDTO"/> evaluated using parameters.
            </summary>
            <param name="source">The source <see cref="T:Dataedo.Repository.EntityFrameworkModel.Models.Classificators"/> queryable list.</param>
            <returns>The queryable list of <see cref="T:Dataedo.Repository.Services.Features.Menus.DTO.DataDictionaryMenuNodeDTO"/> evaluated using parameters.</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.CustomFields.Builders.CustomFieldDefinitionDTOBuilder">
            <summary>
            <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDefinitionDTO"/> builder.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.CustomFields.Builders.CustomFieldDefinitionDTOBuilder.Build(Dataedo.Repository.EntityFrameworkModel.Models.CustomFields,Dataedo.Repository.Services.JoinDefinitions.CustomFieldsJoinsEnum.CustomFieldsJoins[])">
            <summary>
            Builds <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDefinitionDTO"/> from <see cref="T:Dataedo.Repository.EntityFrameworkModel.Models.CustomFields"/> using joins.
            </summary>
            <param name="definition">The definition of custom field.</param>
            <param name="join">The array of names of data to load with object.</param>
            <returns>The <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDefinitionDTO"/> object.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.CustomFields.Builders.CustomFieldDefinitionDTOBuilder.Default(Dataedo.Repository.EntityFrameworkModel.Models.CustomFields)">
            <summary>
            Builds default <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDefinitionDTO"/> from <see cref="T:Dataedo.Repository.EntityFrameworkModel.Models.CustomFields"/> with basic data.
            </summary>
            <param name="definition">The definition of custom field.</param>
            <returns>The current builder object.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.CustomFields.Builders.CustomFieldDefinitionDTOBuilder.JoinClass(Dataedo.Repository.EntityFrameworkModel.Models.CustomFields,Dataedo.Repository.Services.JoinDefinitions.CustomFieldsJoinsEnum.CustomFieldsJoins[])">
            <summary>
            Builds <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldClassDTO"/> from <see cref="T:Dataedo.Repository.EntityFrameworkModel.Models.CustomFields"/> using joins.
            </summary>
            <param name="definition">The definition of custom field.</param>
            <param name="join">The array of names of data to load with object.</param>
            <returns></returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.CustomFields.Builders.CustomFieldDefinitionDTOBuilder.JoinDefinitionValues(Dataedo.Repository.EntityFrameworkModel.Models.CustomFields,Dataedo.Repository.Services.JoinDefinitions.CustomFieldsJoinsEnum.CustomFieldsJoins[])">
            <summary>
            Builds <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldClassDTO"/> from <see cref="T:Dataedo.Repository.EntityFrameworkModel.Models.CustomFields"/> using joins.
            </summary>
            <param name="definition">The definition of custom field.</param>
            <param name="join">The array of names of data to load with object.</param>
            <returns></returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.CustomFields.Builders.CustomFieldDTOBuilder">
            <summary>
            <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDTO"/> builder.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.CustomFields.Builders.CustomFieldDTOBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dataedo.Repository.Services.Features.CustomFields.Builders.CustomFieldDTOBuilder"/> class.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.CustomFields.Builders.CustomFieldDTOBuilder.Build(System.String[],Dataedo.Repository.EntityFrameworkModel.Models.CustomFields,Dataedo.Repository.Services.JoinDefinitions.CustomFieldsJoinsEnum.CustomFieldsJoins[])">
            <summary>
            Builds <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDTO"/> from collection of <see cref="T:Dataedo.Repository.EntityFrameworkModel.Models.CustomFields"/> using joins.
            </summary>
            <param name="fieldValue">Values of custom field</param>
            <param name="definition">Custom field definition</param>
            <param name="join">The array of names of data to load with object.</param>
            <returns></returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.CustomFields.Builders.CustomFieldDTOBuilder.Default(System.String[],System.Int32)">
            <summary>
            Builds default <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDTO"/> with basic data..
            </summary>
            <param name="fieldValue">Value of custom field.</param>
            <param name="definitionId">Custom field definition id.</param>
            <returns>The current builder object.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.CustomFields.Builders.CustomFieldDTOBuilder.JoinDefinition(Dataedo.Repository.EntityFrameworkModel.Models.CustomFields,Dataedo.Repository.Services.JoinDefinitions.CustomFieldsJoinsEnum.CustomFieldsJoins[])">
            <summary>
            Joins <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDefinitionDTO"/> using joins.
            </summary>
            <param name="definition">Custom field definition (<see cref="T:Dataedo.Repository.EntityFrameworkModel.Models.CustomFields"/>).</param>
            <param name="join">The array of names of data to load with object.</param>
            <returns></returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.CustomFields.Builders.CustomFieldDTOCollectionBuilder">
            <summary>
            Custom field collection DTO builder.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.CustomFields.Builders.CustomFieldDTOCollectionBuilder.Build(System.Collections.Generic.IEnumerable{Dataedo.Repository.EntityFrameworkModel.Models.CustomFields},Dataedo.Repository.EntityFrameworkModel.Customization.CustomFieldsData,Dataedo.Repository.Services.JoinDefinitions.CustomFieldsJoinsEnum.CustomFieldsJoins[])">
            <summary>
            Builds collection of <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDTO"/> object from <see cref="T:Dataedo.Repository.EntityFrameworkModel.Customization.CustomFieldsData"/> object data using joins.
            </summary>
            <param name="data">The source data.</param>
            <param name="join">The array of names of data to load with object.</param>
            <returns></returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldClassDTO">
            <summary>
            The class providing information about class of custom field. 
            
            <para>Classes provides information about special purposes of custom fields (e.g. description, status.)</para>
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldClassDTO.Id">
            <summary>
            Gets or sets the identifier of class of custom field.
            </summary>
            <example>1</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldClassDTO.Code">
            <summary>
            Gets or sets the code.
            
            <para>Valid values:</para>
            
            <list type="bullet">
            <item><para>"DESCRIPTION" - a description;</para></item>
            <item><para>"LABEL" - a label;</para></item>
            <item><para>"STATUS" - a status;</para></item>
            <item><para>"ROLE" - a role;</para></item>
            <item><para>"CLASSIFICATION" - a classification;</para></item>
            <item><para>"DOMAIN" - a domain;</para></item>
            </list>
            </summary>
            <example>DESCRIPTION</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldClassDTO.Name">
            <summary>
            Gets or sets the name of class.
            </summary>
            <example>Description</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldClassDTO.Sort">
            <summary>
            Gets or sets the sort order value.
            </summary>
            <example>1</example>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDefinitionDTO">
            <summary>
            The class providing information about custom field.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDefinitionDTO.Id">
            <summary>
            Gets or sets the identifier of custom field.
            </summary>
            <example>1</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDefinitionDTO.ClassId">
            <summary>
            Gets or sets the identifier of class of custom field.
            </summary>
            <example>2</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDefinitionDTO.Class">
            <summary>
            Gets or sets the information object about class of custom field. 
            
            <para>Classes provides information about special purposes of custom fields (e.g. description, status.)</para>
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDefinitionDTO.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <example>Status</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDefinitionDTO.Type">
             <summary>
             Gets or sets the type.
            
             <para>Valid values:</para>
             
             <list type="bullet">
             <item><para>"TEXT" - a plain text values;</para></item>
             <item><para>"LIST_CLOSED" - a single values from defined values;</para></item>
             <item><para>"LIST_OPEN" - a single values from defined values and any additional;</para></item>
             <item><para>"MULTI_VALUE_LIST_CLOSED" - a multiple values from defined values;</para></item>
             <item><para>"INTEGER" - a number values;</para></item>
             <item><para>"CHECKBOX" - a true/false/none values;</para></item>
             </list>
             </summary>
             <example>LIST_CLOSED</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDefinitionDTO.OrdinalPosition">
            <summary>
            Gets or sets the ordinal position of field.
            </summary>
            <example>1</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDefinitionDTO.Code">
            <summary>
            Gets or sets the code.
            
            <para>Text code is set on creation of the field.</para>
            </summary>
            <example>status</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDefinitionDTO.Descripton">
            <summary>
            Gets or sets the description.
            </summary>
            <example>
            The field used for setting object status. Valid values: Active, Deprecated, Planned.
            </example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDefinitionDTO.Definition">
            <summary>
            Gets or sets the list of defined values that are suggested to choose in list types and available valid values in closed list type.
            </summary>
            <example>["Active", "Deprecated", "Cancelled", "Planned"]</example>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDTO">
            <summary>
            The class providing value of custom field.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDTO.CustomFieldDefinitionId">
            <summary>
            Gets or sets the identifier of definition of custom field.
            </summary>
            <example>1</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDTO.Definition">
            <summary>
            Gets or sets the information object about definition of custom field.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDTO.Value">
            <summary>
            Gets or sets the list of values of custom field. 
            
            <para>If custom field is list type then multiple values is set; otherwise single element is set.</para>
            </summary>
            <example>["Active"]</example>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.CustomFields.Extensions.CustomFieldDefinitionDTOExtensions">
            <summary>
            The class providing extensions for <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDefinitionDTO"/> data.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.CustomFields.Extensions.CustomFieldDefinitionDTOExtensions.SelectDTO(System.Collections.Generic.IEnumerable{Dataedo.Repository.EntityFrameworkModel.Models.CustomFields},Dataedo.Repository.Services.JoinDefinitions.CustomFieldDefinitionJoinsEnum.CustomFieldDefinitionJoins[])">
            <summary>
            Gets queryable list of <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDefinitionDTO"/> evaluated using parameters.
            </summary>
            <param name="source">The source <see cref="T:Dataedo.Repository.EntityFrameworkModel.Models.CustomFields"/> queryable list.</param>
            <param name="join">The array of names of data to load with objects.</param>
            <returns>The queryable list of <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDefinitionDTO"/> evaluated using parameters.</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.CustomFields.Extensions.CustomFieldsExtensions">
            <summary>
            Provides methods for custom field objects.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.Features.CustomFields.Extensions.CustomFieldsExtensions.PrefixLength">
            <summary>
            Custom field name prefix length.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.CustomFields.Extensions.CustomFieldsExtensions.GetCustomFieldIndex(System.String)">
            <summary>
            Gets the column index in custom fields array from name of field.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.CustomFields.Extensions.CustomFieldsExtensions.GetCustomFieldValue(System.String,Dataedo.Repository.EntityFrameworkModel.Models.CustomFields)">
            <summary>
            Gets custom field value.
            </summary>
            <param name="value">Custom field value.</param>
            <param name="definition">Custom field definition</param>
            <returns></returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.CustomFields.Extensions.CustomFieldsExtensions.GetCustomFieldValue(System.String,Dataedo.Shared.Enums.CustomFieldTypeEnum.CustomFieldType)">
            <summary>
            Gets custom field value.
            </summary>
            <param name="value">Custom field value.</param>
            <param name="customFieldType">The type of custom field.</param>
            <returns></returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.CustomFields.Interfaces.IObjectCustomFields">
            <summary>
            Represents object providing actions for dependencies.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.CustomFields.Interfaces.IObjectCustomFields.GetCustomFields(System.Int32,Dataedo.Repository.Services.JoinDefinitions.CustomFieldsJoinsEnum.CustomFieldsJoins[],System.Boolean)">
            <summary>
            Gets the values of custom fields of object.
            </summary>
            <param name="id">The ID of object.</param>
            <param name="join">The array of names of data to load with objects.</param>
            <returns>The custom fields of object.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.CustomFields.Interfaces.IObjectCustomFields.GetCustomFieldsDefinitions(Dataedo.Repository.Services.JoinDefinitions.CustomFieldDefinitionJoinsEnum.CustomFieldDefinitionJoins[],System.Nullable{System.Int32})">
            <summary>
            Gets the definitions of custom fields applicable for this class of object (that are configured to be used for this type of object).
            </summary>
            <param name="join">The array of names of data to load with objects.</param>
            <returns>The collection of custom field definitions for class.</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.DatabaseObjects.BaseDatabaseObject.Builders.BaseDatabaseObjectDTOBuilder`1">
            <summary>
            <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.BaseDatabaseObject.DTO.BaseDatabaseObjectDTO"/> builder.
            </summary>
            <typeparam name="T">The type of object of builder results which inherits from <see cref="T:Dataedo.Repository.EntityFrameworkModel.Customization.BaseDatabaseObject"/>.</typeparam>
        </member>
        <member name="F:Dataedo.Repository.Services.Features.DatabaseObjects.BaseDatabaseObject.Builders.BaseDatabaseObjectDTOBuilder`1.result">
            <summary>
            The result DTO object.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.DatabaseObjects.BaseDatabaseObject.Builders.BaseDatabaseObjectDTOBuilder`1.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.BaseDatabaseObject.Builders.BaseDatabaseObjectDTOBuilder`1"/> class.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.DatabaseObjects.BaseDatabaseObject.Builders.BaseDatabaseObjectDTOBuilder`1.Default(Dataedo.Repository.EntityFrameworkModel.Customization.BaseDatabaseObject,System.Boolean,System.Boolean)">
            <summary>
            Builds default object data.
            </summary>
            <param name="databaseObject"><see cref="T:Dataedo.Repository.EntityFrameworkModel.Customization.BaseDatabaseObject"></see>/></param>
            <returns>Returns <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.BaseDatabaseObject.Builders.BaseDatabaseObjectDTOBuilder`1"/></returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.DatabaseObjects.BaseDatabaseObject.Builders.BaseDatabaseObjectDTOBuilder`1.JoinDatabase``1(Dataedo.Repository.EntityFrameworkModel.Customization.Interfaces.IDatabase,``0[],System.Boolean)">
            <summary>
            Sets database property using join.
            <para>The property is set if specific join is provided.</para>
            </summary>
            <typeparam name="TJoin">The type of element of array of join parameter based on <see cref="T:System.Enum"></see> type.</typeparam>
            <param name="data">The context (Entity Framework) model (<see cref="T:Dataedo.Repository.EntityFrameworkModel.Customization.Interfaces.IDatabase"/>) containing information about database (<see cref="T:Dataedo.Repository.EntityFrameworkModel.Models.Databases"/>).</param>
            <param name="join">The array of names of data to load with objects.</param>
            <returns>Returns the <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.BaseDatabaseObject.Builders.BaseDatabaseObjectDTOBuilder`1"/> with applied data by provided parameters.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.DatabaseObjects.BaseDatabaseObject.Builders.BaseDatabaseObjectDTOBuilder`1.JoinMetadata``1(Dataedo.Repository.EntityFrameworkModel.Customization.Interfaces.IDatabaseObjectMetadata,``0[])">
            <summary>
            Joins metadata.
            </summary>
            <typeparam name="TJoin">Generic parameter.</typeparam>
            <param name="data">Metadata object.</param>
            <param name="join">Generic join parameter.</param>
            <returns>Returns <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.BaseDatabaseObject.Builders.BaseDatabaseObjectDTOBuilder`1"/></returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.DatabaseObjects.BaseDatabaseObject.Builders.BaseDatabaseObjectDTOBuilder`1.JoinCustomFields``1(Dataedo.Repository.EntityFrameworkModel.Customization.CustomFieldsData,System.Collections.Generic.IEnumerable{Dataedo.Repository.EntityFrameworkModel.Models.CustomFields},``0[])">
            <summary>
            Joins custom fields.
            </summary>
            <typeparam name="TJoin">Generic parameter.</typeparam>
            <param name="data">Custom fields data object.</param>
            <param name="definitions">Definitions of custom fields.</param>
            <param name="join">Generic join parameter.</param>
            <returns>Returns <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.BaseDatabaseObject.Builders.BaseDatabaseObjectDTOBuilder`1"/></returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.DatabaseObjects.BaseDatabaseObject.Builders.BaseDatabaseObjectDTOBuilder`1.JoinDescription``1(Dataedo.Repository.EntityFrameworkModel.Customization.Interfaces.IDescription,``0[])">
            <summary>
            Joins description.
            </summary>
            <typeparam name="TJoin">Generic parameter.</typeparam>
            <param name="data">Description data object.</param>
            <param name="join">Generic join parameter.</param>
            <returns>Returns <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.BaseDatabaseObject.Builders.BaseDatabaseObjectDTOBuilder`1"/></returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.DatabaseObjects.BaseDatabaseObject.DTO.BaseDatabaseObjectDTO">
            <summary>
            The class providing basic information about object.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.BaseDatabaseObject.DTO.BaseDatabaseObjectDTO.Id">
            <summary>
            Gets or sets the identifier of object.
            </summary>
            <example>2</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.BaseDatabaseObject.DTO.BaseDatabaseObjectDTO.DisplayName">
            <summary>
            Gets or sets the base display name.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.BaseDatabaseObject.DTO.BaseDatabaseObjectDTO.DisplayNameWithoutTitle">
            <summary>
            Gets or sets the base display name.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.BaseDatabaseObject.DTO.BaseDatabaseObjectDTO.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <example>Tables and Views</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.BaseDatabaseObject.DTO.BaseDatabaseObjectDTO.DatabaseId">
            <summary>
            Gets or sets the identifier of database containing object.
            </summary>
            <example>1</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.BaseDatabaseObject.DTO.BaseDatabaseObjectDTO.Database">
            <summary>
            Gets or sets the information object about documentation containing object.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.BaseDatabaseObject.DTO.BaseDatabaseObjectDTO.Schema">
            <summary>
            Gets or sets the schema.
            </summary>
            <example>dbo</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.BaseDatabaseObject.DTO.BaseDatabaseObjectDTO.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <example>tables</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.BaseDatabaseObject.DTO.BaseDatabaseObjectDTO.Class">
            <summary>
            Gets or sets the class DTO.
            
            <para>Valid values of Value property:</para>
            
            <list type="bullet">
            <item><para>"TABLE" - a table object;</para></item>
            <item><para>"VIEW" - a view object;</para></item>
            <item><para>"PROCEDURE" - a procedure object;</para></item>
            <item><para>"FUNCTION" - a function object;</para></item>
            </list>
            </summary>
            <example>Value = TABLE, DisplayName = Table</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.BaseDatabaseObject.DTO.BaseDatabaseObjectDTO.Type">
            <summary>
            Gets or sets the type.
            
            <para>Valid values of Value property:</para>
            
            For tables:
            <list type="bullet">
            <item><para>"TABLE" - regular table, default;</para></item>
            <item><para>"EXTERNAL_TABLE"- External table;</para></item>
            <item><para>"FOREIGN_TABLE" - Foreign table;</para></item>
            <item><para>"FILE_TABLE" - File table;</para></item>
            <item><para>"GRAPH_TABLE" - Graph table;</para></item>
            <item><para>"GRAPH_NODE_TABLE" - Graph node/vertex table;</para></item>
            <item><para>"GRAPH_EDGE_TABLE" - Graph edge table;</para></item>
            <item><para>"TEMPORAL_TABLE" - Temporal table;</para></item>
            <item><para>"SYSTEM_VERSIONED_TABLE" - System-versioned table;</para></item>
            <item><para>"HISTORY_TABLE" - History table;</para></item>
            <item><para>"SEARCH_INDEX" - Search index (as in Elasticsearch);</para></item>
            <item><para>"COLLECTION" - Collection (as in MongoDB);</para></item>
            <item><para>"ENTITY" - Entity;</para></item>
            <item><para>"CUBE" - Cube;</para></item>
            <item><para>"DIMENSION" - Dimension;</para></item>
            <item><para>"FLAT_FILE" - Flat file;</para></item>
            <item><para>"OBJECT" - Object;</para></item>
            <item><para>"STANDARD_OBJECT" - Standard object;</para></item>
            <item><para>"CUSTOM_OBJECT" - Custom object;</para></item>
            <item><para>"EXTERNAL_OBJECT" - External object;</para></item>
            </list>
            
            For views:
            <list type="bullet">
            <item><para>"VIEW" - regular view, default;</para></item>
            <item><para>"MATERIALIZED_VIEW" - Materialized view;</para></item>
            <item><para>"EDITIONING_VIEW" - Editioning view;</para></item>
            <item><para>"INDEXED_VIEW" - Indexed view;</para></item>
            <item><para>"NAMED_QUERY" - Named query;</para></item>
            </list>
            
            For procedures:
            <list type="bullet">
            <item><para>"PROCEDURE" - regular stored procedure;</para></item>
            <item><para>"PACKAGE" - packages in Oracle;</para></item>
            </list>
            
            For functions:
            <list type="bullet">
            <item><para>"FUNCTION" - regular user defined function;</para></item>
            <item><para>"METHOD" - methods in Db2;</para></item>
            </list>
            </summary>
            <example>Value = TABLE, DisplayName = Table</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.BaseDatabaseObject.DTO.BaseDatabaseObjectDTO.Status">
            <summary>
            Gets or sets the status of object existence in database.
            
            <para>Available values:</para>
            
            <list type="bullet">
            <item><para>"A" - an object exists in database;</para></item>
            <item><para>"D" - an object is deleted from database;</para></item>
            </list>
            </summary>
            <example>Value = A, DisplayName = Active</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.BaseDatabaseObject.DTO.BaseDatabaseObjectDTO.Source">
            <summary>
            Gets or sets the source.
            
            <para>Valid values:</para>
            
            <list type="bullet">
            <item><para>"DBMS" - an object is imported;</para></item>
            <item><para>"USER" - an object is defined by user;</para></item>
            </list>
            </summary>
            <example>Value = USER, DisplayName = User</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.BaseDatabaseObject.DTO.BaseDatabaseObjectDTO.Description">
            <summary>
            Gets or sets the description of object.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.BaseDatabaseObject.DTO.BaseDatabaseObjectDTO.SubjectAreas">
            <summary>
            Gets or sets the subject areas that object belongs to.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.BaseDatabaseObject.DTO.BaseDatabaseObjectDTO.CustomFields">
            <summary>
            Gets or sets the custom fields.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.BaseDatabaseObject.DTO.BaseDatabaseObjectDTO.Metadata">
            <summary>
            Gets or sets the metadata (creation in DBMS, import, creation and modification information).
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.DatabaseObjects.BaseDatabaseObject.Extensions.BasedatabaseExtensions.Order``1(System.Linq.IQueryable{``0})">
            <summary>
            Gets the order function of <see cref="T:Dataedo.Repository.EntityFrameworkModel.Customization.BaseDatabaseObject"/> collection. It does not include cross DB ordering.
            </summary>
            <param name="source">The input parameter which has to include <see cref="T:Dataedo.Repository.EntityFrameworkModel.Models.Databases"/> due to show_schema and show_schema_override fields.</param>
            <returns></returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.DatabaseObjects.Columns.Builders.ColumnDTOBuilder">
            <summary>
            The class providing building <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.Columns.DTO.ColumnDTO"/>.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.DatabaseObjects.Columns.Builders.ColumnDTOBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.Columns.Builders.ColumnDTOBuilder"/> class.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.DatabaseObjects.Columns.Builders.ColumnDTOBuilder.Build(Dataedo.Repository.EntityFrameworkModel.Models.Columns,System.Collections.Generic.IEnumerable{Dataedo.Repository.EntityFrameworkModel.Models.CustomFields},Dataedo.Repository.Services.JoinDefinitions.ColumnsJoinsEnum.ColumnsJoins[],System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{Dataedo.Repository.EntityFrameworkModel.QueryMappings.TopValuesResult},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Builds an object of type <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.Columns.DTO.ColumnDTO"/>.
            </summary>
            <param name="data">The source queryable list of <see cref="T:Dataedo.Repository.EntityFrameworkModel.Models.Columns"/> objects from source.</param>
            <param name="customFieldsDefinitions">The enumerable list of <see cref="T:Dataedo.Repository.EntityFrameworkModel.Models.CustomFields"/> objects from source for joining to result.</param>
            <param name="join">The array of names of data to load with object.</param>
            <returns>The object of type <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.Columns.DTO.ColumnDTO"/>.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.DatabaseObjects.Columns.Builders.ColumnDTOBuilder.Build(Dataedo.Repository.EntityFrameworkModel.Models.Columns,System.Collections.Generic.IEnumerable{Dataedo.Repository.EntityFrameworkModel.Models.CustomFields},Dataedo.Repository.Services.JoinDefinitions.ColumnsJoinsEnum.ColumnsJoins[],System.Collections.Generic.IEnumerable{Dataedo.Repository.Services.Features.GlossaryEntries.DTO.GlossaryEntryDTO},System.Collections.Generic.IEnumerable{Dataedo.Repository.EntityFrameworkModel.Models.GlossaryMappings},System.Nullable{System.Int32},System.Collections.Generic.IEnumerable{Dataedo.Repository.EntityFrameworkModel.QueryMappings.TopValuesResult},System.Boolean,System.Boolean)">
            <summary>
            Builds an object of type <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.Columns.DTO.ColumnDTO"/>.
            </summary>
            <param name="data">The source queryable list of <see cref="T:Dataedo.Repository.EntityFrameworkModel.Models.Columns"/> objects from source.</param>
            <param name="customFieldsDefinitions">The enumerable list of <see cref="T:Dataedo.Repository.EntityFrameworkModel.Models.CustomFields"/> objects from source for joining to result.</param>
            <param name="join">The array of names of data to load with object.</param>
            <param name="columnsGlossaryEntries">The collection of all glossary entries result models (<see cref="T:Dataedo.Repository.Services.Features.GlossaryEntries.DTO.GlossaryEntryDTO"/>) of all source columns.</param>
            <param name="columnsGlossaryMappings">The collection of all object-term mappings context (Entity Framework) models (<see cref="T:Dataedo.Repository.EntityFrameworkModel.Models.GlossaryMappings"/>) of all source columns.></param>
            <returns>The object of type <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.Columns.DTO.ColumnDTO"/>.</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.DatabaseObjects.Columns.ColumnFiltersEnum.ColumnFilters">
            <summary>
            Specifies applicable data filters for columns.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.DatabaseObjects.Columns.ColumnFiltersEnum.HasAnyItem``1(Dataedo.Repository.Services.Features.DatabaseObjects.Columns.ColumnFiltersEnum.ColumnFilters[],Dataedo.Repository.Services.Features.DatabaseObjects.Columns.ColumnFiltersEnum.ColumnFilters[])">
            <summary>
            Checks whether provided domain array has any element of items array.
            </summary>
            <typeparam name="T">The type of element of array of join parameter based on <see cref="T:System.Enum"></see> type.</typeparam>
            <param name="array">The domain array of values to check in.</param>
            <param name="items">The array of values to check whether any is domain array.</param>
            <returns><c>true</c> domain array has any element of items array; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.DatabaseObjects.Columns.DTO.ColumnDTO">
            <summary>
            The class providing information about column.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Columns.DTO.ColumnDTO.Id">
            <summary>
            Gets or sets the identifier of object.olu
            </summary>
            <example>146</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Columns.DTO.ColumnDTO.ParentDatabaseObjectId">
            <summary>
            Gets or sets the identifier of parent database object containing object.
            </summary>
            <example>1</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Columns.DTO.ColumnDTO.ParentDatabaseObjectClass">
            <summary>
            Gets or sets the class of parent database object containing object.
            </summary>
            <example>TABLE</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Columns.DTO.ColumnDTO.ParentDatabaseObject">
            <summary>
            Gets or sets the information object about parent database object containing object.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Columns.DTO.ColumnDTO.ParentColumnId">
            <summary>
            Gets or sets the identifier of parent column containing object (if it is in hierarchy with another column).
            </summary>
            <example>1</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Columns.DTO.ColumnDTO.ParentColumn">
            <summary>
            Gets or sets the information object about parent column containing object (if it is in hierarchy with another column.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Columns.DTO.ColumnDTO.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <example>column_id</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Columns.DTO.ColumnDTO.Type">
            <summary>
            Gets or sets the type.
            
            <para>Valid values:</para>
            
            <list type="bullet">
            <item><para>"COLUMN" - regular column</para></item>
            </list>
            </summary>
            <example>Value = COLUMN, DisplayName = Column</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Columns.DTO.ColumnDTO.Level">
            <summary>
            Gets or sets the level (nesting) of column.
            <para>In regular databases value is always 1.</para>
            </summary>
            <example>1</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Columns.DTO.ColumnDTO.Path">
            <summary>
            Gets or sets the path (location) of column (without its name).
            <para>In regular databases value is the name of parent database object containing column.</para>
            <para>In hierarchical structures path is composed of name of parent database object containing column and names of all columns that are on higher level of hierarchy.</para>
            </summary>
            <example>tables.table_id</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Columns.DTO.ColumnDTO.PathShort">
            <summary>
            Gets or sets the short version of <see cref="P:Dataedo.Repository.Services.Features.DatabaseObjects.Columns.DTO.ColumnDTO.Path"/>. Value is at least composed of beginning and ending of hierarchy value.
            <para>The length is limited to 50 characters.</para>
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Columns.DTO.ColumnDTO.OrdinalPosition">
            <summary>
            Gets or sets the position of column in object in DBMS.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Columns.DTO.ColumnDTO.Sort">
            <summary>
            Gets or sets the alternative column sorting defined by user in Dataedo.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Columns.DTO.ColumnDTO.Source">
            <summary>
            Gets or sets the source.
            
            <para>Valid values:</para>
            
            <list type="bullet">
            <item><para>"DBMS" - an object is imported;</para></item>
            <item><para>"USER" - an object is defined by user;</para></item>
            </list>
            </summary>
            <example>Value = USER, DisplayName = User</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Columns.DTO.ColumnDTO.Status">
            <summary>
            Gets or sets the status of object existence in database.
            
            <para>Available values:</para>
            
            <list type="bullet">
            <item><para>"A" - an object exists in database;</para></item>
            <item><para>"D" - an object is deleted from database;</para></item>
            </list>
            </summary>
            <example>Value = A, DisplayName = Active</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Columns.DTO.ColumnDTO.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <example>Column</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Columns.DTO.ColumnDTO.Datatype">
            <summary>
            Gets or sets the type of data of parameter.
            </summary>
            <example>nvarchar</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Columns.DTO.ColumnDTO.DataLength">
            <summary>
            Gets or sets the data length/precision as text.
            <para>Depending on data type it can have different formats, e.g. "100", "5,4", "MAX" etc. Null if parameter has no length/precision defined.</para>
            </summary>
            <example>nvarchar</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Columns.DTO.ColumnDTO.IsNullable">
            <summary>
            Gets or sets a value indicating whether values in column may be null.
            </summary>
            <example>true</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Columns.DTO.ColumnDTO.DefaultValue">
            <summary>
            Gets or sets the formula of column default value. NULL if field has not default value specification.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Columns.DTO.ColumnDTO.IsIdentity">
            <summary>
            Gets or sets a value indicating whether column is an identity/auto incremented column.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Columns.DTO.ColumnDTO.IsComputed">
            <summary>
            Gets or sets a value indicating whether column is a computed column.
            <para>If column is computed then calculation formula should be available in <see cref="P:Dataedo.Repository.Services.Features.DatabaseObjects.Columns.DTO.ColumnDTO.ComputedFormula"/> field.</para>
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Columns.DTO.ColumnDTO.ComputedFormula">
            <summary>
            Gets or sets the calculation formula for computed columns.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Columns.DTO.ColumnDTO.Description">
            <summary>
            Gets or sets the description of object.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Columns.DTO.ColumnDTO.CustomFields">
            <summary>
            Gets or sets the custom fields.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Columns.DTO.ColumnDTO.Metadata">
            <summary>
            Gets or sets the metadata (creation and modification information) information.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Columns.DTO.ColumnDTO.HasColumns">
            <summary>
            Gets or sets a value indicating whether column is a parent of any another column.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Columns.DTO.ColumnDTO.Columns">
            <summary>
            Gets or sets the collection of columns that their parent is current column.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Columns.DTO.ColumnDTO.GlossaryEntries">
            <summary>
            Gets or sets the collection of glossary entries related to column.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Columns.DTO.ColumnDTO.Keys">
            <summary>
            Gets or sets the collection of keys related to column.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Columns.DTO.ColumnDTO.RelationshipsReferenced">
            <summary>
            Gets or sets the collection of keys related to column.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Columns.DTO.ColumnDTO.RelationshipsReferencing">
            <summary>
            Gets or sets the collection of keys related to column.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Columns.DTO.ColumnDTO.DisplayName">
            <summary>
            Gets or sets the base display name.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.DatabaseObjects.Columns.Extensions.ColumnDTOExtensions.SelectDTO(System.Collections.Generic.IEnumerable{Dataedo.Repository.EntityFrameworkModel.Models.Columns},System.Collections.Generic.IEnumerable{Dataedo.Repository.EntityFrameworkModel.Models.CustomFields},Dataedo.Repository.Services.JoinDefinitions.ColumnsJoinsEnum.ColumnsJoins[],System.Collections.Generic.Dictionary{System.Int32,System.Nullable{System.Int32}})">
            <summary>
            Gets queryable list of <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.Columns.DTO.ColumnDTO"/> evaluated using parameters.
            </summary>
            <param name="source">The source queryable list of <see cref="T:Dataedo.Repository.EntityFrameworkModel.Models.Columns"/> objects from source.</param>
            <param name="customFieldsDefinitions">The enumerable list of <see cref="T:Dataedo.Repository.EntityFrameworkModel.Models.CustomFields"/> objects from source for joining to result.</param>
            <param name="join">The array of names of data to load with objects.</param>
            <param name="parameters">The parameters providing selecting required set of data by skipping and limiting result items.</param>
            <returns>The queryable list of <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.Columns.DTO.ColumnDTO"/> evaluated using parameters.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.DatabaseObjects.Columns.Extensions.ColumnDTOExtensions.SelectDTO(System.Collections.Generic.IEnumerable{Dataedo.Repository.EntityFrameworkModel.Models.Columns},System.Collections.Generic.IEnumerable{Dataedo.Repository.EntityFrameworkModel.Models.CustomFields},Dataedo.Repository.Services.JoinDefinitions.ColumnsJoinsEnum.ColumnsJoins[],System.Collections.Generic.IEnumerable{Dataedo.Repository.Services.Features.GlossaryEntries.DTO.GlossaryEntryDTO},System.Collections.Generic.IEnumerable{Dataedo.Repository.EntityFrameworkModel.Models.GlossaryMappings},System.ValueTuple{System.Collections.Generic.IEnumerable{Dataedo.Repository.Services.Features.Permissions.RoleActions.Enums.RoleActionType.RoleAction},System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{System.Int32},System.Collections.Generic.List{Dataedo.Repository.Services.Features.Permissions.RoleActions.Enums.RoleActionType.RoleAction}}}},System.Collections.Generic.Dictionary{System.Int32,System.Nullable{System.Int32}},System.Collections.Generic.IEnumerable{Dataedo.Repository.EntityFrameworkModel.QueryMappings.TopValuesResult},System.Boolean)">
            <summary>
            Gets queryable list of <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.Columns.DTO.ColumnDTO"/> evaluated using parameters.
            </summary>
            <param name="source">The source queryable list of <see cref="T:Dataedo.Repository.EntityFrameworkModel.Models.Columns"/> objects from source.</param>
            <param name="customFieldsDefinitions">The enumerable list of <see cref="T:Dataedo.Repository.EntityFrameworkModel.Models.CustomFields"/> objects from source for joining to result.</param>
            <param name="join">The array of names of data to load with objects.</param>
            <param name="parameters">The parameters providing selecting required set of data by skipping and limiting result items.</param>
            <param name="columnsGlossaryEntries">The collection of all glossary entries result models (<see cref="T:Dataedo.Repository.Services.Features.GlossaryEntries.DTO.GlossaryEntryDTO"/>) of all source columns.</param>
            <param name="columnsGlossaryMappings">The collection of all object-term mappings context (Entity Framework) models (<see cref="T:Dataedo.Repository.EntityFrameworkModel.Models.GlossaryMappings"/>) of all source columns.></param>
            <returns>The queryable list of <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.Columns.DTO.ColumnDTO"/> evaluated using parameters.</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.DatabaseObjects.Columns.Interfaces.IColumnsService">
            <summary>
            Represents object providing actions for column objects.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.DatabaseObjects.Columns.Interfaces.IColumnsService.GetObjects(System.Int32,Dataedo.Repository.Services.JoinDefinitions.ColumnsJoinsEnum.ColumnsJoins[],Dataedo.Repository.Services.Parameters.OffsetLimitFilterParameters{Dataedo.Repository.Services.Features.DatabaseObjects.Columns.ColumnFiltersEnum.ColumnFilters})">
            <summary>
            Gets the object which contains a collection of <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.Columns.DTO.ColumnDTO"/> representing column of database object.
            </summary>
            <param name="id">The ID of parent database object (e.g. table or view).</param>
            <param name="join">The array of names of data to load with objects.</param>
            <param name="parameters">The parameters providing selecting required set of data by skipping, limiting, filtering result items.</param>
            <returns>the object which contains a collection of <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.Columns.DTO.ColumnDTO"/> representing column of database object.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.DatabaseObjects.Columns.Interfaces.IColumnsService.GetObject(System.Int32,Dataedo.Repository.Services.JoinDefinitions.ColumnsJoinsEnum.ColumnsJoins[])">
            <summary>
            Gets information object about database by ID.
            </summary>
            <param name="id">The ID of object.</param>
            <param name="join">The array of names of data to load with objects.</param>
            <returns>The information object about object by ID.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.DatabaseObjects.Columns.Interfaces.IColumnsService.GetColumns(System.Collections.Generic.IEnumerable{System.Int32},Dataedo.Repository.Services.JoinDefinitions.ColumnsJoinsEnum.ColumnsJoins[])">
            <summary>
            Gets the collection of columns that their parent is current column.
            </summary>
            <param name="id">The ID of column.</param>
            <param name="join">The array of names of data to load with objects.</param>
            <returns>The collection of columns that their parent is current column.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.DatabaseObjects.Columns.Interfaces.IColumnsService.GetMetadata(System.Int32)">
            <summary>
            Gets the metadata (creation, import and update information) information.
            </summary>
            <param name="id">The ID of object.</param>
            <returns>The metadata (creation, import and update information) information.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.DatabaseObjects.Columns.Interfaces.IColumnsService.GetGlossaryEntries(System.Int32,Dataedo.Repository.Services.JoinDefinitions.GlossaryEntriesJoinsEnum.GlossaryEntryJoins[],Dataedo.Repository.Services.Parameters.OffsetLimitFilterParameters{Dataedo.Repository.Services.Features.GlossaryEntries.GlossaryEntryFiltersEnum.GlossaryEntryFilters})">
            <summary>
            Gets the object containing collection of glossary terms related to column.
            </summary>
            <param name="columnId">The ID of column.</param>
            <param name="join">The array of names of data to load with objects.</param>
            <param name="parameters">The parameters providing selecting required set of data by skipping, limiting, filtering result items.</param>
            <returns>The collection of glossary terms related to column.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.DatabaseObjects.Columns.Interfaces.IColumnsService.GetKeys(System.Int32,Dataedo.Repository.Services.JoinDefinitions.KeysJoinsEnum.KeysJoins[],Dataedo.Repository.Services.Parameters.OffsetLimitParameters)">
            <summary>
            Gets the object containing collection of keys that consists of column with provided ID.
            </summary>
            <param name="columnId">The ID of column.</param>
            <param name="join">The array of names of data to load with objects.</param>
            <param name="parameters">The parameters providing selecting required set of data by skipping, limiting, filtering result items.</param>
            <returns>The collection of keys that consists of column with provided ID.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.DatabaseObjects.Columns.Interfaces.IColumnsService.GetRelationships(Dataedo.Repository.Services.Features.Relationships.Enums.RelationshipTypeEnum,System.Int32,Dataedo.Repository.Services.JoinDefinitions.RelationshipsJoinsEnum.RelationshipsJoins[],Dataedo.Repository.Services.Parameters.OffsetLimitParameters)">
            <summary>
            Gets the object containing collection of relationships that consists of column with provided ID.
            </summary>
            <param name="type">The enumeration providing information about side of relationship where column should be present.</param>
            <param name="columnId">The ID of column.</param>
            <param name="join">The array of names of data to load with objects.</param>
            <param name="parameters">The parameters providing selecting required set of data by skipping, limiting, filtering result items.</param>
            <returns>The object containing collection of relationships that consists of column with provided ID.</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.DatabaseObjects.Parameters.Builders.ParameterDTOBuilder">
            <summary>
            Class providing building objects.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.DatabaseObjects.Parameters.Builders.ParameterDTOBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.Parameters.Builders.ParameterDTOBuilder"/> class.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.DatabaseObjects.Parameters.Builders.ParameterDTOBuilder.Build(Dataedo.Repository.EntityFrameworkModel.Models.Parameters,System.Collections.Generic.IEnumerable{Dataedo.Repository.EntityFrameworkModel.Models.CustomFields},Dataedo.Repository.Services.JoinDefinitions.ParametersJoinsEnum.ParametersJoins[])">
            <summary>
            Builds <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.Parameters.Builders.ParameterDTOBuilder"/> object from <see cref="T:Dataedo.Repository.EntityFrameworkModel.Models.Parameters"/> object data using joins.
            </summary>
            <returns>Returns <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.Parameters.DTO.ParameterDTO"/> data transfer object.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.DatabaseObjects.Parameters.Builders.ParameterDTOBuilder.JoinCustomFields``1(Dataedo.Repository.EntityFrameworkModel.Customization.CustomFieldsData,System.Collections.Generic.IEnumerable{Dataedo.Repository.EntityFrameworkModel.Models.CustomFields},``0[])">
            <summary>
            Joins custom fields.
            </summary>
            <typeparam name="TJoin">Generic parameter.</typeparam>
            <param name="data">Custom fields data object.</param>
            <param name="definitions">Definitions of custom fields.</param>
            <param name="join">Generic join parameter.</param>
            <returns>Returns <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.Parameters.Builders.ParameterDTOBuilder"/></returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.DatabaseObjects.Parameters.DTO.ParameterDTO">
            <summary>
            The class providing information about parameter.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Parameters.DTO.ParameterDTO.Id">
            <summary>
            Gets or sets the identifier of object.
            </summary>
            <example>1</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Parameters.DTO.ParameterDTO.ParentObjectId">
            <summary>
            Gets or sets the identifier of parent object (e.g. procedure or function).
            </summary>
            <example>2</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Parameters.DTO.ParameterDTO.ParentObject">
            <summary>
            Gets or sets the parent object of parameter.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Parameters.DTO.ParameterDTO.OrdinalPosition">
            <summary>
            Gets or sets the ordinal position of parameter.
            </summary>
            <example>1</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Parameters.DTO.ParameterDTO.ParameterMode">
            <summary>
            Gets or sets the mode of parameter (e.g. IN, OUT, INOUT).
            </summary>
            <example>IN</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Parameters.DTO.ParameterDTO.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <example>message</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Parameters.DTO.ParameterDTO.Datatype">
            <summary>
            Gets or sets the type of data of parameter.
            </summary>
            <example>nvarchar(max)</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Parameters.DTO.ParameterDTO.DataLength">
            <summary>
            Gets or sets the data length/precision as text.
            <para>Depending on data type it can have different formats, e.g. "100", "5,4", "MAX" etc. Null if parameter has no length/precision defined.</para>
            </summary>
            <example>nvarchar</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Parameters.DTO.ParameterDTO.Status">
            <summary>
            Gets or sets the status of object existence in database.
            
            <para>Available values:</para>
            
            'A' - an object exists in database; 
            'D' - an object is deleted from database; 
            </summary>
            <example>A</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Parameters.DTO.ParameterDTO.Description">
            <summary>
            Gets or sets the description of object.
            </summary>
            <example>Input parameter for stored procedure log_error. Enter error message.</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Parameters.DTO.ParameterDTO.CustomFields">
            <summary>
            Gets or sets the custom fields.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Parameters.DTO.ParameterDTO.Metadata">
            <summary>
            Gets or sets the metadata (creation and modification information).
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Parameters.DTO.ParameterDTO.DisplayName">
            <summary>
            Gets or sets the base display name.
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.DatabaseObjects.Parameters.Extensions.ParameterDTOExtensions">
            <summary>
            The class providing extensions for <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.Parameters.DTO.ParameterDTO"/> data.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.DatabaseObjects.Parameters.Extensions.ParameterDTOExtensions.SelectDTO(System.Collections.Generic.IEnumerable{Dataedo.Repository.EntityFrameworkModel.Models.Parameters},System.Collections.Generic.IEnumerable{Dataedo.Repository.EntityFrameworkModel.Models.CustomFields},Dataedo.Repository.Services.JoinDefinitions.ParametersJoinsEnum.ParametersJoins[])">
            <summary>
            Gets queryable list of <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.Parameters.DTO.ParameterDTO"/> evaluated using parameters.
            </summary>
            <param name="source">The source <see cref="T:Dataedo.Repository.EntityFrameworkModel.Models.Parameters"/> queryable list.</param>
            <param name="join">The array of names of data to load with objects.</param>
            <param name="parameters">The parameters providing selecting required set of data by skipping and limiting result items.</param>
            <returns>The queryable list of <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.Parameters.Builders.ParameterDTOBuilder"/> evaluated using parameters.</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.DatabaseObjects.Parameters.Interfaces.IParametersService">
            <summary>
            Represents object providing actions for parameter objects.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.DatabaseObjects.Parameters.Interfaces.IParametersService.GetObjects(System.Int32,Dataedo.Repository.Services.JoinDefinitions.ParametersJoinsEnum.ParametersJoins[],Dataedo.Repository.Services.Parameters.OffsetLimitParameters)">
            <summary>
            Gets information object about parameter by ID.
            </summary>
            <param name="id">The ID of parent database object.</param>
            <param name="join">The array of names of data to load with objects.</param>
            <param name="parameters">The parameters providing selecting required set of data by skipping and limiting result items.</param>
            <returns>The information object about parameter by ID.</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.DatabaseObjects.Procedures.Builders.ProcedureFunctionDTOBuilder">
            <summary>
            Class providing building objects.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.DatabaseObjects.Procedures.Builders.ProcedureFunctionDTOBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.Procedures.Builders.ProcedureFunctionDTOBuilder"/> class.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.DatabaseObjects.Procedures.Builders.ProcedureFunctionDTOBuilder.Build(Dataedo.Repository.EntityFrameworkModel.Models.Procedures,System.Boolean,System.Collections.Generic.IEnumerable{Dataedo.Repository.EntityFrameworkModel.Models.CustomFields},Dataedo.Repository.Services.JoinDefinitions.Base.ProceduresFunctionsJoinsEnum.ProceduresFunctionsJoins[],System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
            Builds <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.Procedures.Builders.ProcedureFunctionDTOBuilder"/> object from <see cref="T:Dataedo.Repository.EntityFrameworkModel.Models.Procedures"/> object data using joins.
            </summary>
            <param name="data">The source data.</param>
            <param name="definitions">The collection on object providing information about custom field without values.</param>
            <param name="join">The array of names of data to load with objects.</param>
            <returns>Returns <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.Procedures.DTO.ProcedureFunctionDTO"/> data transfer object.</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.DatabaseObjects.Procedures.DTO.FunctionDTO">
            <summary>
            The class providing information about function.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Procedures.DTO.FunctionDTO.Class">
            <summary>
            Gets or sets the class.
            
            <para>Valid values:</para>
            
            <list type="bullet">
            <item><para>"FUNCTION" - a function object;</para></item>
            </list>
            </summary>
            <example>Value = FUNCTION, DisplayName = Function</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Procedures.DTO.FunctionDTO.Type">
            <summary>
            Gets or sets the type.
            
            <para>Valid values:</para>
            
            <list type="bullet">
            <item><para>"FUNCTION" - regular user defined function</para></item>
            <item><para>"METHOD" - methods in Db2</para></item>
            </list>
            </summary>
            <example>Value = METHOD, DisplayName = Method</example>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.DatabaseObjects.Procedures.DTO.ProcedureDTO">
            <summary>
            The class providing information about procedure.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Procedures.DTO.ProcedureDTO.Class">
            <summary>
            Gets or sets the class.
            
            <para>Valid values:</para>
            
            <list type="bullet">
            <item><para>"PROCEDURE" - a procedure object;</para></item>
            </list>
            </summary>
            <example>Value = PROCEDURE, DisplayName = Procedure</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Procedures.DTO.ProcedureDTO.Type">
            <summary>
            Gets or sets the type.
            
            <para>Valid values:</para>
            
            <list type="bullet">
            <item><para>"PROCEDURE" - regular stored procedure</para></item>
            <item><para>"PACKAGE" - packages in Oracle</para></item>
            <item><para>"CLR_PROCEDURE" - CLR stored procedure;</para></item>
            <item><para>"EXTENDED_PROCEDURE" - Extended procedure;</para></item>
            </list>
            </summary>
            <example>Value = PACKAGE, DisplayName = Package</example>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.DatabaseObjects.Procedures.DTO.ProcedureFunctionDTO">
            <summary>
            The class providing information about object.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Procedures.DTO.ProcedureFunctionDTO.Class">
            <summary>
            Gets or sets the class.
            
            <para>Valid values:</para>
            
            <list type="bullet">
            <item><para>"PROCEDURE" - a procedure object;</para></item>
            <item><para>"FUNCTION" - a function object;</para></item>
            </list>
            </summary>
            <example>Value = PROCEDURE, DisplayName = Procedure</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Procedures.DTO.ProcedureFunctionDTO.Type">
            <summary>
            Gets or sets the type.
            
            <para>Valid values of Value property:</para>
            
            For procedures:
            <list type="bullet">
            <item><para>"PROCEDURE" - regular stored procedure;</para></item>
            <item><para>"PACKAGE" - packages in Oracle;</para></item>
            </list>
            
            For functions:
            <list type="bullet">
            <item><para>"FUNCTION" - regular user defined function;</para></item>
            <item><para>"METHOD" - methods in Db2;</para></item>
            </list>
            </summary>
            <example>Value = PROCEDURE, DisplayName = Procedure</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Procedures.DTO.ProcedureFunctionDTO.Language">
            <summary>
            Gets or sets the language of object.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Procedures.DTO.ProcedureFunctionDTO.Script">
            <summary>
            Gets or sets the definition of object.
            </summary>
            <example>dbo</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Procedures.DTO.ProcedureFunctionDTO.Parameters">
            <summary>
            Gets or sets the parameters of object.
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.DatabaseObjects.Procedures.Extensions.ProcedureFunctionDTOExtensions">
            <summary>
            The class providing extensions for <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.Procedures.DTO.ProcedureFunctionDTO"/> data.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.DatabaseObjects.Procedures.Extensions.ProcedureFunctionDTOExtensions.SelectDTO(System.Collections.Generic.IEnumerable{Dataedo.Repository.EntityFrameworkModel.Models.Procedures},System.ValueTuple{System.Collections.Generic.IEnumerable{Dataedo.Repository.Services.Features.Permissions.RoleActions.Enums.RoleActionType.RoleAction},System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{System.Int32},System.Collections.Generic.List{Dataedo.Repository.Services.Features.Permissions.RoleActions.Enums.RoleActionType.RoleAction}}}},System.Collections.Generic.IEnumerable{Dataedo.Repository.EntityFrameworkModel.Models.CustomFields},Dataedo.Repository.Services.JoinDefinitions.Base.ProceduresFunctionsJoinsEnum.ProceduresFunctionsJoins[],System.Collections.Generic.Dictionary{System.Int32,System.Nullable{System.Int32}})">
            <summary>
            Gets queryable list of <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.Procedures.DTO.ProcedureFunctionDTO"/> evaluated using parameters.
            </summary>
            <param name="source">The source <see cref="T:Dataedo.Repository.EntityFrameworkModel.Models.Procedures"/> queryable list.</param>
            <param name="definitions">The collection on object providing information about custom field without values.</param>
            <param name="join">The array of names of data to load with objects.</param>
            <param name="parameters">The parameters providing selecting required set of data by skipping and limiting result items.</param>
            <returns>The queryable list of <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.Procedures.DTO.ProcedureFunctionDTO"/> evaluated using parameters.</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.DatabaseObjects.Procedures.Interfaces.IFunctionsService">
            <summary>
            Represents object providing actions for function objects.
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.DatabaseObjects.Procedures.Interfaces.IProceduresFunctionsService">
            <summary>
            Represents object providing common actions for procedures and function objects.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.DatabaseObjects.Procedures.Interfaces.IProceduresFunctionsService.GetScript(System.Int32)">
            <summary>
            Gets definition of procedure by ID.
            </summary>
            <param name="id">The ID of object.</param>
            <returns>The information object about object by ID.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.DatabaseObjects.Procedures.Interfaces.IProceduresFunctionsService.GetObject(System.Int32,Dataedo.Repository.Services.JoinDefinitions.Base.ProceduresFunctionsJoinsEnum.ProceduresFunctionsJoins[])">
            <summary>
            Creates a <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.Procedures.DTO.ProcedureDTO"/> object.
            </summary>
            <param name="id">The ID of object.</param>
            <param name="join">The array of names of data to load with object.</param>
            <returns>The <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.Procedures.DTO.ProcedureDTO"/> object.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.DatabaseObjects.Procedures.Interfaces.IProceduresFunctionsService.GetObjectParameters(System.Int32,Dataedo.Repository.Services.JoinDefinitions.ParametersJoinsEnum.ParametersJoins[],Dataedo.Repository.Services.Parameters.OffsetLimitParameters)">
            <summary>
            Gets the list of basic information about parameters of procedure.
            </summary>
            <param name="id">The ID of procedure.</param>
            <param name="join">The array of names of data to load with objects.</param>
            <param name="parameters">The parameters providing selecting required set of data by skipping and limiting result items.</param>
            <returns>The list of basic information about parameters of procedure.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.DatabaseObjects.Procedures.Interfaces.IProceduresFunctionsService.GetObjectsAsync(System.Int32,Dataedo.Repository.Services.JoinDefinitions.Base.ProceduresFunctionsJoinsEnum.ProceduresFunctionsJoins[],Dataedo.Repository.Services.Parameters.OffsetLimitFilterParameters{Dataedo.Repository.Services.Features.DatabaseObjects.Procedures.ProcedureFiltersEnum.ProcedureFilters})">
            <summary>
            Gets information about base database objects by ID of database.
            </summary>
            <param name="id">The ID of database.</param>
            <param name="join">The array of names of data to load with objects.</param>
            <returns>The information object about database by ID.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.DatabaseObjects.Procedures.Interfaces.IProceduresFunctionsService.GetObjectsWithoutModuleAsync(System.Int32,Dataedo.Repository.Services.JoinDefinitions.Base.ProceduresFunctionsJoinsEnum.ProceduresFunctionsJoins[],Dataedo.Repository.Services.Parameters.OffsetLimitFilterParameters{Dataedo.Repository.Services.Features.DatabaseObjects.Procedures.ProcedureFiltersEnum.ProcedureFilters})">
            <summary>
            Gets information about base database objects (procedure or function) by ID of database that do not belong to any module in provided database.
            </summary>
            <param name="id">The ID of database.</param>
            <param name="join">The array of names of data to load with objects (procedure or function).</param>
            <param name="parameters">The parameters providing selecting required set of data by skipping and limiting result items.</param>
            <returns>The information object about database object (procedure or function) by ID of database that do not belong to any module in provided database.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.DatabaseObjects.Procedures.Interfaces.IProceduresFunctionsService.GetObjectsByModuleAsync(System.Int32,Dataedo.Repository.Services.JoinDefinitions.Base.ProceduresFunctionsJoinsEnum.ProceduresFunctionsJoins[],Dataedo.Repository.Services.Parameters.OffsetLimitFilterParameters{Dataedo.Repository.Services.Features.DatabaseObjects.Procedures.ProcedureFiltersEnum.ProcedureFilters})">
            <summary>
            Gets information about base database objects (procedure or function) by ID of module.
            </summary>
            <param name="id">The ID of module.</param>
            <param name="join">The array of names of data to load with objects (procedure or function).</param>
            <param name="parameters">The parameters providing selecting required set of data by skipping and limiting result items.</param>
            <returns>The information object about database object (procedure or function) by ID of module.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.DatabaseObjects.Procedures.Interfaces.IProceduresFunctionsService.GetObjectsEmptyCollectionAsync(System.Int32,Dataedo.Repository.Services.JoinDefinitions.Base.ProceduresFunctionsJoinsEnum.ProceduresFunctionsJoins[])">
            <summary>
            Gets the empty collection of table objects by ID of database (existence of database is being checked).
            </summary>
            <param name="id">The ID of database.</param>
            <param name="join">The array of names of data to load with objects.</param>
            <returns>The empty collection of table objects.</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.DatabaseObjects.Procedures.Interfaces.IProceduresService">
            <summary>
            Represents object providing actions for procedure objects.
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.DatabaseObjects.Procedures.ProcedureFiltersEnum.ProcedureFilters">
            <summary>
            Specifies applicable data filters for procedures.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.DatabaseObjects.Procedures.ProcedureFiltersEnum.HasAnyItem``1(Dataedo.Repository.Services.Features.DatabaseObjects.Procedures.ProcedureFiltersEnum.ProcedureFilters[],Dataedo.Repository.Services.Features.DatabaseObjects.Procedures.ProcedureFiltersEnum.ProcedureFilters[])">
            <summary>
            Checks whether provided domain array has any element of items array.
            </summary>
            <typeparam name="T">The type of element of array of join parameter based on <see cref="T:System.Enum"></see> type.</typeparam>
            <param name="array">The domain array of values to check in.</param>
            <param name="items">The array of values to check whether any is domain array.</param>
            <returns><c>true</c> domain array has any element of items array; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.DatabaseObjects.Tables.Builders.StructureDTOBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.Tables.Builders.ViewDTOBuilder"/> class.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.DatabaseObjects.Tables.Builders.StructureDTOBuilder.Build(Dataedo.Repository.EntityFrameworkModel.Models.Tables,System.Boolean,System.Collections.Generic.IEnumerable{Dataedo.Repository.EntityFrameworkModel.Models.CustomFields},Dataedo.Repository.Services.JoinDefinitions.StructuresJoinsEnum.StructuresJoins[],System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Builds <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.Tables.DTO.ViewDTO"/> object from <see cref="T:Dataedo.Repository.EntityFrameworkModel.Models.Tables"/> object data using joins.
            </summary>
            <param name="data">The source data.</param>
            <param name="definitions">Custom field definitions. <see cref="T:Dataedo.Repository.EntityFrameworkModel.Models.CustomFields"/></param>
            <param name="join">The array of names of data to load with objects.</param>
            <returns>Returns <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.Tables.DTO.ViewDTO"/> data transfer object.</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.DatabaseObjects.Tables.Builders.TableDTOBuilder">
            <summary>
            The class providing building <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.Tables.DTO.TableDTO"/>
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.DatabaseObjects.Tables.Builders.TableDTOBuilder.Build(Dataedo.Repository.EntityFrameworkModel.Models.Tables,System.Boolean,System.Collections.Generic.IEnumerable{Dataedo.Repository.EntityFrameworkModel.Models.CustomFields},Dataedo.Repository.Services.JoinDefinitions.TablesJoinsEnum.TablesJoins[],System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Builds <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.Tables.DTO.TableDTO"/> object from <see cref="T:Dataedo.Repository.EntityFrameworkModel.Models.Tables"/> object data using joins.
            </summary>
            <param name="data">The source data.</param>
            <param name="definitions">Custom field definitions.</param>
            <param name="join">The array of names of data to load with objects.</param>
            <returns>Returns <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.Tables.DTO.TableDTO"/> data transfer object.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.DatabaseObjects.Tables.Builders.TableDTOBuilder.Default(Dataedo.Repository.EntityFrameworkModel.Models.Tables,System.Boolean,System.Boolean)">
            <summary>
            Sets the default table database object data.
            </summary>
            <param name="data">The context (Entity Framework) model (<see cref="T:Dataedo.Repository.EntityFrameworkModel.Models.Tables"/>) containing information about table.</param>
            <returns>Returns current builder (<see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.BaseDatabaseObject.Builders.BaseDatabaseObjectDTOBuilder`1"/>).</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.DatabaseObjects.Tables.Builders.TableViewDTOBuilder`1">
            <summary>
            The class providing building <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.BaseDatabaseObject.DTO.BaseDatabaseObjectDTO"/>.
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.DatabaseObjects.Tables.Builders.ViewDTOBuilder">
            <summary>
            The class providing building <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.Tables.DTO.ViewDTO"/>
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.DatabaseObjects.Tables.Builders.ViewDTOBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.Tables.Builders.ViewDTOBuilder"/> class.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.DatabaseObjects.Tables.Builders.ViewDTOBuilder.Build(Dataedo.Repository.EntityFrameworkModel.Models.Tables,System.Boolean,System.Collections.Generic.IEnumerable{Dataedo.Repository.EntityFrameworkModel.Models.CustomFields},Dataedo.Repository.Services.JoinDefinitions.ViewsJoinsEnum.ViewsJoins[],System.Nullable{System.Int32},System.Boolean,System.Boolean,System.Boolean)">
            <summary>
            Builds <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.Tables.DTO.ViewDTO"/> object from <see cref="T:Dataedo.Repository.EntityFrameworkModel.Models.Tables"/> object data using joins.
            </summary>
            <param name="data">The source data.</param>
            <param name="definitions">Custom field definitions. <see cref="T:Dataedo.Repository.EntityFrameworkModel.Models.CustomFields"/></param>
            <param name="join">The array of names of data to load with objects.</param>
            <returns>Returns <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.Tables.DTO.ViewDTO"/> data transfer object.</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.DatabaseObjects.Tables.DTO.TableDTO">
            <summary>
            The class providing information about table.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Tables.DTO.TableDTO.Class">
            <summary>
            Gets or sets the class DTO.
            
            <para>Valid values of Value property:</para>
            
            <list type="bullet">
            <item><para>"TABLE" - a table object;</para></item>
            <item><para>"VIEW" - a view object;</para></item>
            <item><para>"PROCEDURE" - a procedure object;</para></item>
            <item><para>"FUNCTION" - a function object;</para></item>
            </list>
            </summary>
            <example>Value = TABLE, DisplayName = Table</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Tables.DTO.TableDTO.Type">
            <summary>
            Gets or sets the type.
            
            <para>Valid values:</para>
            
            <list type="bullet">
            <item><para>"TABLE" - regular table, default;</para></item>
            <item><para>"EXTERNAL_TABLE"- External table;</para></item>
            <item><para>"FOREIGN_TABLE" - Foreign table;</para></item>
            <item><para>"FILE_TABLE" - File table;</para></item>
            <item><para>"GRAPH_TABLE" - Graph table;</para></item>
            <item><para>"GRAPH_NODE_TABLE" - Graph node/vertex table;</para></item>
            <item><para>"GRAPH_EDGE_TABLE" - Graph edge table;</para></item>
            <item><para>"TEMPORAL_TABLE" - Temporal table;</para></item>
            <item><para>"SYSTEM_VERSIONED_TABLE" - System-versioned table;</para></item>
            <item><para>"HISTORY_TABLE" - History table;</para></item>
            <item><para>"SEARCH_INDEX" - Search index (as in Elasticsearch);</para></item>
            <item><para>"COLLECTION" - Collection (as in MongoDB);</para></item>
            <item><para>"ENTITY" - Entity;</para></item>
            <item><para>"CUBE" - Cube;</para></item>
            <item><para>"DIMENSION" - Dimension;</para></item>
            <item><para>"FLAT_FILE" - Flat file;</para></item>
            <item><para>"OBJECT" - Object;</para></item>
            <item><para>"STANDARD_OBJECT" - Standard object;</para></item>
            <item><para>"CUSTOM_OBJECT" - Custom object;</para></item>
            <item><para>"EXTERNAL_OBJECT" - External object;</para></item>
            </list>
            </summary>
            <example>Value = TABLE, DisplayName = Table</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Tables.DTO.TableDTO.GlossaryEntries">
            <summary>
            Gets or sets the collection of glossary entries related to table.
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.DatabaseObjects.Tables.DTO.TableViewDTO">
            <summary>
            The class providing information about object.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Tables.DTO.TableViewDTO.Class">
            <summary>
            Gets or sets the class DTO.
            
            <para>Valid values of Value property:</para>
            
            <list type="bullet">
            <item><para>"TABLE" - a table object;</para></item>
            <item><para>"VIEW" - a view object;</para></item>
            <item><para>"PROCEDURE" - a procedure object;</para></item>
            <item><para>"FUNCTION" - a function object;</para></item>
            </list>
            </summary>
            <example>Value = TABLE, DisplayName = Table</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Tables.DTO.TableViewDTO.Type">
            <summary>
            Gets or sets the type.
            
            <para>Valid values of Value property:</para>
            
            For tables:
            <list type="bullet">
            <item><para>"TABLE" - regular table, default;</para></item>
            <item><para>"EXTERNAL_TABLE"- External table;</para></item>
            <item><para>"FOREIGN_TABLE" - Foreign table;</para></item>
            <item><para>"FILE_TABLE" - File table;</para></item>
            <item><para>"GRAPH_TABLE" - Graph table;</para></item>
            <item><para>"GRAPH_NODE_TABLE" - Graph node/vertex table;</para></item>
            <item><para>"GRAPH_EDGE_TABLE" - Graph edge table;</para></item>
            <item><para>"TEMPORAL_TABLE" - Temporal table;</para></item>
            <item><para>"SYSTEM_VERSIONED_TABLE" - System-versioned table;</para></item>
            <item><para>"HISTORY_TABLE" - History table;</para></item>
            <item><para>"SEARCH_INDEX" - Search index (as in Elasticsearch);</para></item>
            <item><para>"COLLECTION" - Collection (as in MongoDB);</para></item>
            <item><para>"ENTITY" - Entity;</para></item>
            <item><para>"CUBE" - Cube;</para></item>
            <item><para>"DIMENSION" - Dimension;</para></item>
            <item><para>"FLAT_FILE" - Flat file;</para></item>
            <item><para>"OBJECT" - Object;</para></item>
            <item><para>"STANDARD_OBJECT" - Standard object;</para></item>
            <item><para>"CUSTOM_OBJECT" - Custom object;</para></item>
            <item><para>"EXTERNAL_OBJECT" - External object;</para></item>
            </list>
            </summary>
            <example>Value = TABLE, DisplayName = Table</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Tables.DTO.TableViewDTO.Location">
            <summary>
            Gets or sets the location of the external table.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Tables.DTO.TableViewDTO.GlossaryEntries">
            <summary>
            Gets or sets the collection of glossary entries related to table or view.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Tables.DTO.TableViewDTO.Columns">
            <summary>
            Gets or sets the collection of columns that their parent is current object.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Tables.DTO.TableViewDTO.Keys">
            <summary>
            Gets or sets the collection of keys related to current object.
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.DatabaseObjects.Tables.DTO.ViewDTO">
            <summary>
            The class providing information about table.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Tables.DTO.ViewDTO.Class">
            <summary>
            Gets or sets the class DTO.
            
            <para>Valid values of Value property:</para>
            
            <list type="bullet">
            <item><para>"TABLE" - a table object;</para></item>
            <item><para>"VIEW" - a view object;</para></item>
            <item><para>"PROCEDURE" - a procedure object;</para></item>
            <item><para>"FUNCTION" - a function object;</para></item>
            </list>
            </summary>
            <example>Value = TABLE, DisplayName = Table</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Tables.DTO.ViewDTO.Type">
            <summary>
            Gets or sets the type.
            
            <para>Valid values of Value property:</para>
            
            
            For views:
            <list type="bullet">
            <item><para>"VIEW" - regular view, default;</para></item>
            <item><para>"MATERIALIZED_VIEW" - Materialized view;</para></item>
            <item><para>"EDITIONING_VIEW" - Editioning view;</para></item>
            <item><para>"INDEXED_VIEW" - Indexed view;</para></item>
            <item><para>"NAMED_QUERY" - Named query;</para></item>
            </list>
            </summary>
            <example>Value = VIEW, DisplayName = View</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Tables.DTO.ViewDTO.Script">
            <summary>
            Gets or sets the definition of object.
            </summary>
            <example>dbo</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Tables.DTO.ViewDTO.GlossaryEntries">
            <summary>
            Gets or sets the collection of glossary entries related to viee.
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.DatabaseObjects.Tables.Extensions.TableDTOExtensions">
            <summary>
            The class providing extensions for <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.Tables.DTO.TableDTO"/> data.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.DatabaseObjects.Tables.Extensions.TableDTOExtensions.SelectDTO(System.Collections.Generic.List{Dataedo.Repository.EntityFrameworkModel.Models.Tables},System.ValueTuple{System.Collections.Generic.IEnumerable{Dataedo.Repository.Services.Features.Permissions.RoleActions.Enums.RoleActionType.RoleAction},System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{System.Int32},System.Collections.Generic.List{Dataedo.Repository.Services.Features.Permissions.RoleActions.Enums.RoleActionType.RoleAction}}}},System.Collections.Generic.IEnumerable{Dataedo.Repository.EntityFrameworkModel.Models.CustomFields},Dataedo.Repository.Services.JoinDefinitions.TablesJoinsEnum.TablesJoins[],System.Collections.Generic.Dictionary{System.Int32,System.Nullable{System.Int32}},System.Boolean)">
            <summary>
            Gets queryable list of <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.Tables.DTO.TableDTO"/> evaluated using parameters.
            </summary>
            <param name="source">The source <see cref="T:Dataedo.Repository.EntityFrameworkModel.Models.Tables"/> queryable list.</param>
            <param name="definitions">The collection on object providing information about custom field without values.</param>
            <param name="join">The array of names of data to load with objects.</param>
            <param name="parameters">The parameters providing selecting required set of data by skipping and limiting result items.</param>
            <returns>The queryable list of <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.Tables.DTO.TableDTO"/> evaluated using parameters.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.DatabaseObjects.Tables.Extensions.TablesExtensions.WhereIsTable(System.Linq.IQueryable{Dataedo.Repository.EntityFrameworkModel.Models.Tables})">
            <summary>
            Filters databases context (<see cref="T:Dataedo.Repository.EntityFrameworkModel.Models.Tables"/>) for getting objects that represents tables (not e.g. views).
            </summary>
            <param name="tablesViews">The context tables/views object.</param>
            <returns>The filtered context for getting objects that represents tables (not e.g. views).</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.DatabaseObjects.Tables.Extensions.TablesExtensions.WhereIsView(System.Linq.IQueryable{Dataedo.Repository.EntityFrameworkModel.Models.Tables})">
            <summary>
            Filters databases context (<see cref="T:Dataedo.Repository.EntityFrameworkModel.Models.Tables"/>) for getting objects that represents views (not e.g. tables).
            </summary>
            <param name="tablesViews">The context tables/views object.</param>
            <returns>The filtered context for getting objects that represents views (not e.g. tables).</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.DatabaseObjects.Tables.Extensions.ViewDTOExtensions">
            <summary>
            The class providing extensions for <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.Tables.DTO.ViewDTO"/> data.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.DatabaseObjects.Tables.Extensions.ViewDTOExtensions.SelectDTO(System.Collections.Generic.IEnumerable{Dataedo.Repository.EntityFrameworkModel.Models.Tables},System.ValueTuple{System.Collections.Generic.IEnumerable{Dataedo.Repository.Services.Features.Permissions.RoleActions.Enums.RoleActionType.RoleAction},System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{System.Int32},System.Collections.Generic.List{Dataedo.Repository.Services.Features.Permissions.RoleActions.Enums.RoleActionType.RoleAction}}}},System.Collections.Generic.IEnumerable{Dataedo.Repository.EntityFrameworkModel.Models.CustomFields},Dataedo.Repository.Services.JoinDefinitions.ViewsJoinsEnum.ViewsJoins[],System.Collections.Generic.Dictionary{System.Int32,System.Nullable{System.Int32}},System.Boolean)">
            <summary>
            Gets queryable list of <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.Tables.DTO.ViewDTO"/> evaluated using parameters.
            </summary>
            <param name="source">The source <see cref="T:Dataedo.Repository.EntityFrameworkModel.Models.Tables"/> queryable list.</param>
            <param name="definitions">The collection on object providing information about custom field without values.</param>
            <param name="join">The array of names of data to load with objects.</param>
            <param name="parameters">The parameters providing selecting required set of data by skipping and limiting result items.</param>
            <returns>The queryable list of <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.Tables.DTO.ViewDTO"/> evaluated using parameters.</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.DatabaseObjects.Tables.Interfaces.ITablesService">
            <summary>
            Represents object providing actions for table objects.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.DatabaseObjects.Tables.Interfaces.ITablesService.GetObject(System.Int32,Dataedo.Repository.Services.JoinDefinitions.TablesJoinsEnum.TablesJoins[])">
            <summary>
            Creates an <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.Tables.DTO.TableDTO"/> object.
            </summary>
            <param name="id">The ID of object.</param>
            <param name="join">The array of names of data to load with object.</param>
            <returns>The <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.Tables.DTO.TableDTO"/> object.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.DatabaseObjects.Tables.Interfaces.ITablesService.GetObjectsAsync(System.Int32,Dataedo.Repository.Services.JoinDefinitions.TablesJoinsEnum.TablesJoins[],Dataedo.Repository.Services.Parameters.OffsetLimitFilterParameters{Dataedo.Repository.Services.Features.DatabaseObjects.Tables.TableFiltersEnum.TableFilters})">
            <summary>
            Gets information about base database objects by ID of database.
            </summary>
            <param name="id">The ID of database.</param>
            <param name="join">The array of names of data to load with objects.</param>
            <param name="parameters">Pagination parameters.</param>
            <returns>The information object about database by ID.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.DatabaseObjects.Tables.Interfaces.ITablesService.GetObjectsWithoutModuleAsync(System.Int32,Dataedo.Repository.Services.JoinDefinitions.TablesJoinsEnum.TablesJoins[],Dataedo.Repository.Services.Parameters.OffsetLimitFilterParameters{Dataedo.Repository.Services.Features.DatabaseObjects.Tables.TableFiltersEnum.TableFilters})">
            <summary>
            Gets information about tables by ID of database that do not belong to any module in provided database.
            </summary>
            <param name="id">The ID of database.</param>
            <param name="join">The array of names of data to load with objects.</param>
            <param name="parameters">The parameters providing selecting required set of data by skipping and limiting result items.</param>
            <returns>The information object about tables by ID of database that do not belong to any module in provided database.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.DatabaseObjects.Tables.Interfaces.ITablesService.GetObjectsByModuleAsync(System.Int32,Dataedo.Repository.Services.JoinDefinitions.TablesJoinsEnum.TablesJoins[],Dataedo.Repository.Services.Parameters.OffsetLimitFilterParameters{Dataedo.Repository.Services.Features.DatabaseObjects.Tables.TableFiltersEnum.TableFilters})">
            <summary>
            Gets information about tables by ID of module.
            </summary>
            <param name="id">The ID of module.</param>
            <param name="join">The array of names of data to load with objects.</param>
            <param name="parameters">The parameters providing selecting required set of data by skipping and limiting result items.</param>
            <returns>The information object about tables by ID of module.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.DatabaseObjects.Tables.Interfaces.ITablesService.GetObjectsEmptyCollectionAsync(System.Int32,Dataedo.Repository.Services.JoinDefinitions.TablesJoinsEnum.TablesJoins[])">
            <summary>
            Gets the empty collection of table objects by ID of database (existence of database is being checked).
            </summary>
            <param name="id">The ID of database.</param>
            <param name="join">The array of names of data to load with objects.</param>
            <returns>The empty collection of table objects.</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.DatabaseObjects.Tables.Interfaces.ITablesViewsService">
            <summary>
            Represents object providing common actions for procedures and function objects.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.DatabaseObjects.Tables.Interfaces.ITablesViewsService.GetTriggers(System.Int32,Dataedo.Repository.Services.JoinDefinitions.TriggersJoinsEnum.TriggersJoins[],Dataedo.Repository.Services.Parameters.OffsetLimitFilterParameters{Dataedo.Repository.Services.Features.DatabaseObjects.Triggers.TriggerFiltersEnum.TriggerFilters},System.String)">
            <summary>
            Gets the triggers associated with given object.
            </summary>
            <param name="id">The ID of object.</param>
            <param name="join">The array of names of data to load with objects.</param>
            <param name="parameters">The parameters providing selecting required set of data by skipping, limiting, filtering result items.</param>
            <returns>Triggers associated with the object.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.DatabaseObjects.Tables.Interfaces.ITablesViewsStructuresService.GetGlossaryEntries(System.Int32,Dataedo.Repository.Services.JoinDefinitions.GlossaryEntriesJoinsEnum.GlossaryEntryJoins[],Dataedo.Repository.Services.Parameters.OffsetLimitFilterParameters{Dataedo.Repository.Services.Features.GlossaryEntries.GlossaryEntryFiltersEnum.GlossaryEntryFilters})">
            <param name="tableViewId">The ID of table or view.</param>
            <param name="join">The array of names of data to load with objects.</param>
            <param name="parameters"></param>
            <returns>The table/view related glossary entries (terms).</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.DatabaseObjects.Tables.Interfaces.ITablesViewsStructuresService.GetColumns(System.Int32,Dataedo.Repository.Services.JoinDefinitions.ColumnsJoinsEnum.ColumnsJoins[],Dataedo.Repository.Services.Parameters.OffsetLimitFilterParameters{Dataedo.Repository.Services.Features.DatabaseObjects.Columns.ColumnFiltersEnum.ColumnFilters})">
            <summary>
            Gets the collection of top-level columns.
            </summary>
            <param name="parentId">The ID of parent database object (e.g. table or view).</param>
            <param name="join">The array of names of data to load with objects.</param>
            <param name="parameters">The parameters providing selecting required set of data by skipping, limiting, filtering result items.</param>
            <returns>The collection of top-level columns.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.DatabaseObjects.Tables.Interfaces.ITablesViewsStructuresService.GetKeys(System.Int32,Dataedo.Repository.Services.JoinDefinitions.KeysJoinsEnum.KeysJoins[],Dataedo.Repository.Services.Parameters.OffsetLimitFilterParameters{Dataedo.Repository.Services.Features.Keys.Enums.UniqueConstraintFiltersEnum.UniqueConstraintFilters})">
            <summary>
            Gets the collection of keys.
            </summary>
            <param name="parentId">Parent database object ID</param>
            <param name="join">The array of names of data to load with objects.</param>
            <param name="parameters"></param>
            <returns></returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.DatabaseObjects.Tables.Interfaces.ITablesViewsStructuresService.GetRelationships(Dataedo.Repository.Services.Features.Relationships.Enums.RelationshipTypeEnum,System.Int32[],Dataedo.Repository.Services.JoinDefinitions.RelationshipsJoinsEnum.RelationshipsJoins[],Dataedo.Repository.Services.Parameters.OffsetLimitFilterParameters{Dataedo.Repository.Services.Features.Relationships.RelationshipFiltersEnum.RelationshipFilters})">
            <summary>
            Gets the collection relationships.
            </summary>
            <param name="type">Information about parent object's relationship side.</param>
            <param name="parentId">Parent database object ID</param>
            <param name="join">The array of names of data to load with objects.</param>
            <param name="parameters"></param>
            <returns>The referenced or referencing table/view relationships.</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.DatabaseObjects.Tables.Interfaces.IViewsService">
            <summary>
            Represents object providing actions for view objects.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.DatabaseObjects.Tables.Interfaces.IViewsService.GetScript(System.Int32)">
            <summary>
            Gets definition of procedure by ID.
            </summary>
            <param name="id">The ID of object.</param>
            <returns>The information object about object by ID.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.DatabaseObjects.Tables.Interfaces.IViewsService.GetObject(System.Int32,Dataedo.Repository.Services.JoinDefinitions.ViewsJoinsEnum.ViewsJoins[])">
            <summary>
            Creates a <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.Tables.DTO.ViewDTO"/> object.
            </summary>
            <param name="id">The ID of object.</param>
            <param name="join">The array of names of data to load with object.</param>
            <returns>The <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.Tables.DTO.ViewDTO"/> object.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.DatabaseObjects.Tables.Interfaces.IViewsService.GetObjectsAsync(System.Int32,Dataedo.Repository.Services.JoinDefinitions.ViewsJoinsEnum.ViewsJoins[],Dataedo.Repository.Services.Parameters.OffsetLimitFilterParameters{Dataedo.Repository.Services.Features.DatabaseObjects.Tables.TableFiltersEnum.TableFilters})">
            <summary>
            Gets information about base database objects by ID of database.
            </summary>
            <param name="id">The ID of database.</param>
            <param name="join">The array of names of data to load with objects.</param>
            <param name="parameters">Pagination parameters.</param>
            <returns>The information object about database by ID.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.DatabaseObjects.Tables.Interfaces.IViewsService.GetObjectsWithoutModuleAsync(System.Int32,Dataedo.Repository.Services.JoinDefinitions.ViewsJoinsEnum.ViewsJoins[],Dataedo.Repository.Services.Parameters.OffsetLimitFilterParameters{Dataedo.Repository.Services.Features.DatabaseObjects.Tables.TableFiltersEnum.TableFilters})">
            <summary>
            Gets information about base database objects by ID of database that do not belong to any module in provided database.
            </summary>
            <param name="id">The ID of database.</param>
            <param name="join">The array of names of data to load with objects.</param>
            <param name="parameters">Pagination parameters.</param>
            <returns>The information object about database by ID of database that do not belong to any module in provided database.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.DatabaseObjects.Tables.Interfaces.IViewsService.GetObjectsByModuleAsync(System.Int32,Dataedo.Repository.Services.JoinDefinitions.ViewsJoinsEnum.ViewsJoins[],Dataedo.Repository.Services.Parameters.OffsetLimitFilterParameters{Dataedo.Repository.Services.Features.DatabaseObjects.Tables.TableFiltersEnum.TableFilters})">
            <summary>
            Gets information about views by ID of module.
            </summary>
            <param name="id">The ID of module.</param>
            <param name="join">The array of names of data to load with objects.</param>
            <param name="parameters">The parameters providing selecting required set of data by skipping and limiting result items.</param>
            <returns>The information object about views by ID of module.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.DatabaseObjects.Tables.Interfaces.IViewsService.GetObjectsEmptyCollectionAsync(System.Int32,Dataedo.Repository.Services.JoinDefinitions.ViewsJoinsEnum.ViewsJoins[])">
            <summary>
            Gets the empty collection of view objects by ID of database (existence of database is being checked).
            </summary>
            <param name="id">The ID of database.</param>
            <param name="join">The array of names of data to load with objects.</param>
            <returns>The empty collection of view objects.</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.DatabaseObjects.Tables.TableFiltersEnum.TableFilters">
            <summary>
            Specifies applicable data filters for tables.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.DatabaseObjects.Tables.TableFiltersEnum.HasAnyItem``1(Dataedo.Repository.Services.Features.DatabaseObjects.Tables.TableFiltersEnum.TableFilters[],Dataedo.Repository.Services.Features.DatabaseObjects.Tables.TableFiltersEnum.TableFilters[])">
            <summary>
            Checks whether provided domain array has any element of items array.
            </summary>
            <typeparam name="T">The type of element of array of join parameter based on <see cref="T:System.Enum"></see> type.</typeparam>
            <param name="array">The domain array of values to check in.</param>
            <param name="items">The array of values to check whether any is domain array.</param>
            <returns><c>true</c> domain array has any element of items array; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.DatabaseObjects.Triggers.Builders.TriggerDTOBuilder">
            <summary>
            Trigger DTO builder.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.DatabaseObjects.Triggers.Builders.TriggerDTOBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.Triggers.Builders.TriggerDTOBuilder"/> class.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.DatabaseObjects.Triggers.Builders.TriggerDTOBuilder.Build(Dataedo.Repository.EntityFrameworkModel.Models.Triggers,System.Collections.Generic.IEnumerable{Dataedo.Repository.EntityFrameworkModel.Models.CustomFields},Dataedo.Repository.Services.JoinDefinitions.TriggersJoinsEnum.TriggersJoins[],System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
            Builds <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.Triggers.DTO.TriggerDTO"/> object from <see cref="T:Dataedo.Repository.EntityFrameworkModel.Models.Triggers"/> object data using joins.
            </summary>
            <param name="data">The source data.</param>
            <param name="definitions">Custom fields definitions.</param>
            <param name="join">The array of names of data to load with object.</param>
            <returns></returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.DatabaseObjects.Triggers.DTO.TriggerDTO">
            <summary>
            The class providing information about trigger.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Triggers.DTO.TriggerDTO.Id">
            <summary>
            Gets or sets the identifier of object.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Triggers.DTO.TriggerDTO.ParentDatabaseObjectId">
            <summary>
            Gets or sets the identifier of parent database object containing object.
            </summary>
            <example>1</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Triggers.DTO.TriggerDTO.ParentDatabaseObjectClass">
            <summary>
            Gets or sets the class of parent database object containing object.
            </summary>
            <example>TABLE</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Triggers.DTO.TriggerDTO.ParentDatabaseObject">
            <summary>
            Gets or sets the information object about parent database object containing trigger.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Triggers.DTO.TriggerDTO.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <example>trg_columns_Modify</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Triggers.DTO.TriggerDTO.Class">
            <summary>
            Gets or sets the class DTO.
            
            <para>Valid values of Value:</para>
            
            <list type="bullet">
            <item><para>"TRIGGER" - a trigger object;</para></item>
            <item><para>"RULE" - PostgreSQL rule;</para></item>
            </list>
            </summary>
            <example>Value = TRIGGER, DisplayName = Trigger</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Triggers.DTO.TriggerDTO.Type">
            <summary>
            Gets or sets the type.
            
            <para>Valid values of Value:</para>
            
            <list type="bullet">
            <item><para>"TRIGGER" - regular trigger;</para></item>
            <item><para>"RULE" - PostgreSQL rule;</para></item>
            <item><para>"CLR_TRIGGER" - CLR Trigger;</para></item>
            </list>
            </summary>
            <example>Value = TRIGGER, DisplayName = Trigger</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Triggers.DTO.TriggerDTO.IsBefore">
            <summary>
            Gets or sets a value indicating whether trigger is fired before operation.
            </summary>
            <example>false</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Triggers.DTO.TriggerDTO.IsAfter">
            <summary>
            Gets or sets a value indicating whether trigger is fired after operation.
            </summary>
            <example>false</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Triggers.DTO.TriggerDTO.IsInsteadOf">
            <summary>
            Gets or sets a value indicating whether trigger is fired instead of operation.
            </summary>
            <example>false</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Triggers.DTO.TriggerDTO.IsOnInsert">
            <summary>
            Gets or sets a value indicating whether trigger is fired on insert operation.
            </summary>
            <example>true</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Triggers.DTO.TriggerDTO.IsOnUpdate">
            <summary>
            Gets or sets a value indicating whether trigger is fired on update operation.
            </summary>
            <example>true</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Triggers.DTO.TriggerDTO.IsOnDelete">
            <summary>
            Gets or sets a value indicating whether trigger is fired on delete operation.
            </summary>
            <example>false</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Triggers.DTO.TriggerDTO.When">
            <summary>
            Gets or sets the condition when trigger is fired.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Triggers.DTO.TriggerDTO.IsDisabled">
            <summary>
            Gets or sets a value indicating whether trigger is disabled or active.
            </summary>
            <example>false</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Triggers.DTO.TriggerDTO.Status">
            <summary>
            Gets or sets the status of object existence in database.
            
            <para>Available values:</para>
            
            <list type="bullet">
            <item><para>"A" - an object exists in database;</para></item>
            <item><para>"D" - an object is deleted from database;</para></item>
            </list>
            </summary>
            <example>Value = A, DisplayName = Active</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Triggers.DTO.TriggerDTO.Description">
            <summary>
            Gets or sets the description of object.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Triggers.DTO.TriggerDTO.SubjectAreas">
            <summary>
            Gets or sets the subject areas that object belongs to.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Triggers.DTO.TriggerDTO.CustomFields">
            <summary>
            Gets or sets the custom fields.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Triggers.DTO.TriggerDTO.Script">
            <summary>
            Gets or sets the definition of object.
            </summary>
            <example>dbo</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Triggers.DTO.TriggerDTO.Metadata">
            <summary>
            Gets or sets the metadata (creation and modification information) information.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.DatabaseObjects.Triggers.DTO.TriggerDTO.DisplayName">
            <summary>
            Gets or sets the base display name.
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.DatabaseObjects.Triggers.Extensions.TriggerDTOExtensions">
            <summary>
            The class providing extensions for <see cref="T:Dataedo.Repository.Services.Features.Databases.DTO.DatabaseDTO"/> data.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.DatabaseObjects.Triggers.Extensions.TriggerDTOExtensions.SelectDTO(System.Collections.Generic.IEnumerable{Dataedo.Repository.EntityFrameworkModel.Models.Triggers},System.Collections.Generic.IEnumerable{Dataedo.Repository.EntityFrameworkModel.Models.CustomFields},System.ValueTuple{System.Collections.Generic.IEnumerable{Dataedo.Repository.Services.Features.Permissions.RoleActions.Enums.RoleActionType.RoleAction},System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{System.Int32},System.Collections.Generic.List{Dataedo.Repository.Services.Features.Permissions.RoleActions.Enums.RoleActionType.RoleAction}}}},Dataedo.Repository.Services.JoinDefinitions.TriggersJoinsEnum.TriggersJoins[],System.Collections.Generic.Dictionary{System.Int32,System.Nullable{System.Int32}})">
            <summary>
            Gets queryable list of <see cref="T:Dataedo.Repository.Services.Features.Databases.DTO.DatabaseDTO"/> evaluated using parameters.
            </summary>
            <param name="source">The source <see cref="T:Dataedo.Repository.EntityFrameworkModel.Models.Databases"/> queryable list.</param>
            <param name="customFieldsDefinitions"></param>
            <param name="join">The array of names of data to load with objects.</param>
            <param name="parameters">The parameters providing selecting required set of data by skipping and limiting result items.</param>
            <returns>The queryable list of <see cref="T:Dataedo.Repository.Services.Features.Databases.DTO.DatabaseDTO"/> evaluated using parameters.</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.DatabaseObjects.Triggers.Interfaces.ITriggersService">
            <summary>
            Represents object providing actions for trigger objects.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.DatabaseObjects.Triggers.Interfaces.ITriggersService.GetObject(System.Int32,Dataedo.Repository.Services.JoinDefinitions.TriggersJoinsEnum.TriggersJoins[])">
            <summary>
            Gets information object about database by ID.
            </summary>
            <param name="id">The ID of object.</param>
            <param name="join">The array of names of data to load with objects.</param>
            <returns>The information object about object by ID.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.DatabaseObjects.Triggers.Interfaces.ITriggersService.GetObjects(System.Int32,Dataedo.Repository.Services.JoinDefinitions.TriggersJoinsEnum.TriggersJoins[],Dataedo.Repository.Services.Parameters.OffsetLimitFilterParameters{Dataedo.Repository.Services.Features.DatabaseObjects.Triggers.TriggerFiltersEnum.TriggerFilters})">
            <summary>
            Gets the object which contains a collection of <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.Triggers.DTO.TriggerDTO"/> representing trigger of database object.
            </summary>
            <param name="parentId">The ID of parent database object.</param>
            <param name="join">The array of names of data to load with objects.</param>
            <param name="parameters">The parameters providing selecting required set of data by skipping and limiting result items.</param>
            <returns>The object which contains a collection of <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.Triggers.DTO.TriggerDTO"/> of database object.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.DatabaseObjects.Triggers.Interfaces.ITriggersService.GetScript(System.Int32)">
            <summary>
            Gets definition of procedure by ID.
            </summary>
            <param name="id">The ID of object.</param>
            <returns>The information object about object by ID.</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.DatabaseObjects.Triggers.TriggerFiltersEnum.TriggerFilters">
            <summary>
            Specifies applicable data filters for procedures.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.DatabaseObjects.Triggers.TriggerFiltersEnum.HasAnyItem``1(Dataedo.Repository.Services.Features.DatabaseObjects.Triggers.TriggerFiltersEnum.TriggerFilters[],Dataedo.Repository.Services.Features.DatabaseObjects.Triggers.TriggerFiltersEnum.TriggerFilters[])">
            <summary>
            Checks whether provided domain array has any element of items array.
            </summary>
            <typeparam name="T">The type of element of array of join parameter based on <see cref="T:System.Enum"></see> type.</typeparam>
            <param name="array">The domain array of values to check in.</param>
            <param name="items">The array of values to check whether any is domain array.</param>
            <returns><c>true</c> domain array has any element of items array; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.Databases.Builders.DatabaseDTOBuilder">
            <summary>
            The class providing building <see cref="T:Dataedo.Repository.Services.Features.Databases.DTO.DatabaseDTO"/> objects.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.Features.Databases.Builders.DatabaseDTOBuilder.result">
            <summary>
            The result <see cref="T:Dataedo.Repository.Services.Features.Databases.DTO.DatabaseDTO"/> object.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Databases.Builders.DatabaseDTOBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dataedo.Repository.Services.Features.Databases.Builders.DatabaseDTOBuilder"/> class.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Databases.Builders.DatabaseDTOBuilder.Build(Dataedo.Repository.EntityFrameworkModel.Models.Databases,System.Collections.Generic.IEnumerable{Dataedo.Repository.EntityFrameworkModel.Models.CustomFields},Dataedo.Repository.Services.JoinDefinitions.DatabasesJoinsEnum.DatabasesJoins[],System.Nullable{System.Int32},System.Boolean,System.Boolean)">
            <summary>
            Builds <see cref="T:Dataedo.Repository.Services.Features.Databases.DTO.DatabaseDTO"/> object from <see cref="T:Dataedo.Repository.EntityFrameworkModel.Models.Databases"/> object data using joins.
            </summary>
            <param name="data">The source data.</param>
            <param name="definitions">The collection on object providing information about custom field without values.</param>
            <param name="join">The array of names of data to load with object.</param>
            <returns>The <see cref="T:Dataedo.Repository.Services.Features.Databases.DTO.DatabaseDTO"/> object.</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.Databases.Builders.DatabaseFilterDTOBuilder">
            <summary>
            <see cref="T:Dataedo.Repository.Services.Features.Search.DTO.AssetTypeFilterDTO"/> builder.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Databases.Builders.DatabaseFilterDTOBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dataedo.Repository.Services.Features.Databases.Builders.DatabaseFilterDTOBuilder"/> class.
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.Databases.DatabaseFiltersEnum.DatabaseFilters">
            <summary>
            Specifies applicable data filters for databases.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Databases.DatabaseFiltersEnum.HasAnyItem``1(Dataedo.Repository.Services.Features.Databases.DatabaseFiltersEnum.DatabaseFilters[],Dataedo.Repository.Services.Features.Databases.DatabaseFiltersEnum.DatabaseFilters[])">
            <summary>
            Checks whether provided domain array has any element of items array.
            </summary>
            <typeparam name="T">The type of element of array of join parameter based on <see cref="T:System.Enum"></see> type.</typeparam>
            <param name="array">The domain array of values to check in.</param>
            <param name="items">The array of values to check whether any is domain array.</param>
            <returns><c>true</c> domain array has any element of items array; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.Databases.DTO.DatabaseDTO">
            <summary>
            The class providing information about database.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Databases.DTO.DatabaseDTO.Id">
            <summary>
            Gets or sets the identifier of object.
            </summary>
            <example>1</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Databases.DTO.DatabaseDTO.DisplayName">
            <summary>
            Gets or sets the base display name.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Databases.DTO.DatabaseDTO.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <example>Dataedo repository</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Databases.DTO.DatabaseDTO.Description">
            <summary>
            Gets or sets the description of object.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Databases.DTO.DatabaseDTO.SubjectAreas">
            <summary>
            Gets or sets the subject areas that objects belongs to.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Databases.DTO.DatabaseDTO.CustomFields">
            <summary>
            Gets or sets the custom fields.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Databases.DTO.DatabaseDTO.Dbms">
            <summary>
            Gets or sets the type of database.
            
            <para>Valid values:</para>
            
            <list type="bullet">
            <item><para>"AURORA" - an Aurora database;</para></item>
            <item><para>"AURORA_POSTGRESQL" - an Aurora PostgreSQL database;</para></item>
            <item><para>"AZURE_SQL_DATABASE" - a Azure SQL Database database;</para></item>
            <item><para>"AZURE_SQL_DATA_WAREHOUSE" - a Azure SQL DataWarehouse database;</para></item>
            <item><para>"DB2" - a DB2 database;</para></item>
            <item><para>"IBM_DB2_Big_Query" - a IBM DB2 Big Query database;</para></item>
            <item><para>"MANUAL" - a Manual (user-defined) database;</para></item>
            <item><para>"MARIADB" - a MariaDB database;</para></item>
            <item><para>"MYSQL" - a MySQL database;</para></item>
            <item><para>"MYSQL8" - a MySQL 8 database;</para></item>
            <item><para>"ODBC" - a database imported using ODBC;</para></item>
            <item><para>"ORACLE" - a Oracle database;</para></item>
            <item><para>"PERCONA_MYSQL" - a Percona MySQL database;</para></item>
            <item><para>"PERCONA_MYSQL8" - a Percona MySQL 8 database;</para></item>
            <item><para>"POSTGRESQL" - a PostgreSQL database;</para></item>
            <item><para>"REDSHIFT" - a Redshift database;</para></item>
            <item><para>"SNOWFLAKE" - a Snowflake database;</para></item>
            <item><para>"SQLSERVER" - a SQL Server (general) database;</para></item>
            <item><para>"SQLSERVER_2000" - a SQL Server 2000 database;</para></item>
            </list>
            </summary>
            <example>SQLSERVER</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Databases.DTO.DatabaseDTO.Database">
            <summary>
            Gets or sets the name of database.
            </summary>
            <example>dataedo</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Databases.DTO.DatabaseDTO.Host">
            <summary>
            Gets or sets the host.
            </summary>
            <example>192.168.0.17</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Databases.DTO.DatabaseDTO.ServiceName">
            <summary>
            Gets or sets the service name for Oracle connection.
            </summary>
            <example>XE</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Databases.DTO.DatabaseDTO.NetworkAlias">
            <summary>
            Gets or sets the network alias for Oracle connections TNS connection.
            </summary>
            <example>MAIN_TNS</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Databases.DTO.DatabaseDTO.Port">
            <summary>
            Gets or sets the port.
            </summary>
            <example>1521</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Databases.DTO.DatabaseDTO.WindowsAuthentication">
            <summary>
            Gets or sets a value indicating whether connection is established using Windows Authentication.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Databases.DTO.DatabaseDTO.UseDifferentSchema">
            <summary>
            Gets or sets a value indicating whether user selected schema different than database user for import from Oracle.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Databases.DTO.DatabaseDTO.HasMultipleSchemas">
            <summary>
            Gets or sets a value indicating whether user selected multiple schemas for import from Oracle.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Databases.DTO.DatabaseDTO.ConnectionType">
             <summary>
             Gets or sets the type of connection use while importing Oracle database.
            
             <para>Valid values:</para>
             
             <list type="bullet">
             <item><para>"DIRECT" - a direct connection to database;</para></item>
             <item><para>"ORACLE_CLIENT" - a connection to database using Oracle client;</para></item>
             </list>
             </summary>
             <example>ORACLE_CLIENT</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Databases.DTO.DatabaseDTO.Username">
            <summary>
            Gets or sets the user name used to connect.
            </summary>
            <example>sa</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Databases.DTO.DatabaseDTO.Password">
            <summary>
            Gets or sets the encrypted password used to connect.
            </summary>
            <example>103109159080154000052148078050506247208182173146</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Databases.DTO.DatabaseDTO.DbmsVersion">
            <summary>
            Gets or sets the DBMS version as returned by DBMS at the time of last connection.
            </summary>
            <example>Microsoft SQL Server 2012 (SP1) - 11.0.3128.0 (Intel X86)</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Databases.DTO.DatabaseDTO.Filter">
            <summary>
            Gets or sets the filter definition in XML format used for importing.
            </summary>
            <example>[XML code]</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Databases.DTO.DatabaseDTO.SslKeyPath">
            <summary>
            Gets or sets the path of the file that contains X.509 key.
            </summary>
            <example>
            <![CDATA[
            C:\key.pem
            ]]>
            </example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Databases.DTO.DatabaseDTO.SslCertPath">
            <summary>
            Gets or sets the path of the file that contains X.509 certificate.
            </summary>
            <example>
            <![CDATA[
            C:\cert.pem
            ]]>
            </example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Databases.DTO.DatabaseDTO.SslCaPath">
            <summary>
            Gets or sets the path of the file that contains trusted SSL Certificate Authority certificate..
            </summary>
            <example>
            <![CDATA[
            C:\ca-cert.pem
            ]]>
            </example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Databases.DTO.DatabaseDTO.SslCipher">
            <summary>
            Gets or sets the list of permitted ciphers for connection encryption.
            </summary>
            <example>AES(256)</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Databases.DTO.DatabaseDTO.Metadata">
            <summary>
            Gets or sets the record metadata (creation and modification information).
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Databases.DTO.DatabaseDTO.HasTables">
            <summary>
            Gets or sets a value indicating whether database contains any tables.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Databases.DTO.DatabaseDTO.Tables">
            <summary>
            Gets or sets the list of basic information about tables in database.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Databases.DTO.DatabaseDTO.HasViews">
            <summary>
            Gets or sets a value indicating whether database contains any views.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Databases.DTO.DatabaseDTO.Views">
            <summary>
            Gets or sets the list of basic information about views in database.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Databases.DTO.DatabaseDTO.HasProcedures">
            <summary>
            Gets or sets a value indicating whether database contains any procedures.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Databases.DTO.DatabaseDTO.Procedures">
            <summary>
            Gets or sets the list of basic information about procedures in database.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Databases.DTO.DatabaseDTO.HasFunctions">
            <summary>
            Gets or sets a value indicating whether database contains any functions.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Databases.DTO.DatabaseDTO.Functions">
            <summary>
            Gets or sets the list of basic information about functions in database.
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.Databases.Enums.DatabaseTypeEnum">
            <summary>
            The class providing mappings for database object types.
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.Databases.Extensions.DatabaseDTOExtensions">
            <summary>
            The class providing extensions for <see cref="T:Dataedo.Repository.Services.Features.Databases.DTO.DatabaseDTO"/> data.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Databases.Extensions.DatabaseDTOExtensions.SelectDTO(System.Collections.Generic.IEnumerable{Dataedo.Repository.EntityFrameworkModel.Models.Databases},System.Collections.Generic.IEnumerable{Dataedo.Repository.EntityFrameworkModel.Models.CustomFields},System.ValueTuple{System.Collections.Generic.IEnumerable{Dataedo.Repository.Services.Features.Permissions.RoleActions.Enums.RoleActionType.RoleAction},System.Collections.Generic.IEnumerable{System.ValueTuple{System.Nullable{System.Int32},System.Collections.Generic.List{Dataedo.Repository.Services.Features.Permissions.RoleActions.Enums.RoleActionType.RoleAction}}}},Dataedo.Repository.Services.JoinDefinitions.DatabasesJoinsEnum.DatabasesJoins[],System.Collections.Generic.Dictionary{System.Int32,System.Nullable{System.Int32}})">
            <summary>
            Gets queryable list of <see cref="T:Dataedo.Repository.Services.Features.Databases.DTO.DatabaseDTO"/> evaluated using parameters.
            </summary>
            <param name="source">The source <see cref="T:Dataedo.Repository.EntityFrameworkModel.Models.Databases"/> queryable list.</param>
            <param name="customFieldsDefinitions">Custom field definitions.</param>
            <param name="join">The array of names of data to load with objects.</param>
            <param name="parameters">The parameters providing selecting required set of data by skipping and limiting result items.</param>
            <returns>The queryable list of <see cref="T:Dataedo.Repository.Services.Features.Databases.DTO.DatabaseDTO"/> evaluated using parameters.</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.Databases.Extensions.DatabaseFilterDTOExtensions">
            <summary>
            The class providing extensions for <see cref="T:Dataedo.Repository.Services.Features.Search.DTO.AssetTypeFilterDTO"/> data.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Databases.Extensions.DatabaseFilterDTOExtensions.SelectDTO(System.Linq.IQueryable{Dataedo.Repository.EntityFrameworkModel.QueryMappings.DatabaseFilter})">
            <summary>
            Gets queryable list of <see cref="T:Dataedo.Repository.Services.Features.Search.DTO.DatabaseFilterDTO"/> evaluated using parameters.
            </summary>
            <param name="source">The source <see cref="T:Dataedo.Repository.EntityFrameworkModel.QueryMappings.DatabaseFilter"/> list.</param>
            <returns>The list of <see cref="T:Dataedo.Repository.Services.Features.Search.DTO.DatabaseFilterDTO"/> evaluated using parameters.</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.Databases.Extensions.DatabasesExtensions">
            <summary>
            The class providing extensions for context (Entity Framework) model for databases (<see cref="T:Dataedo.Repository.EntityFrameworkModel.Models.Databases"/>).
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Databases.Extensions.DatabasesExtensions.WhereIsDatabase(System.Linq.IQueryable{Dataedo.Repository.EntityFrameworkModel.Models.Databases})">
            <summary>
            Filters databases context (<see cref="T:Dataedo.Repository.EntityFrameworkModel.Models.Databases"/>) for getting objects that represents real database (not e.g. business glossary).
            </summary>
            <param name="databases">The context database object.</param>
            <returns>The filtered context for getting objects that represents real database (not e.g. business glossary).</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.Databases.Interfaces.IDatabasesService">
            <summary>
            Represents object providing actions for database objects.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Databases.Interfaces.IDatabasesService.GetObjectsAsync(Dataedo.Repository.Services.JoinDefinitions.DatabasesJoinsEnum.DatabasesJoins[],Dataedo.Repository.Services.Parameters.OffsetLimitFilterParameters{Dataedo.Repository.Services.Features.Databases.DatabaseFiltersEnum.DatabaseFilters})">
            <summary>
            Gets information object about object by ID.
            </summary>
            <param name="join">The array of names of data to load with objects.</param>
            <param name="parameters">The parameters providing choosing required set of data by skipping and limiting result items.</param>
            <returns>The information object about object by ID.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Databases.Interfaces.IDatabasesService.GetObject(System.Int32,Dataedo.Repository.Services.JoinDefinitions.DatabasesJoinsEnum.DatabasesJoins[])">
            <summary>
            Gets information object about database by ID.
            </summary>
            <param name="id">The ID of object.</param>
            <param name="join">The array of names of data to load with objects.</param>
            <returns>The information object about database by ID.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Databases.Interfaces.IDatabasesService.GetTables(System.Int32,Dataedo.Repository.Services.JoinDefinitions.TablesJoinsEnum.TablesJoins[],Dataedo.Repository.Services.Parameters.OffsetLimitFilterParameters{Dataedo.Repository.Services.Features.DatabaseObjects.Tables.TableFiltersEnum.TableFilters})">
            <summary>
            Gets collection of <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.BaseDatabaseObject.DTO.BaseDatabaseObjectDTO"/> from <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.BaseDatabaseObject.DTO.BaseDatabaseObjectDTO"/>
            </summary>
            <param name="id">The ID of database.</param>
            <param name="join">The array of names of data to load with objects.</param>
            <param name="parameters">Pagination parameters.</param>
            <returns>The collection of <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.BaseDatabaseObject.DTO.BaseDatabaseObjectDTO"/>.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Databases.Interfaces.IDatabasesService.GetViews(System.Int32,Dataedo.Repository.Services.JoinDefinitions.ViewsJoinsEnum.ViewsJoins[],Dataedo.Repository.Services.Parameters.OffsetLimitFilterParameters{Dataedo.Repository.Services.Features.DatabaseObjects.Tables.TableFiltersEnum.TableFilters})">
            <summary>
            Gets collection of <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.BaseDatabaseObject.DTO.BaseDatabaseObjectDTO"/> from <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.BaseDatabaseObject.DTO.BaseDatabaseObjectDTO"/>
            </summary>
            <param name="id">The ID of database.</param>
            <param name="join">The array of names of data to load with objects.</param>
            <param name="parameters">Pagination parameters.</param>
            <returns>The collection of <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.BaseDatabaseObject.DTO.BaseDatabaseObjectDTO"/>.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Databases.Interfaces.IDatabasesService.GetProcedures(System.Int32,Dataedo.Repository.Services.JoinDefinitions.Base.ProceduresFunctionsJoinsEnum.ProceduresFunctionsJoins[],Dataedo.Repository.Services.Parameters.OffsetLimitFilterParameters{Dataedo.Repository.Services.Features.DatabaseObjects.Procedures.ProcedureFiltersEnum.ProcedureFilters})">
            <summary>
            Gets collection of <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.BaseDatabaseObject.DTO.BaseDatabaseObjectDTO"/> from <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.BaseDatabaseObject.DTO.BaseDatabaseObjectDTO"/>
            </summary>
            <param name="id">The ID of database.</param>
            <param name="join">The array of names of data to load with objects.</param>
            <param name="parameters">Pagination parameters.</param>
            <returns>The collection of <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.BaseDatabaseObject.DTO.BaseDatabaseObjectDTO"/>.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Databases.Interfaces.IDatabasesService.GetFunctions(System.Int32,Dataedo.Repository.Services.JoinDefinitions.Base.ProceduresFunctionsJoinsEnum.ProceduresFunctionsJoins[],Dataedo.Repository.Services.Parameters.OffsetLimitFilterParameters{Dataedo.Repository.Services.Features.DatabaseObjects.Procedures.ProcedureFiltersEnum.ProcedureFilters})">
            <summary>
            Gets collection of <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.BaseDatabaseObject.DTO.BaseDatabaseObjectDTO"/> from <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.BaseDatabaseObject.DTO.BaseDatabaseObjectDTO"/>
            </summary>
            <param name="id">The ID of database.</param>
            <param name="join">The array of names of data to load with objects.</param>
            <param name="parameters">Pagination parameters.</param>
            <returns>The collection of <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.BaseDatabaseObject.DTO.BaseDatabaseObjectDTO"/>.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.DataLineage.ColumnLevel.Services.ColumnDataLineageProcessingService.GetNodes(Dataedo.Repository.Services.Features.DataLineage.ColumnLevel.Tools.ColumnLineageProcessedModel,Dataedo.Repository.Services.Features.DataLineage.ColumnLevel.Tools.ColumnLineageProcessedModel,System.Collections.Generic.IEnumerable{Dataedo.Repository.EntityFrameworkModel.QueryMappings.ColumnDataLineageResult})">
            <summary>
            It loops through the <c>data</c>.
            Each item of <c>data</c> has processed inflow and outflow objects in provided order.
            Does not return duplicated values.
            </summary>
            <param name="data">
            Flattened query result of inflow and outflow column data flows.
            A single row contains information about inflow and outflow column data flow along with their data flows.
            </param>
            <returns>Collection of inflow and outflow objects.</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.Dependencies.DependencyInformation">
            <summary>
            Class used for used by and uses dependency information model.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Dependencies.DependencyInformation.Server">
            <summary>
            Gets or sets the object server.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Dependencies.DependencyInformation.Database">
            <summary>
            Gets or sets the object database.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Dependencies.DependencyInformation.Schema">
            <summary>
            Gets or sets the object schema.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Dependencies.DependencyInformation.Name">
            <summary>
            Gets or sets the object name.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Dependencies.DependencyInformation.ObjectType">
            <summary>
            Gets or sets the  object type.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Dependencies.DependencyInformation.DatabaseId">
            <summary>
            Gets or sets the database ID.
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.Dependencies.DependencyObjectDTOCollectionMapper">
            <summary>
            Provides mappings to <see cref="T:Dataedo.Repository.Services.Features.Dependencies.DTO.DependencyObjectDTO"/>.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Dependencies.DependencyObjectDTOCollectionMapper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dataedo.Repository.Services.Features.Dependencies.DependencyObjectDTOCollectionMapper"/> class.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Dependencies.DependencyObjectDTOCollectionMapper.Map(System.Collections.Generic.IEnumerable{Dataedo.Repository.EntityFrameworkModel.Models.DependencyQueryModel},System.Int32,System.Boolean)">
            <summary>
            Maps collection of <see cref="T:Dataedo.Repository.Services.Features.Dependencies.DTO.DependencyObjectDTO"/> to ordered collection of <see cref="T:Dataedo.Repository.EntityFrameworkModel.Models.DependencyQueryModel"/>.
            <para>Result collection is ordered for dependency ordering preferences using <see cref="T:Dataedo.Repository.Services.Features.Dependencies.Tools.DependencySortingHelper"/>.</para>
            </summary>
            <param name="dependencies">Collection of dependencies of type <see cref="T:Dataedo.Repository.EntityFrameworkModel.Models.DependencyQueryModel"></see></param>
            <param name="currentDatabaseId">Current object database id.</param>
            <returns>The ordered collection of <see cref="T:Dataedo.Repository.Services.Features.Dependencies.DTO.DependencyObjectDTO"/>.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Dependencies.DependencyObjectDTOCollectionMapper.GetDependencyDetails(Dataedo.Repository.EntityFrameworkModel.Models.DependencyQueryModel)">
            <summary>
            If dependency is relationship then builds an object which represents dependency details.
            Otherwise returns null.
            </summary>
            <param name="model">The input parameter of dependency.</param>
            <returns>The object of type <see cref="T:Dataedo.Repository.Services.Features.Dependencies.DTO.DependencyTypeDetailsDTO"></see>.</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.Dependencies.DTO.DependencyObjectDTO">
            <summary>
            The class providing information about dependency.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Dependencies.DTO.DependencyObjectDTO.Id">
            <summary>
            Gets or sets the identifier of object.
            </summary>
            <example>1</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Dependencies.DTO.DependencyObjectDTO.DatabaseId">
            <summary>
            Gets or sets the identifier of an object database.
            </summary>
            <example>1</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Dependencies.DTO.DependencyObjectDTO.Database">
            <summary>
            Gets or sets the title of a database.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Dependencies.DTO.DependencyObjectDTO.Schema">
            <summary>
            Gets or sets the object schema.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Dependencies.DTO.DependencyObjectDTO.Name">
            <summary>
            Gets or sets the object name.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Dependencies.DTO.DependencyObjectDTO.Server">
            <summary>
            Gets or sets the object server.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Dependencies.DTO.DependencyObjectDTO.ObjectSource">
            <summary>
            Gets or sets the source.
            
            <para>Valid values:</para>
            
            <list type="bullet">
            <item><para>"DBMS" - an object is imported;</para></item>
            <item><para>"USER" - an object is defined by user;</para></item>
            </list>
            </summary>
            <example>DBMS</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Dependencies.DTO.DependencyObjectDTO.Class">
            <summary>
            Gets or sets the class.
            
            <para>Valid values:</para>
            
            <list type="bullet">
            <item><para>"TABLE" - a table object;</para></item>
            <item><para>"VIEW" - a view object;</para></item>
            <item><para>"PROCEDURE" - a procedure object;</para></item>
            <item><para>"FUNCTION" - a function object;</para></item>
            <item><para>"RELATION" - a relation;</para></item>
            <item><para>"TRIGGER" - regular trigger;</para></item>
            <item><para>"RULE" - PostgreSQL rule;</para></item>
            </list>
            </summary>
            <example>TRIGGER</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Dependencies.DTO.DependencyObjectDTO.Type">
            <summary>
            Gets or sets the type.
            
            <para>Valid values:</para>
            
            For tables:
            <list type="bullet">
            <item><para>"TABLE" - regular table, default;</para></item>
            <item><para>"EXTERNAL_TABLE"- External table;</para></item>
            <item><para>"FOREIGN_TABLE" - Foreign table;</para></item>
            <item><para>"FILE_TABLE" - File table;</para></item>
            <item><para>"GRAPH_TABLE" - Graph table;</para></item>
            <item><para>"GRAPH_NODE_TABLE" - Graph node/vertex table;</para></item>
            <item><para>"GRAPH_EDGE_TABLE" - Graph edge table;</para></item>
            <item><para>"TEMPORAL_TABLE" - Temporal table;</para></item>
            <item><para>"SYSTEM_VERSIONED_TABLE" - System-versioned table;</para></item>
            <item><para>"HISTORY_TABLE" - History table;</para></item>
            <item><para>"SEARCH_INDEX" - Search index (as in Elasticsearch);</para></item>
            <item><para>"COLLECTION" - Collection (as in MongoDB);</para></item>
            <item><para>"ENTITY" - Entity;</para></item>
            <item><para>"CUBE" - Cube;</para></item>
            <item><para>"DIMENSION" - Dimension;</para></item>
            <item><para>"FLAT_FILE" - Flat file;</para></item>
            <item><para>"OBJECT" - Object;</para></item>
            <item><para>"STANDARD_OBJECT" - Standard object;</para></item>
            <item><para>"CUSTOM_OBJECT" - Custom object;</para></item>
            <item><para>"EXTERNAL_OBJECT" - External object;</para></item>
            </list>
            
            For views:
            <list type="bullet">
            <item><para>"VIEW" - regular view, default;</para></item>
            <item><para>"MATERIALIZED_VIEW" - Materialized view;</para></item>
            <item><para>"EDITIONING_VIEW" - Editioning view;</para></item>
            <item><para>"INDEXED_VIEW" - Indexed view;</para></item>
            <item><para>"NAMED_QUERY" - Named query;</para></item>
            </list>
            
            For procedures:
            <list type="bullet">
            <item><para>"PROCEDURE" - regular stored procedure;</para></item>
            <item><para>"PACKAGE" - packages in Oracle;</para></item>
            <item><para>"CLR_PROCEDURE" - CLR stored procedure;</para></item>
            <item><para>"EXTENDED_PROCEDURE" - Extended procedure;</para></item>
            </list>
            
            For functions:
            <list type="bullet">
            <item><para>"FUNCTION" - regular user defined function;</para></item>
            <item><para>"METHOD" - methods in Db2;</para></item>
            <item><para>"CLR_FUNCTION" - CLR function;</para></item>
            </list>
            
            For relations:
            <list type="bullet">
            <item><para>"ONE_ONE" - a one occurrence in one entity;</para></item>
            <item><para>"ONE_MANY" - a one occurrence in many entities;</para></item>
            <item><para>"MANY_ONE" - a many number of occurrences in one entity;</para></item>
            </list>
            
            For triggers/rules:
            <list type="bullet">
            <item><para>"TRIGGER" - regular trigger;</para></item>
            <item><para>"RULE" - PostgreSQL rule;</para></item>
            <item><para>"CLR_TRIGGER" - CLR Trigger;</para></item>
            </list>
            </summary>
            <example>TRIGGER</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Dependencies.DTO.DependencyObjectDTO.ActivityState">
            <summary>
            Gets or sets the activity state (whether object is active).
            
            <para>Available values:</para>
            
            <list type="bullet">
            <item><para>"ENABLED" - an object is enabled;</para></item>
            <item><para>"DISABLED" - an object is disabled;</para></item>
            </list>
            </summary>
            <example>ENABLED</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Dependencies.DTO.DependencyObjectDTO.DependencySource">
            <summary>
            Gets or sets the source of dependency.
            
            <para>Valid values:</para>
            
            <list type="bullet">
            <item><para>"DBMS" - a dependency is imported;</para></item>
            <item><para>"USER" - a dependency is defined by user;</para></item>
            </list>
            </summary>
            <example>DBMS</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Dependencies.DTO.DependencyObjectDTO.DisplayName">
            <summary>
            Gets or sets the base display name.
            </summary>
            <example>dbo.trg_tables_Modify</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Dependencies.DTO.DependencyObjectDTO.HasChildren">
            <summary>
            Gets or sets a value indicating whether dependency has any child dependency.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Dependencies.DTO.DependencyObjectDTO.DependencyTypeDetails">
            <summary>
            Gets or sets an object which represents dependency details.
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.Dependencies.DTO.DependencyTypeDetailsDTO">
            <summary>
            The class providing information about dependency type.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Dependencies.DTO.DependencyTypeDetailsDTO.FkCardinality">
            <summary>
            Gets or sets relationship foreign key cardinality.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Dependencies.DTO.DependencyTypeDetailsDTO.PkCardinality">
            <summary>
            Gets or sets relationship primary key cardinality.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Dependencies.DTO.DependencyTypeDetailsDTO.ObjectClass">
            <summary>
            Gets or sets relationship primary or foreign database object.
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.Dependencies.Interfaces.IDependencyRelationshipsService">
            <summary>
            Represents object providing actions for relationship dependencies.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Dependencies.Interfaces.IDependencyRelationshipsService.GetDependencyRelationships(Dataedo.Repository.Services.Features.Dependencies.DependencyInformation)">
            <summary>
            Gets collection of relationship dependencies.
            </summary>
            <param name="info">Input parameter of root object data.</param>
            <returns>A collection of relationship dependencies.</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.Dependencies.Interfaces.IObjectDependencies">
            <summary>
            Represents object providing actions for dependencies.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Dependencies.Interfaces.IObjectDependencies.GetUsesDependencies(Dataedo.Repository.Services.Features.Dependencies.DependencyInformation,System.Int32,Dataedo.Repository.Services.JoinDefinitions.DependencyJoinsEnum.DependencyJoins[])">
            <summary>
            Gets the list of top level of uses dependencies by specified server, database, schema, name and type.
            </summary>
            <param name="dependencyInformation">The information about referenced object.</param>
            <param name="rootDatabaseId">The ID of root database object.</param>
            <param name="join">The array of names of data to load with objects.</param>
            <returns>The uses dependency objects.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Dependencies.Interfaces.IObjectDependencies.GetUsedByDependencies(Dataedo.Repository.Services.Features.Dependencies.DependencyInformation,System.Int32,Dataedo.Repository.Services.JoinDefinitions.DependencyJoinsEnum.DependencyJoins[])">
            <summary>
            Gets the list of top level of uses dependencies by specified server, database, schema, name and type.
            </summary>
            <param name="dependencyInformation">The information about referencing object.</param>
            <param name="rootDatabaseId">The ID of root database object.</param>
            <param name="join">The array of names of data to load with objects.</param>
            <returns>The used by dependency objects.</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.Dependencies.Tools.DependencyGroupingService">
            <summary>
            Provides dependency grouping methods.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Dependencies.Tools.DependencyGroupingService.Group(System.Int32,System.Collections.Generic.IEnumerable{Dataedo.Repository.EntityFrameworkModel.Models.DependencyQueryModel})">
            <summary>
            Groups dependencies by server, database, schema, name and object type.
            If there is more than one dependency with the same schema and name it takes only one with the same database id as <see cref="T:Dataedo.Repository.Services.Features.Dependencies.DependencyInformation"/>.
            For each group it does the following.
            If dependency has null ID then it returns other objects,
            else it takes only one with the same database id as <see cref="T:Dataedo.Repository.Services.Features.Dependencies.DependencyInformation"/>.
            </summary>
            <param name="databaseId">The ID of current object database id.</param>
            <param name="dependencies">The collection of dependencies.</param>
            <returns>The grouped <see cref="T:System.Collections.Generic.IEnumerable`1"/> of <see cref="T:Dataedo.Repository.EntityFrameworkModel.Models.DependencyQueryModel"/>.</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.Dependencies.Tools.DependencySortingHelper">
            <summary>
            Provides sorting <see cref="T:Dataedo.Repository.Services.Features.Dependencies.DTO.DependencyObjectDTO"/> collection for dependencies.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Dependencies.Tools.DependencySortingHelper.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dataedo.Repository.Services.Features.Dependencies.Tools.DependencySortingHelper"/> class.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Dependencies.Tools.DependencySortingHelper.GetSortValue(Dataedo.Repository.Services.Features.Dependencies.DTO.DependencyObjectDTO)">
            <summary>
            Gets sorting value by object type.
            </summary>
            <param name="dependency">Dependency object of type <see cref="T:Dataedo.Repository.Services.Features.Dependencies.DTO.DependencyObjectDTO"></see></param>
            <returns>The sorting value of an class.</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.ERD.Builders.ErdDTOBuilder">
            <summary>
            The class providing building <see cref="T:Dataedo.Repository.Services.Features.SubjectAreas.DTO.SubjectAreaDTO"/> objects.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.Features.ERD.Builders.ErdDTOBuilder.result">
            <summary>
            The result <see cref="T:Dataedo.Repository.Services.Features.ERD.DTO.ErdDTO"/> object.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.ERD.Builders.ErdDTOBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dataedo.Repository.Services.Features.SubjectAreas.Builders.SubjectAreaDTOBuilder"/> class.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.ERD.Builders.ErdDTOBuilder.Build(Dataedo.Repository.EntityFrameworkModel.Models.Modules,Dataedo.Repository.Services.JoinDefinitions.ErdsJoinsEnum.ErdsJoins[])">
            <summary>
            Builds <see cref="T:Dataedo.Repository.Services.Features.ERD.DTO.ErdDTO"/> object from <see cref="T:Dataedo.Repository.EntityFrameworkModel.Models.Modules"/> object data using joins.
            </summary>
            <param name="data">The source data.</param>
            <param name="join">The array of names of data to load with object.</param>
            <returns>The <see cref="T:Dataedo.Repository.Services.Features.ERD.DTO.ErdDTO"/> object.</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.ERD.Builders.ErdLinkDTOBuilder">
            <summary>
            The class providing building <see cref="T:Dataedo.Repository.Services.Features.SubjectAreas.DTO.SubjectAreaDTO"/> objects.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.Features.ERD.Builders.ErdLinkDTOBuilder.result">
            <summary>
            The result <see cref="T:Dataedo.Repository.Services.Features.ERD.DTO.ErdLinkDTO"/> object.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.ERD.Builders.ErdLinkDTOBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dataedo.Repository.Services.Features.SubjectAreas.Builders.SubjectAreaDTOBuilder"/> class.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.ERD.Builders.ErdLinkDTOBuilder.Build(Dataedo.Repository.EntityFrameworkModel.Models.ErdLinks,Dataedo.Repository.Services.JoinDefinitions.ErdsJoinsEnum.ErdsJoins[])">
            <summary>
            Builds <see cref="T:Dataedo.Repository.Services.Features.ERD.DTO.ErdLinkDTO"/> object from <see cref="T:Dataedo.Repository.EntityFrameworkModel.Models.ErdLinks"/> object data using joins.
            </summary>
            <param name="data">The source data.</param>
            <param name="join">The array of names of data to load with object.</param>
            <returns>The <see cref="T:Dataedo.Repository.Services.Features.ERD.DTO.ErdLinkDTO"/> object.</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.ERD.Builders.ErdNodeColumnDTOBuilder">
            <summary>
            The class providing building <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.Columns.DTO.ColumnDTO"/>.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.ERD.Builders.ErdNodeColumnDTOBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.Columns.Builders.ColumnDTOBuilder"/> class.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.ERD.Builders.ErdNodeColumnDTOBuilder.Build(Dataedo.Repository.EntityFrameworkModel.Models.Columns,System.Collections.Generic.IEnumerable{Dataedo.Repository.EntityFrameworkModel.Models.CustomFields},System.Boolean,System.Boolean,Dataedo.Repository.Services.JoinDefinitions.ColumnsJoinsEnum.ColumnsJoins[])">
            <summary>
            Builds an object of type <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.Columns.DTO.ColumnDTO"/>.
            </summary>
            <param name="data"></param>
            <param name="customFieldsDefinitions"></param>
            <param name="erdShowNullable"></param>
            <param name="erdShowTypes"></param>
            <param name="join"></param>
            <returns></returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.ERD.Builders.ErdNodeDTOBuilder">
            <summary>
            The class providing building <see cref="T:Dataedo.Repository.Services.Features.SubjectAreas.DTO.SubjectAreaDTO"/> objects.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.Features.ERD.Builders.ErdNodeDTOBuilder.result">
            <summary>
            The result <see cref="T:Dataedo.Repository.Services.Features.ERD.DTO.ErdNodeDTO"/> object.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.ERD.Builders.ErdNodeDTOBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dataedo.Repository.Services.Features.SubjectAreas.Builders.SubjectAreaDTOBuilder"/> class.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.ERD.Builders.ErdNodeDTOBuilder.Build(Dataedo.Repository.EntityFrameworkModel.Models.ErdNodes,System.Boolean,System.Boolean,Dataedo.Repository.Services.JoinDefinitions.ErdsJoinsEnum.ErdsJoins[])">
            <summary>
            Builds <see cref="T:Dataedo.Repository.Services.Features.ERD.DTO.ErdNodeDTO"/> object from <see cref="T:Dataedo.Repository.EntityFrameworkModel.Models.ErdNodes"/> object data using joins.
            </summary>
            <param name="data">The source data.</param>
            <param name="join">The array of names of data to load with object.</param>
            <returns>The <see cref="T:Dataedo.Repository.Services.Features.ERD.DTO.ErdNodeDTO"/> object.</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.ERD.DTO.ErdDTO">
            <summary>
            The class providing basic information about ERD.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.ERD.DTO.ErdDTO.Id">
            <summary>
            Gets or sets the identifier of object.
            </summary>
            <example>1</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.ERD.DTO.ErdDTO.SubjectAreaId">
            <summary>
            Gets or sets the identifier of parent subject area containing ERD.
            </summary>
            <example>1</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.ERD.DTO.ErdDTO.SubjectArea">
            <summary>
            Gets or sets the information object about parent subject area containing ERD.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.ERD.DTO.ErdDTO.DisplayDocumentationNameMode">
            <summary>
            Gets or sets the value determining when documentation name should be shown.
            
            <para>Valid values of Value property:</para>
            
            <list type="bullet">
            <item><para>"EXTERNAL_ENTITIES_ONLY" - documentation name should be shown for entities from another database;</para></item>
            <item><para>"ALL_ENTITIES" - documentation name should be shown for all antites;</para></item>
            <item><para>"NO_ENTITIES" - documentation name should be never shown;</para></item>
            </list>
            </summary>
            <example>Value = ALL_ENTITIES, DisplayName = All entites</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.ERD.DTO.ErdDTO.LinkStyle">
            <summary>
            Gets or sets the value determining how to draw link lines.
            
            <para>Valid values of Value property:</para>
            
            <list type="bullet">
            <item><para>"STRAIGHT" - the straight lines;</para></item>
            <item><para>"ORTHOGONAL" - the orthogonal lines;</para></item>
            </list>
            </summary>
            <example>Value = STRAIGHT, DisplayName = Straight</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.ERD.DTO.ErdDTO.ShowColumnTypes">
            <summary>
            Gets or sets the value indicating whether types of columns should be show.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.ERD.DTO.ErdDTO.ErdNodes">
            <summary>
            Gets or sets the collection of nodes.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.ERD.DTO.ErdDTO.ErdLinks">
            <summary>
            Gets or sets the collection of links.
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.ERD.DTO.ErdLinkDTO">
            <summary>
            The class providing basic information about ERD link.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.ERD.DTO.ErdLinkDTO.Id">
            <summary>
            Gets or sets the identifier of object.
            </summary>
            <example>1</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.ERD.DTO.ErdLinkDTO.SubjectAreaId">
            <summary>
            Gets or sets the identifier of parent subject area containing link.
            </summary>
            <example>1</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.ERD.DTO.ErdLinkDTO.SubjectArea">
            <summary>
            Gets or sets the information object about parent subject area containing link.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.ERD.DTO.ErdLinkDTO.RelationshipId">
            <summary>
            Gets or sets the identifier of relationship represented by link.
            </summary>
            <example>1</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.ERD.DTO.ErdLinkDTO.Relationship">
            <summary>
            Gets or sets the information object about relationship represented by link.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.ERD.DTO.ErdLinkDTO.LinkStyle">
            <summary>
            Gets or sets the value determining how to draw link lines.
            
            <para>Valid values of Value property:</para>
            
            <list type="bullet">
            <item><para>"STRAIGHT" - the straight lines</para></item>
            <item><para>"ORTHOGONAL" - the orthogonal lines;</para></item>
            </list>
            </summary>
            <example>Value = STRAIGHT, DisplayName = Straight</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.ERD.DTO.ErdLinkDTO.ShowLabel">
            <summary>
            Gets or sets the value indicating whether label of relation should be show.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.ERD.DTO.ErdLinkDTO.ShowJoinCondition">
            <summary>
            Gets or sets the value indicating whether join condition of relation should be show.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.ERD.DTO.ErdLinkDTO.IsHidden">
            <summary>
            Gets or sets the value indicating whether link line shoud be hidden.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.ERD.DTO.ErdNodeColumnDTO.Id">
            <summary>
            Gets or sets the identifier of object.olu
            </summary>
            <example>146</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.ERD.DTO.ErdNodeColumnDTO.Path">
            <summary>
            Gets or sets the path (location) of column (without its name).
            <para>In regular databases value is the name of parent database object containing column.</para>
            <para>In hierarchical structures path is composed of name of parent database object containing column and names of all columns that are on higher level of hierarchy.</para>
            </summary>
            <example>tables.table_id</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.ERD.DTO.ErdNodeColumnDTO.PathShort">
            <summary>
            Gets or sets the short version of <see cref="P:Dataedo.Repository.Services.Features.ERD.DTO.ErdNodeColumnDTO.Path"/>. Value is at least composed of beginning and ending of hierarchy value.
            <para>The length is limited to 50 characters.</para>
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.ERD.DTO.ErdNodeColumnDTO.OrdinalPosition">
            <summary>
            Gets or sets the position of column in object in DBMS.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.ERD.DTO.ErdNodeColumnDTO.Sort">
            <summary>
            Gets or sets the alternative column sorting defined by user in Dataedo.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.ERD.DTO.ErdNodeColumnDTO.Source">
            <summary>
            Gets or sets the source.
            
            <para>Valid values:</para>
            
            <list type="bullet">
            <item><para>"DBMS" - an object is imported;</para></item>
            <item><para>"USER" - an object is defined by user;</para></item>
            </list>
            </summary>
            <example>Value = USER, DisplayName = User</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.ERD.DTO.ErdNodeColumnDTO.Status">
            <summary>
            Gets or sets the status of object existence in database.
            
            <para>Available values:</para>
            
            <list type="bullet">
            <item><para>"A" - an object exists in database;</para></item>
            <item><para>"D" - an object is deleted from database;</para></item>
            </list>
            </summary>
            <example>Value = A, DisplayName = Active</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.ERD.DTO.ErdNodeColumnDTO.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <example>Column</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.ERD.DTO.ErdNodeColumnDTO.Datatype">
            <summary>
            Gets or sets the type of data of parameter.
            </summary>
            <example>nvarchar</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.ERD.DTO.ErdNodeColumnDTO.DataLength">
            <summary>
            Gets or sets the data length/precision as text.
            <para>Depending on data type it can have different formats, e.g. "100", "5,4", "MAX" etc. Null if parameter has no length/precision defined.</para>
            </summary>
            <example>nvarchar</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.ERD.DTO.ErdNodeColumnDTO.IsNullable">
            <summary>
            Gets or sets a value indicating whether values in column may be null.
            </summary>
            <example>true</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.ERD.DTO.ErdNodeColumnDTO.Keys">
            <summary>
            Gets or sets the collection of keys related to column.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.ERD.DTO.ErdNodeColumnDTO.RelationshipsReferenced">
            <summary>
            Gets or sets the collection of keys related to column.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.ERD.DTO.ErdNodeColumnDTO.RelationshipsReferencing">
            <summary>
            Gets or sets the collection of keys related to column.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.ERD.DTO.ErdNodeColumnDTO.DisplayName">
            <summary>
            Gets or sets the base display name.
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.ERD.DTO.ErdNodeDTO">
            <summary>
            The class providing basic information about ERD node.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.ERD.DTO.ErdNodeDTO.Id">
            <summary>
            Gets or sets the identifier of object.
            </summary>
            <example>1</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.ERD.DTO.ErdNodeDTO.SubjectAreaId">
            <summary>
            Gets or sets the identifier of parent subject area containing node.
            </summary>
            <example>1</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.ERD.DTO.ErdNodeDTO.SubjectArea">
            <summary>
            Gets or sets the information object about parent subject area containing node.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.ERD.DTO.ErdNodeDTO.DatabaseObjectId">
            <summary>
            Gets or sets the identifier of database object represented by node.
            </summary>
            <example>1</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.ERD.DTO.ErdNodeDTO.DatabaseObjectClass">
            <summary>
            Gets or sets the class of database object containing object represented by node.
            </summary>
            <example>Value = TABLE, DisplayName = Table</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.ERD.DTO.ErdNodeDTO.DatabaseObject">
            <summary>
            Gets or sets the information object about database object containing object represented by node.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.ERD.DTO.ErdNodeDTO.PositionX">
            <summary>
            Gets or sets the horizontal position of node.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.ERD.DTO.ErdNodeDTO.PositionY">
            <summary>
            Gets or sets the vertical position of node.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.ERD.DTO.ErdNodeDTO.Width">
            <summary>
            Gets or sets the width of node.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.ERD.DTO.ErdNodeDTO.HtmlColor">
            <summary>
            Gets or sets the color of node represented as HTML HEX.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.ERD.DTO.ErdNodeDTO.Columns">
            <summary>
            Gets or sets the collection of columns in ERD node.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.ERD.DTO.ErdPostItDTO.PositionX">
            <summary>
            Gets or sets the horizontal position of node.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.ERD.DTO.ErdPostItDTO.PositionY">
            <summary>
            Gets or sets the vertical position of node.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.ERD.DTO.ErdPostItDTO.Width">
            <summary>
            Gets or sets the width of node.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.ERD.DTO.ErdPostItDTO.HtmlColor">
            <summary>
            Gets or sets the color of node represented as HTML HEX.
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.ERD.Services.LinkStyleService">
            <summary>
            Class for creating link style object.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.ERD.Services.LinkStyleService.GetLinkStyle(System.String)">
            <summary>
            Gets an object which represents link style.
            </summary>
            <param name="source">The link style source string.</param>
            <returns>Returns an instance of <see cref="T:Dataedo.Repository.Services.DTO.ValueNameDTO">.</see></returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Feedback.Builders.WriteFeedbackDTOBuilder.Build(Dataedo.Repository.EntityFrameworkModel.Models.Feedback,Dataedo.Repository.EntityFrameworkModel.QueryMappings.FeedbackLinkResult,Dataedo.Repository.EntityFrameworkModel.Models.Licenses)">
            <summary>
            Builds <see cref="T:Dataedo.Repository.Services.Features.Feedback.DTO.FeedbackDTO"/> object.
            The fields show_schema and show_schema_override are always equal to the context show schema value.
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.Glossaries.Builders.GlossaryDTOBuilder">
            <summary>
            The class providing building <see cref="T:Dataedo.Repository.Services.Features.Databases.DTO.DatabaseDTO"/> objects.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Glossaries.Builders.GlossaryDTOBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dataedo.Repository.Services.Features.Glossaries.Builders.GlossaryDTOBuilder"/> class.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Glossaries.Builders.GlossaryDTOBuilder.Build(Dataedo.Repository.EntityFrameworkModel.Models.Databases,System.Collections.Generic.IEnumerable{Dataedo.Repository.EntityFrameworkModel.Models.CustomFields},Dataedo.Repository.Services.JoinDefinitions.GlossariesJoinsEnum.GlossariesJoins[],System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Builds <see cref="T:Dataedo.Repository.Services.Features.Glossaries.DTO.GlossaryDTO"/> object from <see cref="T:Dataedo.Repository.EntityFrameworkModel.Models.Databases"/> object data using joins.
            </summary>
            <param name="data">The source data.</param>
            <param name="definitions">The collection on object providing information about custom field without values.</param>
            <param name="join">The array of names of data to load with object.</param>
            <returns>The <see cref="T:Dataedo.Repository.Services.Features.Glossaries.DTO.GlossaryDTO"/> object.</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.Glossaries.DTO.GlossaryDTO">
            <summary>
            The class providing information about glossary.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Glossaries.DTO.GlossaryDTO.Id">
            <summary>
            Gets or sets the identifier of object.
            </summary>
            <example>1</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Glossaries.DTO.GlossaryDTO.DisplayName">
            <summary>
            Gets or sets the base display name.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Glossaries.DTO.GlossaryDTO.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <example>Dataedo repository</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Glossaries.DTO.GlossaryDTO.Description">
            <summary>
            Gets or sets the description of object.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Glossaries.DTO.GlossaryDTO.SubjectAreas">
            <summary>
            Gets or sets the subject areas that objects belongs to.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Glossaries.DTO.GlossaryDTO.CustomFields">
            <summary>
            Gets or sets the custom fields.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Glossaries.DTO.GlossaryDTO.Metadata">
            <summary>
            Gets or sets the record metadata (creation and modification information).
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.Glossaries.Extensions.GlossaryDTOExtensions">
            <summary>
            The class providing extensions for <see cref="T:Dataedo.Repository.Services.Features.Glossaries.DTO.GlossaryDTO"/> data.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Glossaries.Extensions.GlossaryDTOExtensions.SelectDTO(System.Collections.Generic.IEnumerable{Dataedo.Repository.EntityFrameworkModel.Models.Databases},System.Collections.Generic.IEnumerable{Dataedo.Repository.EntityFrameworkModel.Models.CustomFields},Dataedo.Repository.Services.JoinDefinitions.GlossariesJoinsEnum.GlossariesJoins[],System.Collections.Generic.Dictionary{System.Int32,System.Nullable{System.Int32}},System.Collections.Generic.IEnumerable{System.Int32},System.Boolean)">
            <summary>
            Gets queryable list of <see cref="T:Dataedo.Repository.Services.Features.Databases.DTO.DatabaseDTO"/> evaluated using parameters.
            </summary>
            <param name="source">The source <see cref="T:Dataedo.Repository.EntityFrameworkModel.Models.Databases"/> queryable list.</param>
            <param name="customFieldsDefinitions">Custom field definitions.</param>
            <param name="join">The array of names of data to load with objects.</param>
            <returns>The queryable list of <see cref="T:Dataedo.Repository.Services.Features.Glossaries.DTO.GlossaryDTO"/> evaluated using parameters.</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.Glossaries.GlossaryFiltersEnum.GlossaryFilters">
            <summary>
            Specifies applicable data filters for glossaries.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Glossaries.GlossaryFiltersEnum.HasAnyItem``1(Dataedo.Repository.Services.Features.Glossaries.GlossaryFiltersEnum.GlossaryFilters[],Dataedo.Repository.Services.Features.Glossaries.GlossaryFiltersEnum.GlossaryFilters[])">
            <summary>
            Checks whether provided domain array has any element of items array.
            </summary>
            <typeparam name="T">The type of element of array of join parameter based on <see cref="T:System.Enum"></see> type.</typeparam>
            <param name="array">The domain array of values to check in.</param>
            <param name="items">The array of values to check whether any is domain array.</param>
            <returns><c>true</c> domain array has any element of items array; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.Glossaries.Interfaces.IGlossariesService">
            <summary>
            Represents object providing actions for database objects.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Glossaries.Interfaces.IGlossariesService.GetObjectsAsync(Dataedo.Repository.Services.JoinDefinitions.GlossariesJoinsEnum.GlossariesJoins[],Dataedo.Repository.Services.Parameters.OffsetLimitFilterParameters{Dataedo.Repository.Services.Features.Glossaries.GlossaryFiltersEnum.GlossaryFilters})">
            <summary>
            Gets information object about object by ID.
            </summary>
            <param name="join">The array of names of data to load with objects.</param>
            <param name="parameters">The parameters providing choosing required set of data by skipping and limiting result items.</param>
            <returns>The information object about object by ID.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Glossaries.Interfaces.IGlossariesService.GetObject(System.Int32,Dataedo.Repository.Services.JoinDefinitions.GlossariesJoinsEnum.GlossariesJoins[])">
            <summary>
            Gets information object about database by ID.
            </summary>
            <param name="id">The ID of object.</param>
            <param name="join">The array of names of data to load with objects.</param>
            <returns>The information object about database by ID.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Glossaries.Interfaces.IGlossariesService.GetEntries(System.Int32,Dataedo.Repository.Services.JoinDefinitions.GlossaryEntriesJoinsEnum.GlossaryEntryJoins[],Dataedo.Repository.Services.Parameters.OffsetLimitFilterParameters{Dataedo.Repository.Services.Features.GlossaryEntries.GlossaryEntryFiltersEnum.GlossaryEntryFilters})">
            <summary>
            Gets the object with basic information about entries of glossary and custom field definitions.
            </summary>
            <param name="id">The ID of object.</param>
            <param name="join">The array of names of data to load with objects.</param>
            <param name="parameters">The parameters providing choosing required set of data by skipping and limiting result items.</param>
            <returns></returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.GlossaryEntriesRelationships.Builders.GlossaryEntryRelationshipTypeDTOBuilder">
            <summary>
            The class providing building <see cref="T:Dataedo.Repository.Services.Features.GlossaryEntriesRelationships.DTO.GlossaryEntryRelationshipTypeDTO"/>.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.GlossaryEntriesRelationships.Builders.GlossaryEntryRelationshipTypeDTOBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dataedo.Repository.Services.Features.GlossaryEntriesRelationships.Builders.GlossaryEntryRelationshipTypeDTOBuilder"/> class.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.GlossaryEntriesRelationships.Builders.GlossaryEntryRelationshipTypeDTOBuilder.Build(Dataedo.Repository.EntityFrameworkModel.Models.GlossaryTermRelationshipTypes,System.Boolean)">
            <summary>
             Builds <see cref="T:Dataedo.Repository.Services.Features.GlossaryEntriesRelationships.DTO.GlossaryEntryRelationshipTypeDTO"/> object from <see cref="T:Dataedo.Repository.EntityFrameworkModel.Models.GlossaryTermRelationshipTypes"/>.
            </summary>
            <param name="data">The source data.</param>
            <param name="isReversed">Indicates whether select title or reversed title.</param>
            <returns></returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.GlossaryEntriesRelationships.Builders.GlossaryTermRelationshipsDTOBuilder">
            <summary>
            The class providing building <see cref="T:Dataedo.Repository.Services.Features.GlossaryEntries.Builders.GlossaryEntryDTOBuilder"/>.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.GlossaryEntriesRelationships.Builders.GlossaryTermRelationshipsDTOBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dataedo.Repository.Services.Features.GlossaryEntriesRelationships.Builders.GlossaryTermRelationshipsDTOBuilder"/> class.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.GlossaryEntriesRelationships.Builders.GlossaryTermRelationshipsDTOBuilder.BuildDestination(Dataedo.Repository.EntityFrameworkModel.Models.GlossaryTermRelationships,System.ValueTuple{System.Boolean,System.Collections.Generic.IEnumerable{System.Int32}},System.Collections.Generic.IEnumerable{Dataedo.Repository.EntityFrameworkModel.Models.CustomFields},System.Nullable{System.Int32})">
            <summary>
             Builds <see cref="T:Dataedo.Repository.Services.Features.GlossaryEntriesRelationships.DTO.GlossaryEntryRelationshipDTO"/> destination object from <see cref="T:Dataedo.Repository.Services.Features.GlossaryEntriesRelationships.DTO.GlossaryEntryRelationshipDTO"/>.
            </summary>
            <param name="data">The source data.</param>
            <param name="definitions">Custom field definitions.</param>
            <returns></returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.GlossaryEntriesRelationships.Builders.GlossaryTermRelationshipsDTOBuilder.BuildSource(Dataedo.Repository.EntityFrameworkModel.Models.GlossaryTermRelationships,System.ValueTuple{System.Boolean,System.Collections.Generic.IEnumerable{System.Int32}},System.Collections.Generic.IEnumerable{Dataedo.Repository.EntityFrameworkModel.Models.CustomFields},System.Nullable{System.Int32})">
            <summary>
             Builds <see cref="T:Dataedo.Repository.Services.Features.GlossaryEntriesRelationships.DTO.GlossaryEntryRelationshipDTO"/> source object from <see cref="T:Dataedo.Repository.Services.Features.GlossaryEntriesRelationships.DTO.GlossaryEntryRelationshipDTO"/>.
            </summary>
            <param name="data">The source data.</param>
            <param name="definitions">Custom field definitions</param>
            <returns></returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.GlossaryEntriesRelationships.DTO.GlossaryEntryRelationshipDTO">
            <summary>
            The class providing information about relationship between two glossary entries.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.GlossaryEntriesRelationships.DTO.GlossaryEntryRelationshipDTO.Id">
            <summary>
            Gets or sets the identifier of relationship.
            </summary>
            <example>2</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.GlossaryEntriesRelationships.DTO.GlossaryEntryRelationshipDTO.DisplayName">
            <summary>
            Gets or sets the base display name.
            </summary>
            <example>Customer related term Vendor</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.GlossaryEntriesRelationships.DTO.GlossaryEntryRelationshipDTO.RelatedGlossaryEntryId">
            <summary>
            Gets or sets the identifier of related glossary entry.
            </summary>
            <example>1</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.GlossaryEntriesRelationships.DTO.GlossaryEntryRelationshipDTO.RelatedGlossaryEntry">
            <summary>
            Gets or sets the information object about related glossary entry.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.GlossaryEntriesRelationships.DTO.GlossaryEntryRelationshipDTO.TypeId">
            <summary>
            Gets or sets the identifier of type of relationship.
            </summary>
            <example>1</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.GlossaryEntriesRelationships.DTO.GlossaryEntryRelationshipDTO.Type">
            <summary>
            Gets or sets the information object about type of glossary entry relationship.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.GlossaryEntriesRelationships.DTO.GlossaryEntryRelationshipDTO.Comment">
            <summary>
            Gets or sets the comment of glossary entry relationshup.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.GlossaryEntriesRelationships.DTO.GlossaryEntryRelationshipDTO.Metadata">
            <summary>
            Gets or sets the record metadata (creation and modification information).
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.GlossaryEntriesRelationships.DTO.GlossaryEntryRelationshipTypeDTO">
            <summary>
            The class providing information about type of relationship between two glossary entries.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.GlossaryEntriesRelationships.DTO.GlossaryEntryRelationshipTypeDTO.Id">
            <summary>
            Gets or sets the identifier of glossary entry relationship type.
            </summary>
            <example>1</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.GlossaryEntriesRelationships.DTO.GlossaryEntryRelationshipTypeDTO.Title">
            <summary>
            Gets or sets the title.
            <para>Title value depends on context (relationship may be not symmetrical and glossary entry may be related to or related from).</para>
            </summary>
            <example>Replaces</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.GlossaryEntriesRelationships.DTO.GlossaryEntryRelationshipTypeDTO.IsSymmetrical">
            <summary>
            Gets or sets the value indicating whether relationship type is symmetrical).
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.GlossaryEntriesRelationships.DTO.GlossaryEntryRelationshipTypeDTO.IsReversed">
            <summary>
            Gets or sets the value indicating whether relationship is in regular direction or reversed direction.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.GlossaryEntriesRelationships.DTO.GlossaryEntryRelationshipTypeDTO.Metadata">
            <summary>
            Gets or sets the record metadata (creation and modification information).
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.GlossaryEntriesRelationships.DTO.GlossaryEntryRelationshipTypeDTO.Sort">
            <summary>
            Gets or sets the sorting position for relationship.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.GlossaryEntriesRelationships.Extensions.GlossaryEntryRelationshipDTOExtensions.SelectDestinationDTO(System.Collections.Generic.IEnumerable{Dataedo.Repository.EntityFrameworkModel.Models.GlossaryTermRelationships},System.ValueTuple{System.Boolean,System.Collections.Generic.IEnumerable{System.Int32}},System.Collections.Generic.IEnumerable{Dataedo.Repository.EntityFrameworkModel.Models.CustomFields},System.Collections.Generic.Dictionary{System.Int32,System.Nullable{System.Int32}})">
            <summary>
            Gets queryable list of <see cref="T:Dataedo.Repository.Services.Features.GlossaryEntries.DTO.GlossaryEntryDTO"/> evaluated using parameters.
            </summary>
            <param name="source">The source <see cref="T:Dataedo.Repository.EntityFrameworkModel.Models.GlossaryTerms"/> queryable list.</param>
            <param name="customFieldsDefinitions">Custom field definitions.</param>
            <param name="parameters">The parameters providing selecting required set of data by skipping and limiting result items.</param>
            <returns>The queryable list of <see cref="T:Dataedo.Repository.Services.Features.GlossaryEntries.DTO.GlossaryEntryDTO"/> evaluated using parameters.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.GlossaryEntriesRelationships.Extensions.GlossaryEntryRelationshipDTOExtensions.SelectSourceDTO(System.Collections.Generic.IEnumerable{Dataedo.Repository.EntityFrameworkModel.Models.GlossaryTermRelationships},System.ValueTuple{System.Boolean,System.Collections.Generic.IEnumerable{System.Int32}},System.Collections.Generic.IEnumerable{Dataedo.Repository.EntityFrameworkModel.Models.CustomFields},System.Collections.Generic.Dictionary{System.Int32,System.Nullable{System.Int32}})">
            <summary>
            Gets queryable list of <see cref="T:Dataedo.Repository.Services.Features.GlossaryEntries.DTO.GlossaryEntryDTO"/> evaluated using parameters.
            </summary>
            <param name="source">The source <see cref="T:Dataedo.Repository.EntityFrameworkModel.Models.GlossaryTerms"/> queryable list.</param>
            <param name="customFieldsDefinitions">Custom field definitions.</param>
            <param name="parameters">The parameters providing selecting required set of data by skipping and limiting result items.</param>
            <returns>The queryable list of <see cref="T:Dataedo.Repository.Services.Features.GlossaryEntries.DTO.GlossaryEntryDTO"/> evaluated using parameters.</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.GlossaryEntriesRelationships.Extensions.GlossaryTermRelationshipsExtensions">
            <summary>
            The class providing extensions for <see cref="T:Dataedo.Repository.Services.Features.Search.DTO.AssetTypeFilterDTO"/> data.
            </summary>
            
        </member>
        <member name="T:Dataedo.Repository.Services.Features.GlossaryEntriesRelationships.Interfaces.IGlossaryEntryRelationshipTypesService">
            <summary>
            Represents object providing actions for glossary entry relationship types.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.GlossaryEntriesRelationships.Interfaces.IGlossaryEntryRelationshipTypesService.GetObjectsAsync(System.Nullable{System.Boolean})">
            <summary>
            Gets the object which contains a collection of <see cref="T:Dataedo.Repository.Services.Features.GlossaryEntriesRelationships.DTO.GlossaryEntryRelationshipTypeDTO"/>.
            </summary>
            <param name="reversed">Optional flag indicating whether relationship types should be reversed. If nothing is provided returns relationhips in both forms.</param>
            <returns>The <see cref="T:Dataedo.Repository.Services.Features.GlossaryEntries.DTO.GlossaryEntryDTO"/> object.</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.GlossaryEntries.Builders.GlossaryEntryDTOBuilder">
            <summary>
            The class providing building <see cref="T:Dataedo.Repository.Services.Features.GlossaryEntries.DTO.GlossaryEntryDTO"></see>.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.GlossaryEntries.Builders.GlossaryEntryDTOBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dataedo.Repository.Services.Features.GlossaryEntries.Builders.GlossaryEntryDTOBuilder"></see> class.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.GlossaryEntries.Builders.GlossaryEntryDTOBuilder.Build(Dataedo.Repository.EntityFrameworkModel.Models.GlossaryTerms,System.Collections.Generic.IEnumerable{Dataedo.Repository.EntityFrameworkModel.Models.CustomFields},Dataedo.Repository.Services.JoinDefinitions.GlossaryEntriesJoinsEnum.GlossaryEntryJoins[],System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Builds <see cref="T:Dataedo.Repository.Services.Features.GlossaryEntries.DTO.GlossaryEntryDTO"/> object from <see cref="T:Dataedo.Repository.EntityFrameworkModel.Models.GlossaryTerms"/> object data using joins.
            </summary>
            <param name="data">The source data.</param>
            <param name="definitions">The collection on object providing information about custom field without values.</param>
            <param name="join">The array of names of data to load with object.</param>
            <returns>The <see cref="T:Dataedo.Repository.Services.Features.Glossaries.DTO.GlossaryDTO"/> object.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.GlossaryEntries.Builders.GlossaryEntryDTOBuilder.BuildWithParentAdditionalProperties(Dataedo.Repository.EntityFrameworkModel.Models.GlossaryTerms,System.Collections.Generic.IEnumerable{Dataedo.Repository.EntityFrameworkModel.Models.CustomFields},Dataedo.Repository.Services.JoinDefinitions.GlossaryEntriesJoinsEnum.GlossaryEntryJoins[],System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Builds <see cref="T:Dataedo.Repository.Services.Features.GlossaryEntries.DTO.GlossaryEntryDTO"/> object from <see cref="T:Dataedo.Repository.EntityFrameworkModel.Models.GlossaryTerms"/> object data using joins. If join includes parent entry then the method builds an extended parent entry object.
            <para>Extended parent entry object contains information about custom fields, description and type.</para>
            </summary>
            <param name="data">The source data.</param>
            <param name="definitions">The collection on object providing information about custom field without values.</param>
            <param name="join">The array of names of data to load with object.</param>
            <returns>The <see cref="T:Dataedo.Repository.Services.Features.Glossaries.DTO.GlossaryDTO"/> object.</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.GlossaryEntries.DTO.GlossaryEntryDTO">
            <summary>
            The class providing information about glossary entry.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.GlossaryEntries.DTO.GlossaryEntryDTO.Id">
            <summary>
            Gets or sets the identifier of object.
            </summary>
            <example>2</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.GlossaryEntries.DTO.GlossaryEntryDTO.DisplayName">
            <summary>
            Gets or sets the base display name.
            </summary>
            <example>BG.Product</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.GlossaryEntries.DTO.GlossaryEntryDTO.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <example>Product</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.GlossaryEntries.DTO.GlossaryEntryDTO.GlossaryId">
            <summary>
            Gets or sets the identifier of glossary containing entry.
            </summary>
            <example>1</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.GlossaryEntries.DTO.GlossaryEntryDTO.Glossary">
            <summary>
            Gets or sets the information object about glossary containing entry.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.GlossaryEntries.DTO.GlossaryEntryDTO.TypeId">
            <summary>
            Gets or sets the identifier of type of glossary entry.
            </summary>
            <example>1</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.GlossaryEntries.DTO.GlossaryEntryDTO.Type">
            <summary>
            Gets or sets the information object about type of glossary entry.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.GlossaryEntries.DTO.GlossaryEntryDTO.ParentEntryId">
            <summary>
            Gets or sets the identifier of parent entry containing entry.
            </summary>
            <example>1</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.GlossaryEntries.DTO.GlossaryEntryDTO.ParentEntry">
            <summary>
            Gets or sets the information object about parent entry containing entry.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.GlossaryEntries.DTO.GlossaryEntryDTO.SubjectAreas">
            <summary>
            Gets or sets the subject areas that objects belongs to.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.GlossaryEntries.DTO.GlossaryEntryDTO.RelatedGlossaryEntries">
            <summary>
            Gets or sets the collection of related glossary entries.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.GlossaryEntries.DTO.GlossaryEntryDTO.LinkedDataAssets">
            <summary>
            Gets or sets the collection of linked database objects (tables and views).
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.GlossaryEntries.DTO.GlossaryEntryDTO.CustomFields">
            <summary>
            Gets or sets the custom fields.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.GlossaryEntries.DTO.GlossaryEntryDTO.Description">
            <summary>
            Gets or sets the description of object.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.GlossaryEntries.DTO.GlossaryEntryDTO.Metadata">
            <summary>
            Gets or sets the record metadata (creation and modification information).
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.GlossaryEntries.DTO.GlossaryEntryDTOContainer">
            <summary>
            The container class for storing entry data.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.GlossaryEntries.DTO.GlossaryEntryDTOContainer.ChildEntries">
            <summary>
            Gets or sets the collection of child entries.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.GlossaryEntries.DTO.GlossaryEntryDTOContainer.Entry">
            <summary>
            Gets or sets the glossary entry.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.GlossaryEntries.DTO.GlossaryEntryDTOContainer.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dataedo.Repository.Services.Features.GlossaryEntries.DTO.GlossaryEntryDTOContainer"></see> class.
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.GlossaryEntries.DTO.LinkedDataAssetDTO">
            <summary>
            The class providing information about data asset linked with glossary entry.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.GlossaryEntries.DTO.LinkedDataAssetDTO.Id">
            <summary>
            Gets or sets the identifier of object.
            </summary>
            <example>2</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.GlossaryEntries.DTO.LinkedDataAssetDTO.DisplayName">
            <summary>
            Gets or sets the base display name.
            </summary>
            <example>BG.Product</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.GlossaryEntries.DTO.LinkedDataAssetDTO.LinkedDataAssetClass">
            <summary>
            Gets or sets the class.
            
            <para>Valid values of Value property:</para>
            
            <list type="bullet">
            <item><para>"TABLE" - a table object;</para></item>
            <item><para>"VIEW" - a view object;</para></item>
            <item><para>"COLUMN" - a column object;</para></item>
            </list>
            </summary>
            <example>Value = TABLE, DisplayName = Table</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.GlossaryEntries.DTO.LinkedDataAssetDTO.LinkedDatabaseObject">
            <summary>
            Gets or sets the information about database object linked to entry (if linked data asset is database object).
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.GlossaryEntries.DTO.LinkedDataAssetDTO.LinkedColumn">
            <summary>
            Gets or sets the information about column linked to entry (if linked data asset is column).
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.GlossaryEntries.Extensions.GlossaryEntryDTOExtensions.SelectDTO(System.Collections.Generic.IEnumerable{Dataedo.Repository.EntityFrameworkModel.Models.GlossaryTerms},System.ValueTuple{System.Boolean,System.Collections.Generic.IEnumerable{System.Int32}},System.Collections.Generic.IEnumerable{Dataedo.Repository.EntityFrameworkModel.Models.CustomFields},Dataedo.Repository.Services.JoinDefinitions.GlossaryEntriesJoinsEnum.GlossaryEntryJoins[],System.Collections.Generic.Dictionary{System.Int32,System.Nullable{System.Int32}})">
            <summary>
            Gets queryable list of <see cref="T:Dataedo.Repository.Services.Features.Databases.DTO.DatabaseDTO"/> evaluated using parameters.
            </summary>
            <param name="source">The source <see cref="T:Dataedo.Repository.EntityFrameworkModel.Models.Databases"/> queryable list.</param>
            <param name="customFieldsDefinitions">Custom field definitions.</param>
            <param name="join">The array of names of data to load with objects.</param>
            <param name="parameters">The parameters providing selecting required set of data by skipping and limiting result items.</param>
            <returns>The queryable list of <see cref="T:Dataedo.Repository.Services.Features.Glossaries.DTO.GlossaryDTO"/> evaluated using parameters.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.GlossaryEntries.Extensions.GlossaryEntryDTOExtensions.SelectDTOWithExtendedParent(Dataedo.Repository.EntityFrameworkModel.Models.GlossaryTerms,System.Collections.Generic.IEnumerable{Dataedo.Repository.EntityFrameworkModel.Models.CustomFields},Dataedo.Repository.Services.JoinDefinitions.GlossaryEntriesJoinsEnum.GlossaryEntryJoins[],System.Nullable{System.Int32},System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Gets queryable list of <see cref="T:Dataedo.Repository.Services.Features.Databases.DTO.DatabaseDTO"/> evaluated using parameters. If join contains the parent entry then the parent entry objects has additional data.
            </summary>
            <param name="source">The source <see cref="T:Dataedo.Repository.EntityFrameworkModel.Models.Databases"/> queryable list.</param>
            <param name="customFieldsDefinitions">Custom field definitions.</param>
            <param name="join">The array of names of data to load with objects.</param>
            <param name="parameters">The parameters providing selecting required set of data by skipping and limiting result items.</param>
            <returns>The queryable list of <see cref="T:Dataedo.Repository.Services.Features.Glossaries.DTO.GlossaryDTO"/> evaluated using parameters.</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.GlossaryEntries.GlossaryEntryFiltersEnum">
            <summary>
            The class providing filter enumerations for filter parameters in controller methods.
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.GlossaryEntries.GlossaryEntryFiltersEnum.GlossaryEntryFilters">
            <summary>
            Specifies applicable data filters for glossary entries.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.GlossaryEntries.GlossaryEntryFiltersEnum.HasAnyItem``1(Dataedo.Repository.Services.Features.GlossaryEntries.GlossaryEntryFiltersEnum.GlossaryEntryFilters[],Dataedo.Repository.Services.Features.GlossaryEntries.GlossaryEntryFiltersEnum.GlossaryEntryFilters[])">
            <summary>
            Checks whether provided domain array has any element of items array.
            </summary>
            <typeparam name="T">The type of element of array of join parameter based on <see cref="T:System.Enum"></see> type.</typeparam>
            <param name="array">The domain array of values to check in.</param>
            <param name="items">The array of values to check whether any is domain array.</param>
            <returns><c>true</c> domain array has any element of items array; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.GlossaryEntries.Interfaces.IBaseGlossaryEntriesService">
            <summary>
            Represents object providing base actions for glossary entries.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.GlossaryEntries.Interfaces.IBaseGlossaryEntriesService.GetObjectsAsync(System.Int32,Dataedo.Repository.Services.JoinDefinitions.GlossaryEntriesJoinsEnum.GlossaryEntryJoins[],Dataedo.Repository.Services.Parameters.OffsetLimitFilterParameters{Dataedo.Repository.Services.Features.GlossaryEntries.GlossaryEntryFiltersEnum.GlossaryEntryFilters})">
            <summary>
            Gets the object which contains a collection of <see cref="T:Dataedo.Repository.Services.Features.Glossaries.DTO.GlossaryDTO"/> and <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDefinitionDTO"/>.
            </summary>
            <param name="id">The input object ID parameter.</param>
            <param name="join">The array of names of data to load with objects.</param>
            <param name="parameters">The parameters providing selecting required set of data by skipping and limiting result items.</param>
            <returns>The information about glossary entries linked to the database object.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.GlossaryEntries.Interfaces.IGlossaryEntriesService.GetObjectAsync(System.Int32,Dataedo.Repository.Services.JoinDefinitions.GlossaryEntriesJoinsEnum.GlossaryEntryJoins[])">
            <summary>
            Gets the object which contains a collection of <see cref="T:Dataedo.Repository.Services.Features.GlossaryEntries.DTO.GlossaryEntryDTO"/>.
            </summary>
            <param name="id">The ID of entry.</param>
            <param name="join">The array of names of data to load with object.</param>
            <returns>The <see cref="T:Dataedo.Repository.Services.Features.GlossaryEntries.DTO.GlossaryEntryDTO"/> object.</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.GlossaryEntryType.Builders.GlossaryEntryTypeDTOBuilder">
            <summary>
            The class providing building <see cref="T:Dataedo.Repository.Services.Features.GlossaryEntryType.Builders.GlossaryEntryTypeDTOBuilder"/>.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.GlossaryEntryType.Builders.GlossaryEntryTypeDTOBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dataedo.Repository.Services.Features.GlossaryEntryType.Builders.GlossaryEntryTypeDTOBuilder"/> class.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.GlossaryEntryType.Builders.GlossaryEntryTypeDTOBuilder.Build(Dataedo.Repository.EntityFrameworkModel.Models.GlossaryTermTypes,Dataedo.Repository.Services.JoinDefinitions.GlossaryEntryTypesJoinsEnum.GlossaryEntryTypesJoins[])">
            <summary>
            Builds <see cref="T:Dataedo.Repository.Services.Features.Glossaries.DTO.GlossaryDTO"/> object from <see cref="T:Dataedo.Repository.EntityFrameworkModel.Models.GlossaryTermTypes"/> object data using joins.
            </summary>
            <param name="data">The source data.</param>
            <param name="join">The array of names of data to load with object.</param>
            <returns>The <see cref="T:Dataedo.Repository.Services.Features.Glossaries.DTO.GlossaryDTO"/> object.</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.GlossaryEntryType.DTO.GlossaryEntryTypeDTO">
            <summary>
            The class providing information about type of glossary entry.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.GlossaryEntryType.DTO.GlossaryEntryTypeDTO.Id">
            <summary>
            Gets or sets the identifier of object.
            </summary>
            <example>1</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.GlossaryEntryType.DTO.GlossaryEntryTypeDTO.Code">
            <summary>
            Gets or sets the code identifying glossary entry type.
            </summary>
            <example>TERM</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.GlossaryEntryType.DTO.GlossaryEntryTypeDTO.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <example>Dataedo repository</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.GlossaryEntryType.DTO.GlossaryEntryTypeDTO.IconId">
            <summary>
            Gets or sets the ID of built-in entry icon.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.GlossaryEntryType.DTO.GlossaryEntryTypeDTO.Metadata">
            <summary>
            Gets or sets the record metadata (creation and modification information).
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.GlossaryEntryType.Interfaces.IGlossaryEntryTypesService">
            <summary>
            Represents object providing actions for glossary entries.
            </summary>
            
        </member>
        <member name="T:Dataedo.Repository.Services.Features.Keys.Builders.KeyDTOBuilder">
            <summary>
            The class providing building <see cref="T:Dataedo.Repository.Services.Features.Keys.DTO.KeyDTO"/>
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Keys.Builders.KeyDTOBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dataedo.Repository.Services.Features.Keys.Builders.KeyDTOBuilder"/> class.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Keys.Builders.KeyDTOBuilder.Build(Dataedo.Repository.EntityFrameworkModel.Models.UniqueConstraints,System.Collections.Generic.IEnumerable{Dataedo.Repository.EntityFrameworkModel.Models.CustomFields},Dataedo.Repository.Services.JoinDefinitions.KeysJoinsEnum.KeysJoins[])">
            <summary>
            
            </summary>
            <param name="uniqueConstraint">The source data.</param>
            <param name="definitions">Custom fields definitions.</param>
            <param name="join">The array of names of data to load with object.</param>
            <returns></returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.Keys.DTO.KeyDTO">
            <summary>
            The class providing information about key.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Keys.DTO.KeyDTO.Id">
            <summary>
            Gets or sets the identifier of object.
            </summary>
            <example>146</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Keys.DTO.KeyDTO.ParentDatabaseObjectId">
            <summary>
            Gets or sets the identifier of parent database object containing object.
            </summary>
            <example>1</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Keys.DTO.KeyDTO.ParentDatabaseObjectClass">
            <summary>
            Gets or sets the class of parent database object containing object.
            </summary>
            <example>TABLE</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Keys.DTO.KeyDTO.ParentDatabaseObject">
            <summary>
            Gets or sets the information object about parent database object containing key.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Keys.DTO.KeyDTO.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <example>PK_tables</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Keys.DTO.KeyDTO.Source">
            <summary>
            Gets or sets the source.
            
            <para>Valid values:</para>
            
            <list type="bullet">
            <item><para>"DBMS" - an object is imported;</para></item>
            <item><para>"USER" - an object is defined by user;</para></item>
            </list>
            </summary>
            <example>Value = USER, DisplayName = User</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Keys.DTO.KeyDTO.Status">
            <summary>
            Gets or sets the status of object existence in database.
            
            <para>Available values:</para>
            
            <list type="bullet">
            <item><para>"A" - an object exists in database;</para></item>
            <item><para>"D" - an object is deleted from database;</para></item>
            </list>
            </summary>
            <example>Value = A, DisplayName = Active</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Keys.DTO.KeyDTO.IsPrimaryKey">
            <summary>
            Gets or sets a value indicating whether key is primary key; otherwise key is a regular key.
            </summary>
            <example>true</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Keys.DTO.KeyDTO.IsDisabled">
            <summary>
            Gets or sets a value indicating whether key is disabled or active in DBMS.
            </summary>
            <example>false</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Keys.DTO.KeyDTO.Description">
            <summary>
            Gets or sets the description of object.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Keys.DTO.KeyDTO.CustomFields">
            <summary>
            Gets or sets the custom fields.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Keys.DTO.KeyDTO.Metadata">
            <summary>
            Gets or sets the metadata (creation and modification information) information.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Keys.DTO.KeyDTO.Columns">
            <summary>
            Gets or sets the collection of basic information about columns of key.
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.Keys.Enums.UniqueConstraintFiltersEnum.UniqueConstraintFilters">
            <summary>
            Specifies applicable data filters for unique constraints.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Keys.Enums.UniqueConstraintFiltersEnum.HasAnyItem``1(Dataedo.Repository.Services.Features.Keys.Enums.UniqueConstraintFiltersEnum.UniqueConstraintFilters[],Dataedo.Repository.Services.Features.Keys.Enums.UniqueConstraintFiltersEnum.UniqueConstraintFilters[])">
            <summary>
            Checks whether provided domain array has any element of items array.
            </summary>
            <typeparam name="T">The type of element of array of join parameter based on <see cref="T:System.Enum"></see> type.</typeparam>
            <param name="array">The domain array of values to check in.</param>
            <param name="items">The array of values to check whether any is domain array.</param>
            <returns><c>true</c> domain array has any element of items array; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.Keys.Extensions.KeyDTOExtensions">
            <summary>
            The class providing extensions for <see cref="T:Dataedo.Repository.Services.Features.Keys.DTO.KeyDTO"/> data.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Keys.Extensions.KeyDTOExtensions.SelectDTO(System.Collections.Generic.IEnumerable{Dataedo.Repository.EntityFrameworkModel.Models.UniqueConstraints},System.Collections.Generic.IEnumerable{Dataedo.Repository.EntityFrameworkModel.Models.CustomFields},Dataedo.Repository.Services.JoinDefinitions.KeysJoinsEnum.KeysJoins[])">
            <summary>
            Gets queryable list of <see cref="T:Dataedo.Repository.Services.Features.Keys.DTO.KeyDTO"/> evaluated using parameters.
            </summary>
            <param name="source">The source <see cref="T:Dataedo.Repository.EntityFrameworkModel.Models.UniqueConstraints"/> queryable list.</param>
            <param name="customFieldsDefinitions"></param>
            <param name="join">The array of names of data to load with objects.</param>
            <param name="parameters">The parameters providing selecting required set of data by skipping and limiting result items.</param>
            <returns>The queryable list of <see cref="T:Dataedo.Repository.Services.Features.Keys.DTO.KeyDTO"/> evaluated using parameters.</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.Keys.Interfaces.IKeysService">
            <summary>
            Represents object providing actions for key objects.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Keys.Interfaces.IKeysService.GetObjects(System.Int32,Dataedo.Repository.Services.JoinDefinitions.KeysJoinsEnum.KeysJoins[],Dataedo.Repository.Services.Parameters.OffsetLimitFilterParameters{Dataedo.Repository.Services.Features.Keys.Enums.UniqueConstraintFiltersEnum.UniqueConstraintFilters})">
            <summary>
            Gets collection of objects.
            </summary>
            <param name="parentId">The ID of parent object.</param>
            <param name="join">The array of names of data to load with objects.</param>
            <param name="parameters">The parameters providing selecting required set of data by skipping and limiting result items.</param>
            <returns>The information object about keys by parent ID.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Keys.Interfaces.IKeysService.GetObjectsByColumn(System.Int32,Dataedo.Repository.Services.JoinDefinitions.KeysJoinsEnum.KeysJoins[],Dataedo.Repository.Services.Parameters.OffsetLimitParameters)">
            <summary>
            Gets the object which contains a collection of <see cref="T:Dataedo.Repository.Services.Features.Keys.DTO.KeyDTO"/> of keys that column with provided ID is a part of this keys.
            </summary>
            <param name="columnId">The ID of column for getting keys where is is part of key.</param>
            <param name="join">The array of names of data to load with objects.</param>
            <param name="parameters">The parameters providing selecting required set of data by skipping and limiting result items.</param>
            <returns>The object which contains a collection of <see cref="T:Dataedo.Repository.Services.Features.Keys.DTO.KeyDTO"/> of keys that column with provided ID is a part of this keys.</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.Menus.Builders.DataDictionaryMenuNodeDTOBuilder">
            <summary>
            The class providing building <see cref="T:Dataedo.Repository.Services.Features.Menus.DTO.DataDictionaryMenuNodeDTO"></see>
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Menus.Builders.DataDictionaryMenuNodeDTOBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dataedo.Repository.Services.Features.Menus.Builders.DataDictionaryMenuNodeDTOBuilder"/> class.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Menus.Builders.DataDictionaryMenuNodeDTOBuilder.BuildFromDatabase(Dataedo.Repository.EntityFrameworkModel.QueryMappings.TreeQueryModel)">
            <summary>
            Builds an object which represents <see cref="T:Dataedo.Repository.Services.Features.Menus.DTO.DataDictionaryMenuNodeDTO"></see>.
            </summary>
            <param name="database">The input database node data of type <see cref="T:Dataedo.Repository.EntityFrameworkModel.Models.Databases"></see>.</param>
            <returns>Returns <see cref="T:Dataedo.Repository.Services.Features.Menus.DTO.DataDictionaryMenuNodeDTO"/></returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Menus.Builders.DataDictionaryMenuNodeDTOBuilder.BuildGlossary(Dataedo.Repository.EntityFrameworkModel.QueryMappings.TreeQueryModel)">
            <summary>
            Builds an object which represents <see cref="T:Dataedo.Repository.Services.Features.Menus.DTO.DataDictionaryMenuNodeDTO"></see>.
            </summary>
            <param name="database">The input glossary node data of type <see cref="T:Dataedo.Repository.EntityFrameworkModel.Models.Databases"></see>.</param>
            <returns>Returns <see cref="T:Dataedo.Repository.Services.Features.Menus.DTO.DataDictionaryMenuNodeDTO"/></returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Menus.Builders.DataDictionaryMenuNodeDTOBuilder.Build(Dataedo.Repository.EntityFrameworkModel.QueryMappings.TreeQueryModel,System.Int32,System.Nullable{System.Int32})">
            <summary>
            Builds an object which represents <see cref="T:Dataedo.Repository.Services.Features.Menus.DTO.DataDictionaryMenuNodeDTO"></see>.
            </summary>
            <param name="nodeData">The input node data of type <see cref="T:Dataedo.Repository.EntityFrameworkModel.Customization.Interfaces.IBaseDatabaseObjectTreeNode"></see>.</param>
            <returns>Returns <see cref="T:Dataedo.Repository.Services.Features.Menus.DTO.DataDictionaryMenuNodeDTO"/></returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Menus.Builders.DataDictionaryMenuNodeDTOBuilder.BuildGlossaryEntry(Dataedo.Repository.EntityFrameworkModel.QueryMappings.EntryTreeQueryModel,System.String)">
            <summary>
            Builds an object which represents <see cref="T:Dataedo.Repository.Services.Features.Menus.DTO.DataDictionaryMenuNodeDTO"></see>.
            </summary>
            <param name="nodeData">The input node data of type <see cref="T:Dataedo.Repository.EntityFrameworkModel.Models.GlossaryTerms"></see>.</param>
            <returns>Returns <see cref="T:Dataedo.Repository.Services.Features.Menus.DTO.DataDictionaryMenuNodeDTO"/></returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Menus.Builders.DataDictionaryMenuNodeDTOBuilder.BuildFolderNode(Dataedo.Shared.Enums.SharedObjectTypeEnum.ObjectType,System.Int32,System.Boolean,System.Int32)">
            <summary>
            Builds an object which represents folder node in a data dictionary menu.
            </summary>
            <param name="objectType">The input parameter of contained types of base database objects.</param>
            <param name="databaseId">The input parameter of a database ID.</param>
            <param name="hasSubnodes">The input parameter which indicates if node has a children.</param>
            <returns>An object which represents node in a data dictionary menu tree.</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.Menus.DTO.DataDictionaryMenuNodeDTO">
            <summary>
            The class providing data for building menu tree of data dictionary.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Menus.DTO.DataDictionaryMenuNodeDTO.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dataedo.Repository.Services.Features.Menus.DTO.DataDictionaryMenuNodeDTO"/> class.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Menus.DTO.DataDictionaryMenuNodeDTO.Class">
            <summary>
            Gets or sets the class of data dictionary object.
            </summary>
            <example>TABLE</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Menus.DTO.DataDictionaryMenuNodeDTO.Type">
            <summary>
            Gets or sets the type of data dictionary object.
            </summary>
            <example>EXTERNAL_TABLE</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Menus.DTO.DataDictionaryMenuNodeDTO.Status">
            <summary>
            Gets or sets the status of object existence in database.
            
            <para>Available values:</para>
            
            <list type="bullet">
            <item><para>"A" - an object exists in database;</para></item>
            <item><para>"D" - an object is deleted from database;</para></item>
            </list>
            </summary>
            <example>Value = A, DisplayName = Active</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Menus.DTO.DataDictionaryMenuNodeDTO.Source">
            <summary>
            Gets or sets the source.
            
            <para>Valid values:</para>
            
            <list type="bullet">
            <item><para>"DBMS" - an object is imported;</para></item>
            <item><para>"USER" - an object is defined by user;</para></item>
            </list>
            </summary>
            <example>DBMS</example>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.Menus.DTO.MenuNodeDTO">
            <summary>
            The class providing data for building menu tree.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Menus.DTO.MenuNodeDTO.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dataedo.Repository.Services.Features.Menus.DTO.MenuNodeDTO"/> class.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Menus.DTO.MenuNodeDTO.DisplayName">
            <summary>
            Gets or sets the display name of node in tree.
            </summary>
            <example>dbo.Databases (Documentations)</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Menus.DTO.MenuNodeDTO.Id">
            <summary>
            Gets or sets the unique in whole collection of nodes identifier of node.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Menus.DTO.MenuNodeDTO.NestingLevel">
            <summary>
            Gets or sets the value indicating how deep node is nested in tree.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Menus.DTO.MenuNodeDTO.HasSubnodes">
            <summary>
            Gets or sets whether node contains any subnodes.
            </summary>
            <example>true</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Menus.DTO.MenuNodeDTO.RootId">
            <summary>
            Gets or sets the root node unique identifier.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Menus.DTO.MenuNodeDTO.ObjectId">
            <summary>
            Gets or sets the value of database object ID.
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.Menus.DTO.MenuTreeDTO">
            <summary>
            An object which represents menu tree nodes.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Menus.DTO.MenuTreeDTO.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dataedo.Repository.Services.Features.Menus.DTO.MenuTreeDTO"></see>.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Menus.DTO.MenuTreeDTO.Count">
            <summary>
            Gets or sets the count of all expanded nodes with its children and root objects.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Menus.DTO.MenuTreeDTO.ExpandedNodesIds">
            <summary>
            Gets or sets the collection of expanded nodes IDs.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Menus.DTO.MenuTreeDTO.Nodes">
            <summary>
            Gets or sets the collection of nodes of type <see cref="T:Dataedo.Repository.Services.Features.Menus.DTO.DataDictionaryMenuNodeDTO"></see>.
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.Menus.Enums.DataDictionaryFiltersEnum">
            <summary>
            The class providing filter enumerations for filter parameters in controller methods for data dictionary tree.
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.Menus.Enums.DataDictionaryFiltersEnum.DataDictionaryFilters">
            <summary>
            Specifies applicable data filters for data dictionary tree.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.Features.Menus.Enums.DataDictionaryFiltersEnum.DataDictionaryFilters.DatabaseIn">
            <summary>
            The collection of identifiers of databases that result object should be contained in any represented database.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.Features.Menus.Enums.DataDictionaryFiltersEnum.DataDictionaryFilters.ClassIn">
            <summary>
            The collection of classes of objects that result object should be of any of provided types. 
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.Features.Menus.Enums.DataDictionaryFiltersEnum.DataDictionaryFilters.Name">
            <summary>
            The text value that display name of result object should contain.
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.Menus.Extensions.DataDictionaryMenuNodeDTOExtensions">
            <summary>
            The class providing extensions for <see cref="T:Dataedo.Repository.Services.Features.Menus.DTO.DataDictionaryMenuNodeDTO"/> data.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Menus.Extensions.DataDictionaryMenuNodeDTOExtensions.CommonDatabaseOperations(System.Linq.IQueryable{Dataedo.Repository.EntityFrameworkModel.QueryMappings.TreeQueryModel})">
            <summary>
            Gets queryable list of <see cref="T:Dataedo.Repository.Services.Features.Menus.DTO.DataDictionaryMenuNodeDTO"/> evaluated using parameters.
            </summary>
            <param name="source">The source <see cref="T:Dataedo.Repository.EntityFrameworkModel.Models.Databases"/> queryable list.</param>
            <returns>The queryable list of <see cref="T:Dataedo.Repository.Services.Features.Menus.DTO.DataDictionaryMenuNodeDTO"/> evaluated using parameters.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Menus.Extensions.DataDictionaryMenuNodeDTOExtensions.SelectDatabasesDTO(System.Collections.Generic.IEnumerable{Dataedo.Repository.EntityFrameworkModel.QueryMappings.TreeQueryModel})">
            <summary>
            Gets queryable list of <see cref="T:Dataedo.Repository.Services.Features.Menus.DTO.DataDictionaryMenuNodeDTO"/> evaluated using parameters.
            </summary>
            <param name="source">The source <see cref="T:Dataedo.Repository.EntityFrameworkModel.Models.Databases"/> queryable list.</param>
            <returns>The queryable list of <see cref="T:Dataedo.Repository.Services.Features.Menus.DTO.DataDictionaryMenuNodeDTO"/> evaluated using parameters.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Menus.Extensions.DataDictionaryMenuNodeDTOExtensions.CommonGlossaryOperations(System.Linq.IQueryable{Dataedo.Repository.EntityFrameworkModel.QueryMappings.TreeQueryModel})">
            <summary>
            Gets queryable list of <see cref="T:Dataedo.Repository.Services.Features.Menus.DTO.DataDictionaryMenuNodeDTO"/> evaluated using parameters.
            </summary>
            <param name="source">The source <see cref="T:Dataedo.Repository.EntityFrameworkModel.Models.Databases"/> queryable list.</param>
            <returns>The queryable list of <see cref="T:Dataedo.Repository.Services.Features.Menus.DTO.DataDictionaryMenuNodeDTO"/> evaluated using parameters.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Menus.Extensions.DataDictionaryMenuNodeDTOExtensions.SelectGlossariesDTO(System.Collections.Generic.IEnumerable{Dataedo.Repository.EntityFrameworkModel.QueryMappings.TreeQueryModel})">
            <summary>
            Gets queryable list of <see cref="T:Dataedo.Repository.Services.Features.Menus.DTO.DataDictionaryMenuNodeDTO"/> evaluated using parameters.
            </summary>
            <param name="source">The source <see cref="T:Dataedo.Repository.EntityFrameworkModel.Models.Databases"/> queryable list.</param>
            <returns>The queryable list of <see cref="T:Dataedo.Repository.Services.Features.Menus.DTO.DataDictionaryMenuNodeDTO"/> evaluated using parameters.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Menus.Extensions.DataDictionaryMenuNodeDTOExtensions.SelectDTO(System.Collections.Generic.IEnumerable{Dataedo.Repository.EntityFrameworkModel.QueryMappings.TreeQueryModel},System.Int32,System.Nullable{System.Int32})">
            <summary>
            Gets queryable list of <see cref="T:Dataedo.Repository.Services.Features.Menus.DTO.DataDictionaryMenuNodeDTO"/> evaluated using parameters.
            </summary>
            <param name="source">The source <see cref="T:Dataedo.Repository.EntityFrameworkModel.Customization.Interfaces.IBaseDatabaseObjectTreeNode"/> queryable list.</param>
            <param name="parameters">The parameters providing selecting required set of data by skipping and limiting result items.</param>
            <returns>The queryable list of <see cref="T:Dataedo.Repository.Services.Features.Menus.DTO.DataDictionaryMenuNodeDTO"/> evaluated using parameters.</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.Menus.Interfaces.IIdStringParser">
            <summary>
            Represents menu tree ID string parser object.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Menus.Interfaces.IIdStringParser.Parse(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets a collection of key value pair.
            The key is equal to the expanded node object id.
            The value is equal to the char which represents node object type.
            </summary>
            <param name="expandedNodeIds">The input parameter of expanded nodes IDs.</param>
            <returns>A dictionary of parsed expanded nodes</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.Menus.Interfaces.IInMemoryMenuTreeObjectService">
            <summary>
            Represents object providing actions for in memory menu tree objects.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Menus.Interfaces.IInMemoryMenuTreeObjectService.AddEmptyRootNodes">
            <summary>
            Gets the value indicating whether root nodes without subnodes should be in result.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Menus.Interfaces.IInMemoryMenuTreeObjectService.GetChildObjects(System.Nullable{System.Int32})">
            <summary>
            Returns a collection of child nodes of type <see cref="T:Dataedo.Repository.Services.Features.Menus.DTO.DataDictionaryMenuNodeDTO"/>.
            </summary>
            <param name="rootObjectId">The input ID parameter of the root object node.</param>
            <returns>A collection of nodes of type <see cref="T:Dataedo.Repository.Services.Features.Menus.DTO.DataDictionaryMenuNodeDTO"/>.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Dataedo.Repository.Services.Features.Menus.Interfaces.IInMemoryMenuTreeObjectService.GetRootObjects(System.ValueTuple{System.Boolean,System.Collections.Generic.IEnumerable{System.Int32}})" -->
        <member name="T:Dataedo.Repository.Services.Features.Menus.Interfaces.IMenusService">
            <summary>
            Represents object providing actions for menus.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Menus.Interfaces.IMenusService.GetOptimizedTree(Dataedo.Repository.Services.Features.Menus.TreeParameters{Dataedo.Repository.Services.Features.Menus.Enums.DataDictionaryFiltersEnum.DataDictionaryFilters},Dataedo.Repository.Services.Features.Menus.Enums.OptimizedTreeEnum,System.Boolean)">
            <summary>
            Gets the collection of database object nodes.
            </summary>
            /// <param name="treeParameters">
            The parameters providing selecting required set of data by skipping and limiting result items, filtering.
            The parameter also provides collection of identifiers of nodes that are expanded so their subnodes are also processed.
            </param>
            <returns>The collection which represents database objects in a tree format.</returns>
        </member>
        <!-- Badly formed XML comment ignored for member "M:Dataedo.Repository.Services.Features.Menus.Interfaces.IMenusService.GetInMemoryTree(Dataedo.Repository.Services.Features.Menus.Enums.InMemoryMenuTreeType)" -->
        <member name="T:Dataedo.Repository.Services.Features.Menus.Interfaces.ITreeService">
            <summary>
            Represents object providing actions for menu tree.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Menus.Interfaces.ITreeService.VisibleObjectsCount">
            <summary>
            Gets or sets the count value of all expanded nodes children nodes.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Menus.Interfaces.ITreeService.ForcedExpandedNodesIDs">
            <summary>
            Gets or sets the list of nodes which are forced to be expanded.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Menus.Interfaces.ITreeService.GetRootObjects">
            <summary>
            Returns a collection of root objects.
            </summary>
            <returns>A collection of <see cref="T:Dataedo.Repository.Services.Features.Menus.DTO.DataDictionaryMenuNodeDTO"></see>.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Menus.Interfaces.ITreeService.GetChildrenObjectsInfo(Dataedo.Repository.Services.Features.Menus.TreeParameters{Dataedo.Repository.Services.Features.Menus.Enums.DataDictionaryFiltersEnum.DataDictionaryFilters},Dataedo.Repository.Services.Features.Menus.DTO.DataDictionaryMenuNodeDTO,System.Collections.Generic.Dictionary{System.String,System.Collections.Generic.List{System.Int32}})">
            <summary>
            Returns a collection of nodes. If node is a folder node which is expanded then it also returns it's children.
            The function also modifies information about subnodes of current root node.
            </summary>
            <param name="parameters">The input tree parameters.</param>
            <param name="rootObject">The input documentation node parameter.</param>
            <param name="expandedNodes">The input dictionary of expanded nodes</param>
            <returns>A collection of nodes of type <see cref="T:Dataedo.Repository.Services.Features.Menus.DTO.DataDictionaryMenuNodeDTO"></see>.</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.Menus.Tools.BaseIdStringParser">
            <summary>
            The base class providing actions for parsing nodes IDs.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.Features.Menus.Tools.BaseIdStringParser.objectIdentifiers">
            <summary>
            The collection of data dictionary object identifiers
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Menus.Tools.BaseIdStringParser.Parse(System.Collections.Generic.IEnumerable{System.String})">
            <summary>
            Gets a collection of key value pair.
            The key is equal to database id.
            The value is equal to the char which represents data dictionary node.
            </summary>
            <param name="expandedNodeIds">The input parameter of expanded nodes IDs.</param>
            <returns>A dictionary of parsed data dictionary folder nodes</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.Menus.Tools.BaseNodeServiceOperations">
            <summary>
            The service class providing a base actions for menu tree nodes.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Menus.Tools.BaseNodeServiceOperations.ModifyLocalOffset(Dataedo.Repository.Services.Parameters.OffsetLimitParameters,System.Int32)">
            <summary>
            Modifies local offset parameter.
            </summary>
            <param name="parameters">The input parameter which contains offset value.</param>
            <param name="offsetModifier">An integer which modifies offset value.</param>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Menus.Tools.BaseNodeServiceOperations.ModifyLocalLimit(Dataedo.Repository.Services.Parameters.OffsetLimitParameters,System.Int32)">
            <summary>
            Modifies local limit parameter.
            </summary>
            <param name="parameters">The input parameter which contains limit value.</param>
            <param name="limitModifier">An integer which modifies limit value.</param>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Menus.Tools.BaseNodeServiceOperations.AppendNode(Dataedo.Repository.Services.Parameters.OffsetLimitParameters)">
            <summary>
            Indicates whether append node to the tree.
            </summary>
            <param name="parameters">The input parameter of local offset and limit.</param>
            <returns>A boolean value based on input parameters.</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.Menus.Tools.DataDictionaryIdStringParser">
            <summary>
            The class providing actions for data dictionary tree node parsing.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Menus.Tools.DataDictionaryIdStringParser.#ctor">
            <summary>
            Initializes a new instance of <see cref="T:Dataedo.Repository.Services.Features.Menus.Tools.DataDictionaryIdStringParser"></see> class.
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.Menus.Tools.StringIDPrefixes">
            <summary>
            The class providing prefixes of a menu tree nodes.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.Features.Menus.Tools.StringIDPrefixes.DatabaseFolderIdentifier">
            <summary>
            The char which represents database folder.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.Features.Menus.Tools.StringIDPrefixes.TablesFolderIdentifier">
            <summary>
            The char which represents tables folder.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.Features.Menus.Tools.StringIDPrefixes.ViewsFolderIdentifier">
            <summary>
            The char which represents views folder.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.Features.Menus.Tools.StringIDPrefixes.ProceduresFolderIdentifier">
            <summary>
            The char which represents procedures folder.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.Features.Menus.Tools.StringIDPrefixes.FunctionsFolderIdentifier">
            <summary>
            The char which represents functions folder.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.Features.Menus.Tools.StringIDPrefixes.GlossaryIdentifier">
            <summary>
            The char which represents glossary.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.Features.Menus.Tools.StringIDPrefixes.TermIdentifier">
            <summary>
            The char which represents term.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.Features.Menus.Tools.StringIDPrefixes.PolicyIdentifier">
            <summary>
            The char which represents policy.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.Features.Menus.Tools.StringIDPrefixes.RuleIdentifier">
            <summary>
            The char which represents rule.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.Features.Menus.Tools.StringIDPrefixes.CategoryIdentifier">
            <summary>
            The char which represents category.
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.Menus.TreeParameters`1">
            <summary>
            The class providing common input parameters for tree actions for getting nodes representing tree.
            </summary>
            <typeparam name="TFilterKey">The type of key representing filtering method for filtering by value.</typeparam>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Menus.TreeParameters`1.ExpandedNodesIds">
            <summary>
            Gets or sets the collection of expanded nodes IDs.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Menus.TreeParameters`1.ExpandAllNodes">
            <summary>
            Gets or sets a value indicating whether all nodes are forced to be expanded.
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.Relationships.Builders.RelationshipColumnPairsDTOBuilder">
            <summary>
            The class providing building <see cref="T:Dataedo.Repository.Services.Features.Relationships.Builders.RelationshipColumnPairsDTOBuilder"/>
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Relationships.Builders.RelationshipColumnPairsDTOBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dataedo.Repository.Services.Features.Relationships.Builders.RelationshipColumnPairsDTOBuilder"/> class.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Relationships.Builders.RelationshipColumnPairsDTOBuilder.Build(Dataedo.Repository.EntityFrameworkModel.Models.TablesRelationsColumns,Dataedo.Repository.Services.JoinDefinitions.RelationshipsJoinsEnum.RelationshipsJoins[])">
            <summary>
            Builds an object of type <see cref="T:Dataedo.Repository.Services.Features.Relationships.DTO.RelationshipColumnPairsDTO"/>.
            </summary>
            <param name="column">The input columns pair parameter.</param>
            <param name="join">The array of names of data to load with object.</param>
            <returns>The information about relationship column pair.</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.Relationships.Builders.RelationshipColumnPairsDTOCollectionBuilder">
            <summary>
            The class providing building a collection of <see cref="T:Dataedo.Repository.Services.Features.Relationships.Builders.RelationshipColumnPairsDTOBuilder"/>
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Relationships.Builders.RelationshipColumnPairsDTOCollectionBuilder.Build(Dataedo.Repository.EntityFrameworkModel.Models.TablesRelations,Dataedo.Repository.Services.JoinDefinitions.RelationshipsJoinsEnum.RelationshipsJoins[])">
            <summary>
            Builds a collection of <see cref="T:Dataedo.Repository.Services.Features.Relationships.DTO.RelationshipColumnPairsDTO"/>.
            </summary>
            <param name="relation">The input parameter of relationship.</param>
            <param name="join">The array of names of data to load with object.</param>
            <returns>A collection of objects of type <see cref="T:Dataedo.Repository.Services.Features.Relationships.DTO.RelationshipColumnPairsDTO"/>.</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.Relationships.Builders.RelationshipDTOBuilder">
            <summary>
            The class providing building <see cref="T:Dataedo.Repository.Services.Features.Relationships.DTO.RelationshipDTO"/>
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Relationships.Builders.RelationshipDTOBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dataedo.Repository.Services.Features.Relationships.Builders.RelationshipDTOBuilder"/> class.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Relationships.Builders.RelationshipDTOBuilder.Build(Dataedo.Repository.EntityFrameworkModel.Models.TablesRelations,System.Collections.Generic.IEnumerable{Dataedo.Repository.EntityFrameworkModel.Models.CustomFields},System.Boolean,System.Boolean,Dataedo.Repository.Services.JoinDefinitions.RelationshipsJoinsEnum.RelationshipsJoins[])">
            <summary>
            Builds an object of type <see cref="T:Dataedo.Repository.Services.Features.Relationships.DTO.RelationshipDTO"/>.
            </summary>
            <param name="relation">The source data.</param>
            <param name="definitions">Custom fields definitions.</param>
            <param name="join">The array of names of data to load with object.</param>
            <returns>The information about relationship object.</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.Relationships.DTO.RelationshipColumnPairsDTO">
            <summary>
            The class providing information about column pair of relationship.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Relationships.DTO.RelationshipColumnPairsDTO.Id">
            <summary>
            Gets or sets the identifier of column pair of relationship record.
            </summary>
            <example>146</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Relationships.DTO.RelationshipColumnPairsDTO.RelationshipId">
            <summary>
            Gets or sets the identifier of parent relationship consists of column pair.
            </summary>
            <example>646</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Relationships.DTO.RelationshipColumnPairsDTO.Relationship">
            <summary>
            Gets or sets the information object about relationship consists of column pair.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Relationships.DTO.RelationshipColumnPairsDTO.ForeignColumnId">
            <summary>
            Gets or sets the identifier of relation foreign column.
            </summary>
            <example>1</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Relationships.DTO.RelationshipColumnPairsDTO.ForeignColumn">
            <summary>
            Gets or sets the information object about relation foreign column.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Relationships.DTO.RelationshipColumnPairsDTO.PrimaryColumnId">
            <summary>
            Gets or sets the identifier of relation primary column.
            </summary>
            <example>1</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Relationships.DTO.RelationshipColumnPairsDTO.PrimaryColumn">
            <summary>
            Gets or sets the information object about relation primary column.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Relationships.DTO.RelationshipColumnPairsDTO.OrdinalPosition">
            <summary>
            Gets or sets the position of column pair in relationship.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Relationships.DTO.RelationshipColumnPairsDTO.Status">
            <summary>
            Gets or sets the status of object existence in database.
            
            <para>Available values:</para>
            
            <list type="bullet">
            <item><para>"A" - an object exists in database;</para></item>
            <item><para>"D" - an object is deleted from database;</para></item>
            </list>
            </summary>
            <example>Value = A, DisplayName = Active</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Relationships.DTO.RelationshipColumnPairsDTO.Metadata">
            <summary>
            Gets or sets the metadata (creation and modification information) information.
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.Relationships.DTO.RelationshipDTO">
            <summary>
            The class providing information about relationship.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Relationships.DTO.RelationshipDTO.Id">
            <summary>
            Gets or sets the identifier of relationship.
            </summary>
            <example>146</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Relationships.DTO.RelationshipDTO.ForeignDatabaseObjectId">
            <summary>
            Gets or sets the identifier of relation foreign database object.
            </summary>
            <example>1</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Relationships.DTO.RelationshipDTO.ForeignDatabaseObjectClass">
            <summary>
            Gets or sets the class of relation foreign database object.
            </summary>
            <example>TABLE</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Relationships.DTO.RelationshipDTO.ForeignDatabaseObject">
            <summary>
            Gets or sets the information object about relation foreign database object.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Relationships.DTO.RelationshipDTO.ForeignKeyCardinality">
            <summary>
            Gets or sets the foreign key table cardinality.
            
            <para>Valid values:</para>
            
            <list type="bullet">
            <item><para>"MANY" - a many number of occurrences in one entity;</para></item>
            <item><para>"ONE" - a one occurrence in one entity; </para></item>
            </list>
            </summary>
            <example>MANY</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Relationships.DTO.RelationshipDTO.PrimaryDatabaseObjectId">
            <summary>
            Gets or sets the identifier of relation primary database object.
            </summary>
            <example>1</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Relationships.DTO.RelationshipDTO.PrimaryDatabaseObjectClass">
            <summary>
            Gets or sets the class of relation primary database object.
            </summary>
            <example>TABLE</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Relationships.DTO.RelationshipDTO.PrimaryDatabaseObject">
            <summary>
            Gets or sets the information object about relation primary database object.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Relationships.DTO.RelationshipDTO.PrimaryKeyCardinality">
            <summary>
            Gets or sets the primary key table cardinality.
            
            <para>Valid values:</para>
            
            <list type="bullet">
            <item><para>"ONE" - a one occurrence in one entity; </para></item>
            </list>
            </summary>
            <example>ONE</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Relationships.DTO.RelationshipDTO.RelationshipColumns">
            <summary>
            Gets or sets the collection of column pairs of relationship.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Relationships.DTO.RelationshipDTO.Name">
            <summary>
            Gets or sets the name.
            </summary>
            <example>FK_tables_relations_table_fk</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Relationships.DTO.RelationshipDTO.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <example>Foreign table</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Relationships.DTO.RelationshipDTO.Source">
            <summary>
            Gets or sets the source.
            
            <para>Valid values:</para>
            
            <list type="bullet">
            <item><para>"DBMS" - an object is imported;</para></item>
            <item><para>"USER" - an object is defined by user;</para></item>
            </list>
            </summary>
            <example>Value = USER, DisplayName = User</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Relationships.DTO.RelationshipDTO.Status">
            <summary>
            Gets or sets the status of object existence in database.
            
            <para>Available values:</para>
            
            <list type="bullet">
            <item><para>"A" - an object exists in database;</para></item>
            <item><para>"D" - an object is deleted from database;</para></item>
            </list>
            </summary>
            <example>Value = A, DisplayName = Active</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Relationships.DTO.RelationshipDTO.IsDisabled">
            <summary>
            Gets or sets a value indicating whether key is disabled or active in DBMS.
            </summary>
            <example>false</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Relationships.DTO.RelationshipDTO.Description">
            <summary>
            Gets or sets the description of object.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Relationships.DTO.RelationshipDTO.CustomFields">
            <summary>
            Gets or sets the custom fields.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Relationships.DTO.RelationshipDTO.Metadata">
            <summary>
            Gets or sets the metadata (creation and modification information) information.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Relationships.DTO.RelationshipDTO.DisplayName">
            <summary>
            Gets or sets the base display name.
            </summary>
            <example>Foreign table</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Relationships.DTO.RelationshipDTO.UpdateRule">
            <summary>
            Gets or sets the update rule defined in DBMS: NO ACTION, SET NULL, CASCADE.
            </summary>
            <example>NO_ACTION</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Relationships.DTO.RelationshipDTO.DeleteRule">
            <summary>
            Gets or sets the delete rule defined in DBMS: NO ACTION, SET NULL, CASCADE.
            </summary>
            <example>CASCADE</example>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.Relationships.Enums.RelationshipTypeEnum">
            <summary>
            Providing information about parent object's relationship side.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.Features.Relationships.Enums.RelationshipTypeEnum.Referencing">
            <summary>
            The relationship type where parent table/view is primary table.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.Features.Relationships.Enums.RelationshipTypeEnum.Referenced">
            <summary>
            The relationship type where parent table/view is foreign table.
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.Relationships.Extensions.RelationshipDTOExtensions">
            <summary>
            The class providing extensions for <see cref="T:Dataedo.Repository.Services.Features.Relationships.DTO.RelationshipDTO"/> data.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Relationships.Extensions.RelationshipDTOExtensions.SelectReferencedDTO(System.Collections.Generic.IEnumerable{Dataedo.Repository.EntityFrameworkModel.Models.TablesRelations},System.Collections.Generic.IEnumerable{Dataedo.Repository.EntityFrameworkModel.Models.CustomFields},Dataedo.Repository.Services.JoinDefinitions.RelationshipsJoinsEnum.RelationshipsJoins[])">
            <summary>
            Gets queryable list of <see cref="T:Dataedo.Repository.Services.Features.Relationships.DTO.RelationshipDTO"/> evaluated using parameters.
            </summary>
            <param name="source">The source <see cref="T:Dataedo.Repository.EntityFrameworkModel.Models.TablesRelations"/> queryable list.</param>
            <param name="customFieldsDefinitions">Custom field definitions.</param>
            <param name="join">The array of names of data to load with objects.</param>
            <returns>The queryable list of <see cref="T:Dataedo.Repository.Services.Features.Relationships.DTO.RelationshipDTO"/> evaluated using parameters.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Relationships.Extensions.RelationshipDTOExtensions.SelectReferencingDTO(System.Collections.Generic.IEnumerable{Dataedo.Repository.EntityFrameworkModel.Models.TablesRelations},System.Collections.Generic.IEnumerable{Dataedo.Repository.EntityFrameworkModel.Models.CustomFields},Dataedo.Repository.Services.JoinDefinitions.RelationshipsJoinsEnum.RelationshipsJoins[])">
            <summary>
            Gets queryable list of <see cref="T:Dataedo.Repository.Services.Features.Relationships.DTO.RelationshipDTO"/> evaluated using parameters.
            </summary>
            <param name="source">The source <see cref="T:Dataedo.Repository.EntityFrameworkModel.Models.TablesRelations"/> queryable list.</param>
            <param name="customFieldsDefinitions">Custom field definitions.</param>
            <param name="join">The array of names of data to load with objects.</param>
            <returns>The queryable list of <see cref="T:Dataedo.Repository.Services.Features.Relationships.DTO.RelationshipDTO"/> evaluated using parameters.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Relationships.Extensions.RelationshipDTOExtensions.SelectDTO(Dataedo.Repository.EntityFrameworkModel.Models.TablesRelations,System.Collections.Generic.IEnumerable{Dataedo.Repository.EntityFrameworkModel.Models.CustomFields},Dataedo.Repository.Services.JoinDefinitions.RelationshipsJoinsEnum.RelationshipsJoins[])">
            <summary>
            Gets <see cref="T:Dataedo.Repository.Services.Features.Relationships.DTO.RelationshipDTO"/> evaluated using parameters.
            </summary>
            <param name="source">The source <see cref="T:Dataedo.Repository.EntityFrameworkModel.Models.TablesRelations"/> object.</param>
            <param name="customFieldsDefinitions">The custom field definitions.</param>
            <param name="join">The array of names of data to load with objects.</param>
            <returns>The <see cref="T:Dataedo.Repository.Services.Features.Relationships.DTO.RelationshipDTO"/> evaluated using parameters.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Relationships.Extensions.RelationshipDTOExtensions.SelectExternalRelationships(System.Linq.IQueryable{Dataedo.Repository.EntityFrameworkModel.Models.TablesRelations},System.Nullable{System.Boolean})">
            <summary>
            The method requires including FkTable object and PkTable object.
            </summary>
            <param name="source"></param>
            <param name="showExternal"></param>
            <returns></returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.Relationships.Interfaces.IRelatioshipsService">
            <summary>
            Represents object providing actions for relationships objects.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Relationships.Interfaces.IRelatioshipsService.GetObjectsByColumn(System.Int32,Dataedo.Repository.Services.JoinDefinitions.RelationshipsJoinsEnum.RelationshipsJoins[],Dataedo.Repository.Services.Parameters.OffsetLimitParameters)">
            <summary>
            Gets collection of objects.
            </summary>
            <param name="parentId">The ID of parent object.</param>
            <param name="join">The array of names of data to load with objects.</param>
            <param name="parameters">The parameters providing selecting required set of data by skipping and limiting result items.</param>
            <returns>The information object about relationships by parent ID.</returns>
            <summary>
            Gets the object containing collection of relationships that consists of column with provided ID as column.
            <para>Depending on implementation column used for filtering may be e.g. referenced or referencing in relationship.</para>
            </summary>
            <param name="columnId">The ID of column.</param>
            <param name="join">The array of names of data to load with objects.</param>
            <param name="parameters">The parameters providing selecting required set of data by skipping, limiting, filtering result items.</param>
            <returns>The object containing collection of relationships that consists of column with provided ID as column.</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.Relationships.RelationshipFiltersEnum.RelationshipFilters">
            <summary>
            Specifies applicable data filters for procedures.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Relationships.RelationshipFiltersEnum.HasAnyItem``1(Dataedo.Repository.Services.JoinDefinitions.RelationshipsJoinsEnum.RelationshipsJoins[],Dataedo.Repository.Services.JoinDefinitions.RelationshipsJoinsEnum.RelationshipsJoins[])">
            <summary>
            Checks whether provided domain array has any element of items array.
            </summary>
            <typeparam name="T">The type of element of array of join parameter based on <see cref="T:System.Enum"></see> type.</typeparam>
            <param name="array">The domain array of values to check in.</param>
            <param name="items">The array of values to check whether any is domain array.</param>
            <returns><c>true</c> domain array has any element of items array; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.Search.Builders.AssetTypeFilterDTOBuilder">
            <summary>
            <see cref="T:Dataedo.Repository.Services.Features.Search.DTO.AssetTypeFilterDTO"/> builder.
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.Search.Builders.DataSourceTypeFilterDTOBuilder">
            <summary>
            <see cref="T:Dataedo.Repository.Services.Features.Search.Builders.DataSourceTypeFilterDTOBuilder"/> builder.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Search.Builders.DataSourceTypeFilterDTOBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dataedo.Repository.Services.Features.Search.Builders.DataSourceTypeFilterDTOBuilder"/> class.
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.Search.Builders.PlatformFilterDTOBuilder">
            <summary>
            <see cref="T:Dataedo.Repository.Services.Features.Search.DTO.PlatformFilterDTO"/> builder.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Search.Builders.PlatformFilterDTOBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dataedo.Repository.Services.Features.Databases.Builders.DatabaseFilterDTOBuilder"/> class.
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.Search.Builders.SearchDTOBuilder">
            <summary>
            <see cref="T:Dataedo.Repository.Services.Features.Search.DTO.SearchDTO"/> builder.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Search.Builders.SearchDTOBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dataedo.Repository.Services.Features.Search.Builders.SearchDTOBuilder"/> class.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Search.Builders.SearchDTOBuilder.Build(Dataedo.Repository.EntityFrameworkModel.QueryMappings.SearchModel)">
            <summary>
            Builds <see cref="T:Dataedo.Repository.Services.Features.Search.DTO.SearchDTO"/> object from <see cref="T:Dataedo.Repository.EntityFrameworkModel.QueryMappings.SearchModel"/> object data.
            </summary>
            <param name="model">The source data.</param>
            <returns>Returns <see cref="T:Dataedo.Repository.EntityFrameworkModel.QueryMappings.SearchModel"/> data transfer object.</returns>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Search.DTO.DatabaseFilterDTO.Dbms">
            <summary>
            Gets or sets the type of database.
            
            <para>Valid values:</para>
            
            <list type="bullet">
            <item><para>"AURORA" - an Aurora database;</para></item>
            <item><para>"AURORA_POSTGRESQL" - an Aurora PostgreSQL database;</para></item>
            <item><para>"AZURE_SQL_DATABASE" - a Azure SQL Database database;</para></item>
            <item><para>"AZURE_SQL_DATA_WAREHOUSE" - a Azure SQL DataWarehouse database;</para></item>
            <item><para>"DB2" - a DB2 database;</para></item>
            <item><para>"IBM_DB2_Big_Query" - a IBM DB2 Big Query database;</para></item>
            <item><para>"MANUAL" - a Manual (user-defined) database;</para></item>
            <item><para>"MARIADB" - a MariaDB database;</para></item>
            <item><para>"MYSQL" - a MySQL database;</para></item>
            <item><para>"MYSQL8" - a MySQL 8 database;</para></item>
            <item><para>"ODBC" - a database imported using ODBC;</para></item>
            <item><para>"ORACLE" - a Oracle database;</para></item>
            <item><para>"PERCONA_MYSQL" - a Percona MySQL database;</para></item>
            <item><para>"PERCONA_MYSQL8" - a Percona MySQL 8 database;</para></item>
            <item><para>"POSTGRESQL" - a PostgreSQL database;</para></item>
            <item><para>"REDSHIFT" - a Redshift database;</para></item>
            <item><para>"SNOWFLAKE" - a Snowflake database;</para></item>
            <item><para>"SQLSERVER" - a SQL Server (general) database;</para></item>
            <item><para>"SQLSERVER_2000" - a SQL Server 2000 database;</para></item>
            </list>
            </summary>
            <example>SQLSERVER</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Search.DTO.PlatformFilterDTO.Dbms">
            <summary>
            Gets or sets the type of database.
            
            <para>Valid values:</para>
            
            <list type="bullet">
            <item><para>"AURORA" - an Aurora database;</para></item>
            <item><para>"AURORA_POSTGRESQL" - an Aurora PostgreSQL database;</para></item>
            <item><para>"AZURE_SQL_DATABASE" - a Azure SQL Database database;</para></item>
            <item><para>"AZURE_SQL_DATA_WAREHOUSE" - a Azure SQL DataWarehouse database;</para></item>
            <item><para>"DB2" - a DB2 database;</para></item>
            <item><para>"IBM_DB2_Big_Query" - a IBM DB2 Big Query database;</para></item>
            <item><para>"MANUAL" - a Manual (user-defined) database;</para></item>
            <item><para>"MARIADB" - a MariaDB database;</para></item>
            <item><para>"MYSQL" - a MySQL database;</para></item>
            <item><para>"MYSQL8" - a MySQL 8 database;</para></item>
            <item><para>"ODBC" - a database imported using ODBC;</para></item>
            <item><para>"ORACLE" - a Oracle database;</para></item>
            <item><para>"PERCONA_MYSQL" - a Percona MySQL database;</para></item>
            <item><para>"PERCONA_MYSQL8" - a Percona MySQL 8 database;</para></item>
            <item><para>"POSTGRESQL" - a PostgreSQL database;</para></item>
            <item><para>"REDSHIFT" - a Redshift database;</para></item>
            <item><para>"SNOWFLAKE" - a Snowflake database;</para></item>
            <item><para>"SQLSERVER" - a SQL Server (general) database;</para></item>
            <item><para>"SQLSERVER_2000" - a SQL Server 2000 database;</para></item>
            </list>
            </summary>
            <example>SQLSERVER</example>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.Search.DTO.SearchDTO">
            <summary>
            The class providing information about searched objects.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Search.DTO.SearchDTO.Class">
            <summary>
            Gets or sets the class DTO.
            
            <para>Valid values of Value property:</para>
            
            <list type="bullet">
            <item><para>"TABLE" - a table object;</para></item>
            <item><para>"VIEW" - a view object;</para></item>
            <item><para>"PROCEDURE" - a procedure object;</para></item>
            <item><para>"FUNCTION" - a function object;</para></item>
            </list>
            </summary>
            <example>Value = TABLE, DisplayName = Table</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Search.DTO.SearchDTO.Type">
            <summary>
            Gets or sets the type.
            </summary>
            <example>Value = TABLE, DisplayName = Table</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Search.DTO.SearchDTO.DisplayName">
            <summary>
            Gets or sets the name.
            </summary>
            <example>tables</example>
            
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Search.DTO.SearchDTO.ParentClass">
            <summary>
            Gets or sets the parent object class DTO.
            
            <para>Valid values of Value property:</para>
            
            <list type="bullet">
            <item><para>"TABLE" - a table object;</para></item>
            <item><para>"VIEW" - a view object;</para></item>
            <item><para>"PROCEDURE" - a procedure object;</para></item>
            <item><para>"FUNCTION" - a function object;</para></item>
            </list>
            </summary>
            <example>Value = TABLE, DisplayName = Table</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Search.DTO.SearchDTO.ParentSource">
            <summary>
            Gets or sets the parent object source.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Search.DTO.SearchDTO.ParentStatus">
            <summary>
            Gets or sets the parent object status.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Search.DTO.SearchDTO.ParentName">
            <summary>
            Gets or sets the parent object name.
            </summary>
            <example>tables</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Search.DTO.SearchDTO.DatabaseType">
            <summary>
            Gets or sets the type of database.
            
            <para>Valid values:</para>
            
            <list type="bullet">
            <item><para>"AURORA" - an Aurora database;</para></item>
            <item><para>"AURORA_POSTGRESQL" - an Aurora PostgreSQL database;</para></item>
            <item><para>"AZURE_SQL_DATABASE" - a Azure SQL Database database;</para></item>
            <item><para>"AZURE_SQL_DATA_WAREHOUSE" - a Azure SQL DataWarehouse database;</para></item>
            <item><para>"DB2" - a DB2 database;</para></item>
            <item><para>"IBM_DB2_Big_Query" - a IBM DB2 Big Query database;</para></item>
            <item><para>"MANUAL" - a Manual (user-defined) database;</para></item>
            <item><para>"MARIADB" - a MariaDB database;</para></item>
            <item><para>"MYSQL" - a MySQL database;</para></item>
            <item><para>"MYSQL8" - a MySQL 8 database;</para></item>
            <item><para>"ODBC" - a database imported using ODBC;</para></item>
            <item><para>"ORACLE" - a Oracle database;</para></item>
            <item><para>"PERCONA_MYSQL" - a Percona MySQL database;</para></item>
            <item><para>"PERCONA_MYSQL8" - a Percona MySQL 8 database;</para></item>
            <item><para>"POSTGRESQL" - a PostgreSQL database;</para></item>
            <item><para>"REDSHIFT" - a Redshift database;</para></item>
            <item><para>"SNOWFLAKE" - a Snowflake database;</para></item>
            <item><para>"SQLSERVER" - a SQL Server (general) database;</para></item>
            <item><para>"SQLSERVER_2000" - a SQL Server 2000 database;</para></item>
            </list>
            </summary>
            <example>SQLSERVER</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Search.DTO.SearchDTO.DatabaseName">
            <summary>
            Gets or sets the database object name.
            </summary>
            <example>tables</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Search.DTO.SearchDTO.ParentId">
            <summary>
            Gets or sets the parent object Id. For relationships it takes fk object as a parent.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Search.DTO.SearchDTO.Source">
            <summary>
            Gets or sets the source.
            
            <para>Valid values:</para>
            
            <list type="bullet">
            <item><para>"DBMS" - an object is imported;</para></item>
            <item><para>"USER" - an object is defined by user;</para></item>
            </list>
            </summary>
            <example>Value = USER, DisplayName = User</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.Search.DTO.SearchDTO.Status">
            <summary>
            Gets or sets the status of object existence in database.
            
            <para>Available values:</para>
            
            <list type="bullet">
            <item><para>"A" - an object exists in database;</para></item>
            <item><para>"D" - an object is deleted from database;</para></item>
            </list>
            </summary>
            <example>Value = A, DisplayName = Active</example>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Search.Extensions.AssetTypeFilterDTOExtensions.SelectDTO(System.Linq.IQueryable{Dataedo.Repository.EntityFrameworkModel.QueryMappings.AssetTypeFilter})">
            <summary>
            Gets queryable list of <see cref="T:Dataedo.Repository.Services.Features.Search.DTO.AssetTypeFilterDTO"/> evaluated using parameters.
            </summary>
            <param name="source">The source <see cref="T:Dataedo.Repository.EntityFrameworkModel.QueryMappings.AssetTypeFilter"/> list.</param>
            <returns>The list of <see cref="T:Dataedo.Repository.Services.Features.Search.DTO.AssetTypeFilterDTO"/> evaluated using parameters.</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.Search.Extensions.PlatformFilterDTOExtensions">
            <summary>
            The class providing extensions for <see cref="T:Dataedo.Repository.Services.Features.Search.DTO.AssetTypeFilterDTO"/> data.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Search.Extensions.PlatformFilterDTOExtensions.SelectDTO(System.Linq.IQueryable{Dataedo.Repository.EntityFrameworkModel.QueryMappings.PlatformFilter})">
            <summary>
            Gets queryable list of <see cref="T:Dataedo.Repository.Services.Features.Search.DTO.PlatformFilterDTO"/> evaluated using parameters.
            </summary>
            <param name="source">The source <see cref="T:Dataedo.Repository.EntityFrameworkModel.QueryMappings.PlatformFilter"/> list.</param>
            <returns>The list of <see cref="T:Dataedo.Repository.Services.Features.Search.DTO.PlatformFilterDTO"/> evaluated using parameters.</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.Search.Extensions.SearchDTOExtensions">
            <summary>
            The class providing extensions for <see cref="T:Dataedo.Repository.Services.Features.Search.DTO.SearchDTO"/> data.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Search.Extensions.SearchDTOExtensions.SelectDTO(System.Linq.IQueryable{Dataedo.Repository.EntityFrameworkModel.QueryMappings.SearchModel},Dataedo.Repository.Services.Parameters.OffsetLimitParameters)">
            <summary>
            Gets queryable list of <see cref="T:Dataedo.Repository.Services.Features.Search.DTO.SearchDTO"/> evaluated using parameters.
            </summary>
            <param name="source">The source <see cref="T:Dataedo.Repository.EntityFrameworkModel.QueryMappings.SearchModel"/> list.</param>
            <returns>The list of <see cref="T:Dataedo.Repository.Services.Features.Search.DTO.SearchDTO"/> evaluated using parameters.</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.Search.Interfaces.IFacetedSearchService">
            <summary>
            Represents object providing actions for searching objects.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Search.Interfaces.IFacetedSearchService.GetResults(Dataedo.Repository.Services.Features.Search.SearchFilters,Dataedo.Repository.Services.Parameters.OffsetLimitParameters)">
            <summary>
            Gets a collection of searched objects with specified condition.
            </summary>
            <param name="searchFilters">The object providing filters for searching objects.</param>
            <returns>A collection of terms with specified condition.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Search.Interfaces.IFacetedSearchService.GetAssetTypeFilters(Dataedo.Repository.Services.Features.Search.SearchFilters)">
            <summary>
            Gets a collection of filters.
            </summary>
            <param name="searchFilters">The object providing filters for filtering filters.</param>
            <returns>A collection of terms with specified condition.</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.Search.Interfaces.IQuickSearchService">
            <summary>
            Represents object providing actions for searching objects.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Search.Interfaces.IQuickSearchService.SearchTermsAsync(System.String)">
            <summary>
            Gets a collection of searched objects with specified condition.
            </summary>
            <param name="input">The condition applied to the search query.</param>
            <returns>A collection of terms with specified condition.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Search.Interfaces.IQuickSearchService.SearchTablesAsync(System.String)">
            <summary>
            Gets a collection of searched objects with specified condition.
            </summary>
            <param name="input">The condition applied to the search query.</param>
            <returns>A collection of tables with specified condition.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Search.Interfaces.IQuickSearchService.SearchColumnsAsync(System.String)">
            <summary>
            Gets a collection of searched objects with specified condition.
            </summary>
            <param name="input">The condition applied to the search query.</param>
            <returns>A collection of table columns with specified condition.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Search.Interfaces.IQuickSearchService.SearchViewsAsync(System.String)">
            <summary>
            Gets a collection of searched objects with specified condition.
            </summary>
            <param name="input">The condition applied to the search query.</param>
            <returns>A collection of views with specified condition.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Search.Interfaces.IQuickSearchService.SearchOtherEntriesAsync(System.String)">
            <summary>
            Gets a collection of searched objects with specified condition.
            </summary>
            <param name="input">The condition applied to the search query.</param>
            <returns>A collection of entries other than terms with specified condition.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Search.Interfaces.IQuickSearchService.SearchSubjectAreasAsync(System.String)">
            <summary>
            Gets a collection of searched objects with specified condition.
            </summary>
            <param name="input">The condition applied to the search query.</param>
            <returns>A collection of subject areas with specified condition.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Search.Interfaces.IQuickSearchService.SearchGlossariesAsync(System.String)">
            <summary>
            Gets a collection of searched objects with specified condition.
            </summary>
            <param name="input">The condition applied to the search query.</param>
            <returns>A collection of glossaries with specified condition.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Search.Interfaces.IQuickSearchService.SearchDatabasesAsync(System.String)">
            <summary>
            Gets a collection of searched objects with specified condition.
            </summary>
            <param name="input">The condition applied to the search query.</param>
            <returns>A collection of databases with specified condition.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Search.Interfaces.IQuickSearchService.SearchProceduresAsync(System.String)">
            <summary>
            Gets a collection of searched objects with specified condition.
            </summary>
            <param name="input">The condition applied to the search query.</param>
            <returns>A collection of procedures with specified condition.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Search.Interfaces.IQuickSearchService.SearchFunctionsAsync(System.String)">
            <summary>
            Gets a collection of searched objects with specified condition.
            </summary>
            <param name="input">The condition applied to the search query.</param>
            <returns>A collection of functions with specified condition.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Search.Interfaces.IQuickSearchService.SearchTriggersAsync(System.String)">
            <summary>
            Gets a collection of searched objects with specified condition.
            </summary>
            <param name="input">The condition applied to the search query.</param>
            <returns>A collection of triggers with specified condition.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.Search.Interfaces.IQuickSearchService.SearchParametersAsync(System.String)">
            <summary>
            Gets a collection of searched objects with specified condition.
            </summary>
            <param name="input">The condition applied to the search query.</param>
            <returns>A collection of parameters with specified condition.</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.SubjectAreas.Builders.SubjectAreaDTOBuilder">
            <summary>
            The class providing building <see cref="T:Dataedo.Repository.Services.Features.SubjectAreas.DTO.SubjectAreaDTO"/> objects.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.Features.SubjectAreas.Builders.SubjectAreaDTOBuilder.result">
            <summary>
            The result <see cref="T:Dataedo.Repository.Services.Features.SubjectAreas.DTO.SubjectAreaDTO"/> object.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.SubjectAreas.Builders.SubjectAreaDTOBuilder.#ctor">
            <summary>
            Initializes a new instance of the <see cref="T:Dataedo.Repository.Services.Features.SubjectAreas.Builders.SubjectAreaDTOBuilder"/> class.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.SubjectAreas.Builders.SubjectAreaDTOBuilder.Build(Dataedo.Repository.EntityFrameworkModel.Models.Databases,System.Collections.Generic.IEnumerable{Dataedo.Repository.EntityFrameworkModel.Models.CustomFields},Dataedo.Repository.Services.JoinDefinitions.SubjectAreasJoinsEnum.SubjectAreasJoins[],System.Nullable{System.Int32},System.Boolean)">
            <summary>
            Builds <see cref="T:Dataedo.Repository.Services.Features.SubjectAreas.DTO.SubjectAreaDTO"/> object from <see cref="T:Dataedo.Repository.EntityFrameworkModel.Models.Databases"/> object data using joins.
            </summary>
            <param name="data">The source data.</param>
            <param name="definitions">The collection on object providing information about custom field without values.</param>
            <param name="join">The array of names of data to load with object.</param>
            <returns>The <see cref="T:Dataedo.Repository.Services.Features.SubjectAreas.DTO.SubjectAreaDTO"/> object.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.SubjectAreas.Builders.SubjectAreaDTOBuilder.Build(Dataedo.Repository.EntityFrameworkModel.Models.Modules,System.Collections.Generic.IEnumerable{Dataedo.Repository.EntityFrameworkModel.Models.CustomFields},Dataedo.Repository.Services.JoinDefinitions.SubjectAreasJoinsEnum.SubjectAreasJoins[],System.Nullable{System.Int32},System.Boolean,Dataedo.Repository.Services.Features.Permissions.DTO.PermissionsContainer)">
            <summary>
            Builds <see cref="T:Dataedo.Repository.Services.Features.SubjectAreas.DTO.SubjectAreaDTO"/> object from <see cref="T:Dataedo.Repository.EntityFrameworkModel.Models.Modules"/> object data using joins.
            </summary>
            <param name="data">The source data.</param>
            <param name="definitions">The collection on object providing information about custom field without values.</param>
            <param name="join">The array of names of data to load with object.</param>
            <returns>The <see cref="T:Dataedo.Repository.Services.Features.SubjectAreas.DTO.SubjectAreaDTO"/> object.</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.SubjectAreas.DTO.SubjectAreaDTO">
            <summary>
            The class providing basic information about subject areas.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.SubjectAreas.DTO.SubjectAreaDTO.Id">
            <summary>
            Gets or sets the identifier of object.
            </summary>
            <example>1</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.SubjectAreas.DTO.SubjectAreaDTO.ParentSubjectAreaId">
            <summary>
            Gets or sets the identifier of parent subject area containing this subject area.
            </summary>
            <example>1</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.SubjectAreas.DTO.SubjectAreaDTO.ParentSubjectArea">
            <summary>
            Gets or sets the information object about parent subject area containing this subject area.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.SubjectAreas.DTO.SubjectAreaDTO.DisplayName">
            <summary>
            Gets or sets the base display name.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.SubjectAreas.DTO.SubjectAreaDTO.Title">
            <summary>
            Gets or sets the title.
            </summary>
            <example>Dataedo repository</example>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.SubjectAreas.DTO.SubjectAreaDTO.Description">
            <summary>
            Gets or sets the description of object.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.SubjectAreas.DTO.SubjectAreaDTO.CustomFields">
            <summary>
            Gets or sets the custom fields.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.SubjectAreas.DTO.SubjectAreaDTO.Metadata">
            <summary>
            Gets or sets the metadata (creation and modification information) information.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.SubjectAreas.DTO.SubjectAreaDTO.Tables">
            <summary>
            Gets or sets the list of basic information about tables in subject area.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.SubjectAreas.DTO.SubjectAreaDTO.Views">
            <summary>
            Gets or sets the list of basic information about views in subject area.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.SubjectAreas.DTO.SubjectAreaDTO.Procedures">
            <summary>
            Gets or sets the list of basic information about procedures in subject area.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.SubjectAreas.DTO.SubjectAreaDTO.Functions">
            <summary>
            Gets or sets the list of basic information about functions in subject area.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Features.SubjectAreas.DTO.SubjectAreaDTO.SubjectAreas">
            <summary>
            Gets or sets the collection of subject areas that theirs parent is current subject area.
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.SubjectAreas.Extensions.SubjectAreasDTOExtensions">
            <summary>
            The class providing extensions for <see cref="T:Dataedo.Repository.Services.Features.SubjectAreas.DTO.SubjectAreaDTO"/> data.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.SubjectAreas.Extensions.SubjectAreasDTOExtensions.SelectDTO(System.Collections.Generic.IEnumerable{Dataedo.Repository.EntityFrameworkModel.Models.Databases},System.Collections.Generic.IEnumerable{Dataedo.Repository.EntityFrameworkModel.Models.CustomFields},Dataedo.Repository.Services.JoinDefinitions.SubjectAreasJoinsEnum.SubjectAreasJoins[],System.Collections.Generic.Dictionary{System.Int32,System.Nullable{System.Int32}})">
            <summary>
            Gets queryable list of <see cref="T:Dataedo.Repository.Services.Features.SubjectAreas.DTO.SubjectAreaDTO"/> evaluated using parameters.
            <para>The source of subject areas are databases.</para>
            </summary>
            <param name="source">The source <see cref="T:Dataedo.Repository.EntityFrameworkModel.Models.Databases"/> queryable collection.</param>
            <param name="customFieldsDefinitions">The custom field definitions.</param>
            <param name="join">The array of names of data to load with objects.</param>
            <param name="parameters">The parameters providing selecting required set of data by skipping and limiting result items.</param>
            <returns>The queryable list of <see cref="T:Dataedo.Repository.Services.Features.SubjectAreas.DTO.SubjectAreaDTO"/> evaluated using parameters.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.SubjectAreas.Extensions.SubjectAreasDTOExtensions.SelectDTO(System.Collections.Generic.IEnumerable{Dataedo.Repository.EntityFrameworkModel.Models.Modules},System.Collections.Generic.IEnumerable{Dataedo.Repository.EntityFrameworkModel.Models.CustomFields},Dataedo.Repository.Services.JoinDefinitions.SubjectAreasJoinsEnum.SubjectAreasJoins[],System.Collections.Generic.Dictionary{System.Int32,System.Nullable{System.Int32}})">
            <summary>
            Gets queryable list of <see cref="T:Dataedo.Repository.Services.Features.SubjectAreas.DTO.SubjectAreaDTO"/> evaluated using parameters.
            <para>The source of subject areas are modules.</para>
            </summary>
            <param name="source">The source <see cref="T:Dataedo.Repository.EntityFrameworkModel.Models.Modules"/> queryable collection.</param>
            <param name="customFieldsDefinitions">The custom field definitions.</param>
            <param name="join">The array of names of data to load with objects.</param>
            <param name="parameters">The parameters providing selecting required set of data by skipping and limiting result items.</param>
            <returns>The queryable list of <see cref="T:Dataedo.Repository.Services.Features.SubjectAreas.DTO.SubjectAreaDTO"/> evaluated using parameters.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.SubjectAreas.Extensions.SubjectAreasDTOExtensions.SelectErdDTO(Dataedo.Repository.EntityFrameworkModel.Models.Modules,Dataedo.Repository.Services.JoinDefinitions.ErdsJoinsEnum.ErdsJoins[])">
            <summary>
            Gets <see cref="T:Dataedo.Repository.Services.Features.ERD.DTO.ErdDTO"/> evaluated using parameters.
            <para>The source of subject area is modules.</para>
            </summary>
            <param name="source">The source <see cref="T:Dataedo.Repository.EntityFrameworkModel.Models.Modules"/> object.</param>
            <param name="join">The array of names of data to load with objects.</param>
            <returns>The <see cref="T:Dataedo.Repository.Services.Features.ERD.DTO.ErdDTO"/> evaluated using parameters.</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.SubjectAreas.Interfaces.ISubjectAreasService">
            <summary>
            Represents object providing actions for subject area objects.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.SubjectAreas.Interfaces.ISubjectAreasService.GetDiagram(System.Nullable{System.Int32})">
            <summary>
            Gets information object about object by ID.
            </summary>
            <param name="isRoot">The value indicating whether subject area should be found in root level; otherwise, in another levels.</param>
            <param name="join">The array of names of data to load with objects.</param>
            <param name="parameters">The parameters providing selecting required set of data by skipping, limiting, filtering result items.</param>
            <returns>The information object about object by ID.</returns>
            
        </member>
        <member name="M:Dataedo.Repository.Services.Features.SubjectAreas.Interfaces.ISubjectAreasService.GetObject(System.Int32,System.Boolean,Dataedo.Repository.Services.JoinDefinitions.SubjectAreasJoinsEnum.SubjectAreasJoins[])">
            <summary>
            Gets information object about subject area by ID.
            </summary>
            <param name="id">The ID of object.</param>
            <param name="isRoot">The value indicating whether subject area should be found in root level; otherwise, in another levels.</param>
            <param name="join">The array of names of data to load with objects.</param>
            <returns>The information object about subject area by ID.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.SubjectAreas.Interfaces.ISubjectAreasService.GetSubjectAreas(System.Int32,System.Boolean,Dataedo.Repository.Services.JoinDefinitions.SubjectAreasJoinsEnum.SubjectAreasJoins[],Dataedo.Repository.Services.Parameters.OffsetLimitFilterParameters{Dataedo.Repository.Services.Features.SubjectAreas.SubjectAreaFiltersEnum.SubjectAreaFilters})">
            <summary>
            Gets collection of subject areas (<see cref="T:Dataedo.Repository.Services.Features.SubjectAreas.DTO.SubjectAreaDTO"/>) that their parent is subject area with provided ID.
            </summary>
            <param name="id">The ID of subject area.</param>
            <param name="isRoot">The value indicating whether subject area should be found in root level; otherwise, in another levels.</param>
            <param name="join">The array of names of data to load with objects.</param>
            <param name="parameters">The parameters providing selecting required set of data by skipping, limiting, filtering result items.</param>
            <returns>The collection of <see cref="T:Dataedo.Repository.Services.Features.SubjectAreas.DTO.SubjectAreaDTO"/>.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.SubjectAreas.Interfaces.ISubjectAreasService.GetTables(System.Int32,System.Boolean,Dataedo.Repository.Services.JoinDefinitions.TablesJoinsEnum.TablesJoins[],Dataedo.Repository.Services.Parameters.OffsetLimitFilterParameters{Dataedo.Repository.Services.Features.DatabaseObjects.Tables.TableFiltersEnum.TableFilters})">
            <summary>
            Gets collection of <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.BaseDatabaseObject.DTO.BaseDatabaseObjectDTO"/> from <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.BaseDatabaseObject.DTO.BaseDatabaseObjectDTO"/>
            </summary>
            <param name="id">The ID of subject area.</param>
            <param name="isRoot">The value indicating whether subject area should be found in root level; otherwise, in another levels.</param>
            <param name="join">The array of names of data to load with objects.</param>
            <param name="parameters">The parameters providing selecting required set of data by skipping, limiting, filtering result items.</param>
            <returns>The collection of <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.BaseDatabaseObject.DTO.BaseDatabaseObjectDTO"/>.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.SubjectAreas.Interfaces.ISubjectAreasService.GetViews(System.Int32,System.Boolean,Dataedo.Repository.Services.JoinDefinitions.ViewsJoinsEnum.ViewsJoins[],Dataedo.Repository.Services.Parameters.OffsetLimitFilterParameters{Dataedo.Repository.Services.Features.DatabaseObjects.Tables.TableFiltersEnum.TableFilters})">
            <summary>
            Gets collection of <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.BaseDatabaseObject.DTO.BaseDatabaseObjectDTO"/> from <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.BaseDatabaseObject.DTO.BaseDatabaseObjectDTO"/>
            </summary>
            <param name="id">The ID of subject area.</param>
            <param name="isRoot">The value indicating whether subject area should be found in root level; otherwise, in another levels.</param>
            <param name="join">The array of names of data to load with objects.</param>
            <param name="parameters">The parameters providing selecting required set of data by skipping, limiting, filtering result items.</param>
            <returns>The collection of <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.BaseDatabaseObject.DTO.BaseDatabaseObjectDTO"/>.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.SubjectAreas.Interfaces.ISubjectAreasService.GetProcedures(System.Int32,System.Boolean,Dataedo.Repository.Services.JoinDefinitions.Base.ProceduresFunctionsJoinsEnum.ProceduresFunctionsJoins[],Dataedo.Repository.Services.Parameters.OffsetLimitFilterParameters{Dataedo.Repository.Services.Features.DatabaseObjects.Procedures.ProcedureFiltersEnum.ProcedureFilters})">
            <summary>
            Gets collection of <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.BaseDatabaseObject.DTO.BaseDatabaseObjectDTO"/> from <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.BaseDatabaseObject.DTO.BaseDatabaseObjectDTO"/>
            </summary>
            <param name="id">The ID of subject area.</param>
            <param name="isRoot">The value indicating whether subject area should be found in root level; otherwise, in another levels.</param>
            <param name="join">The array of names of data to load with objects.</param>
            <param name="parameters">The parameters providing selecting required set of data by skipping, limiting, filtering result items.</param>
            <returns>The collection of <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.BaseDatabaseObject.DTO.BaseDatabaseObjectDTO"/>.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.SubjectAreas.Interfaces.ISubjectAreasService.GetFunctions(System.Int32,System.Boolean,Dataedo.Repository.Services.JoinDefinitions.Base.ProceduresFunctionsJoinsEnum.ProceduresFunctionsJoins[],Dataedo.Repository.Services.Parameters.OffsetLimitFilterParameters{Dataedo.Repository.Services.Features.DatabaseObjects.Procedures.ProcedureFiltersEnum.ProcedureFilters})">
            <summary>
            Gets collection of <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.BaseDatabaseObject.DTO.BaseDatabaseObjectDTO"/> from <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.BaseDatabaseObject.DTO.BaseDatabaseObjectDTO"/>
            </summary>
            <param name="id">The ID of subject area.</param>
            <param name="isRoot">The value indicating whether subject area should be found in root level; otherwise, in another levels.</param>
            <param name="join">The array of names of data to load with objects.</param>
            <param name="parameters">The parameters providing selecting required set of data by skipping, limiting, filtering result items.</param>
            <returns>The collection of <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.BaseDatabaseObject.DTO.BaseDatabaseObjectDTO"/>.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.SubjectAreas.Interfaces.ISubjectAreasService.GetCustomFields(System.Int32,System.Boolean,Dataedo.Repository.Services.JoinDefinitions.CustomFieldsJoinsEnum.CustomFieldsJoins[])">
            <summary>
            Gets the values of custom fields of object.
            </summary>
            <param name="id">The ID of object.</param>
            <param name="isRoot">The value indicating whether subject area should be found in root level; otherwise, in another levels.</param>
            <param name="join">The array of names of data to load with objects.</param>
            <returns>The custom fields of object.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.SubjectAreas.Interfaces.ISubjectAreasService.GetCustomFieldsDefinitions(System.Boolean,Dataedo.Repository.Services.JoinDefinitions.CustomFieldDefinitionJoinsEnum.CustomFieldDefinitionJoins[])">
            <summary>
            Gets the definitions of custom fields applicable for this class of object (that are configured to be used for this type of object).
            </summary>
            <param name="isRoot">The value indicating whether subject area should be found in root level; otherwise, in another levels.</param>
            <param name="join">The array of names of data to load with objects.</param>
            <returns>The collection of custom field definitions for class.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.SubjectAreas.Interfaces.ISubjectAreasService.JoinCustomFieldDefinitions``1(System.Boolean,``0[])">
            <summary>
            Returns the collection of context (Entity Framework) model for custom fields (<see cref="T:Dataedo.Repository.EntityFrameworkModel.Models.CustomFields"/>) if join specifies joining custom fields; otherwise, null.
            </summary>
            <typeparam name="TSource">The type of enumeration.</typeparam>
            <param name="isRoot">The value indicating whether subject area should be found in root level; otherwise, in another levels.</param>
            <param name="join">The array of names of data to load with objects.</param>
            <returns>The collection of context (Entity Framework) model for custom fields (<see cref="T:Dataedo.Repository.EntityFrameworkModel.Models.CustomFields"/>) if join specifies joining custom fields; otherwise, null.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.SubjectAreas.Interfaces.ISubjectAreasService.GetErd(System.Int32,System.Boolean,Dataedo.Repository.Services.JoinDefinitions.ErdsJoinsEnum.ErdsJoins[])">
            <summary>
            Gets the ERD of subject area.
            </summary>
            <param name="id">The ID of subject area.</param>
            <param name="isRoot">The value indicating whether subject area should be found in root level; otherwise, in another levels.</param>
            <param name="join">The array of names of data to load with objects.</param>
            <returns>The ERD of subject area.</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.SubjectAreas.ProceduresModulesExtensions">
            <summary>
            The class providing extensions for context (Entity Framework) model for databases (<see cref="T:Dataedo.Repository.EntityFrameworkModel.Models.Tables"/>).
            </summary>
            
        </member>
        <member name="T:Dataedo.Repository.Services.Features.SubjectAreas.SubjectAreaFiltersEnum">
            <summary>
            The class providing support for filters that may be applied when loading subject areas.
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.Features.SubjectAreas.SubjectAreaFiltersEnum.SubjectAreaFilters">
            <summary>
            Specifies applicable data filters for subject areas.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.Features.SubjectAreas.SubjectAreaFiltersEnum.SubjectAreaFilters.Text">
            <summary>
            The text filter.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Features.SubjectAreas.SubjectAreaFiltersEnum.HasAnyItem``1(Dataedo.Repository.Services.Features.SubjectAreas.SubjectAreaFiltersEnum.SubjectAreaFilters[],Dataedo.Repository.Services.Features.SubjectAreas.SubjectAreaFiltersEnum.SubjectAreaFilters[])">
            <summary>
            Checks whether provided domain array has any element of items array.
            </summary>
            <typeparam name="T">The type of element of array of join parameter based on <see cref="T:System.Enum"></see> type.</typeparam>
            <param name="array">The domain array of values to check in.</param>
            <param name="items">The array of values to check whether any is domain array.</param>
            <returns><c>true</c> domain array has any element of items array; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Filters.FiltersFactory.Get">
            <summary>
            Gets singleton of the JoinIncludesManager class.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Filters.FiltersManager.Register``2(Dataedo.Repository.Services.Filters.QueryFiltersEnum.QueryFilters,System.Func{System.String,``1},System.Func{System.Linq.IQueryable{``0},``1,System.Collections.Generic.IEnumerable{Dataedo.Repository.EntityFrameworkModel.Models.CustomFields},System.Boolean,System.Linq.IQueryable{``0}})">
            <summary>
            Register a parser and query handler associated with specific database model nad filter.
            </summary>
            <typeparam name="TModel">Database query model.</typeparam>
            <typeparam name="TParser">Parser type (determine how filter value is used).</typeparam>
            <param name="filterName">Filter which will be assigned to given database model.</param>
            <param name="parser">Create parser instance, get filter value as an argument.</param>
            <param name="handler">Apply filter to query, get query and parser instance as arguments. Commonly use .Where() method, sometimes with .Include() method to filter related object(s).</param>
        </member>
        <member name="M:Dataedo.Repository.Services.Filters.FiltersManager.Invoke``1(System.Linq.IQueryable{``0}@,Dataedo.Repository.Services.Filters.QueryFiltersEnum.QueryFilters,System.String,System.Collections.Generic.IEnumerable{Dataedo.Repository.EntityFrameworkModel.Models.CustomFields},System.Boolean)">
            <summary>
            Apply specified filter with custom value to the query.
            </summary>
            <typeparam name="TModel">Database query model.</typeparam>
            <param name="query">Database query.</param>
            <param name="filterName">Filter which will be applied to query.</param>
            <param name="filterValue"></param>
            <returns>Modified database query.</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Filters.Parsers.IDsStringParser">
            <summary>
            The class providing functionality for IDs parsing.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Filters.Parsers.IDsStringParser.#ctor(System.String,System.Char)">
            <summary>
            Initializes a new instance of the <see cref="T:Dataedo.Repository.Services.Filters.Parsers.IDsStringParser"></see> class.
            </summary>
            <param name="filterValue">The input parameter which contains database IDs in a string format.</param>
            <param name="delimiter">Filter value separator.</param>
        </member>
        <member name="P:Dataedo.Repository.Services.Filters.Parsers.IDsStringParser.Values">
            <summary>
            Gets the array of parsed database IDs.
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.Interfaces.Base.IBaseObjectService">
            <summary>
            Represents object providing common actions for objects.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Interfaces.Base.IBaseObjectService.GetSubjectAreas(System.Int32,Dataedo.Repository.Services.JoinDefinitions.SubjectAreasJoinsEnum.SubjectAreasJoins[])">
            <summary>
            The subject areas that object belongs to.
            </summary>
            <param name="id">The ID of object.</param>
            <param name="join">The array of names of data to load with objects.</param>
            <returns>The custom fields of object.</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Interfaces.ILicensesService">
            <summary>
            Represents object providing actions for licenses.
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins">
            <summary>
            The class providing join enumerations for join parameters in controller methods.
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins">
            <summary>
            Specifies general applicable data joins for objects.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins.Database">
            <summary>
            The database that object is in.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins.CustomField">
            <summary>
            The custom field of object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins.CustomFields">
            <summary>
            The custom fields of object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins.CustomFieldClass">
            <summary>
            A class of custom field (see <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldClassDTO"/>).
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins.CustomFieldDefinition">
            <summary>
            A definition of custom field (see <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDefinitionDTO"/>).
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins.CustomFieldDefinitionCustomFieldClass">
            <summary>
            A definition of custom field (see <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDefinitionDTO"/>) with class (see <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldClassDTO"/>).
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins.CustomFieldDefinitionDefinitionValues">
            <summary>
            A definition of custom field (see <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDefinitionDTO"/>) with definition values.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins.DefinitionValues">
            <summary>
            A definition values of custom field definition.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins.Description">
            <summary>
            A HTML formatted description of object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins.DescriptionPlain">
            <summary>
            A plain text description of object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins.DescriptionPlainShort">
            <summary>
            A short plain text description of object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins.DescriptionFormatted">
            <summary>
            A HTML formatted description of object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins.Metadata">
            <summary>
            A metadata (creation, import and update information) about object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins.Script">
            <summary>
            A script of object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins.Glossary">
            <summary>
            The glossary root object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins.GlossaryEntries">
            <summary>
            The glossary entries.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins.EntryType">
            <summary>
            The glossary entry type (term, rule, policy etc.).
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins.ParentEntry">
            <summary>
            The parent of the glossary entry (in tree hierarchy).
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins.LinkedDataAssets">
            <summary>
            The linked data assets (e.g tables, views, columns).
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins.ParentDatabaseObject">
            <summary>
            The parent of database object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins.ParentDatabaseObjectDescriptionFormatted">
            <summary>
            The parent database object containing object with HTML formatted description of object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins.ParentDatabaseObjectDescriptionPlain">
            <summary>
            The parent database object containing object with plain text description of object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins.ParentDatabaseObjectDescriptionPlainShort">
            <summary>
            The parent database object containing object with short plain text description of object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins.ParentDatabaseObjectWithDatabase">
            <summary>
            The parent of database object with database.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins.ParentDatabaseObjectWithDatabaseDescriptionFormatted">
            <summary>
            The parent of database object with database with HTML formatted description of object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins.ParentDatabaseObjectWithDatabaseDescriptionPlain">
            <summary>
            The parent of database object with database with plain text description of object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins.ParentDatabaseObjectWithDatabaseDescriptionPlainShort">
            <summary>
            The parent of database object with database with short plain text description of object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins.ForeignDatabaseObject">
            <summary>
            The relation foreign database object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins.ForeignDatabaseObjectColumns">
            <summary>
            The relation foreign database object with columns.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins.ForeignDatabaseObjectColumnsKeys">
            <summary>
            The relation foreign database object with columns and keys.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins.ForeignDatabaseObjectWithDatabase">
            <summary>
            The relation foreign database object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins.PrimaryDatabaseObject">
            <summary>
            The relation primary database object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins.PrimaryDatabaseObjectColumns">
            <summary>
            The relation primary database object with columns.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins.PrimaryDatabaseObjectColumnsKeys">
            <summary>
            The relation primary database object with columns and keys.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins.PrimaryDatabaseObjectWithDatabase">
            <summary>
            The relation primary database object with included database.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins.Relationships">
            <summary>
            The relationships that consists of column with provided ID.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins.RelationshipsRelationshipColumnPairs">
            <summary>
            The relationships that consists of column with provided ID with foreign key and primary key relation columns (see <see cref="F:Dataedo.Repository.Services.JoinDefinitions.RelationshipsJoinsEnum.RelationshipsJoins.RelationshipColumnPairs"/>).
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins.RelationshipColumnPairs">
            <summary>
            The relationship that consists of column with provided ID with foreign key and primary key relation columns (see <see cref="F:Dataedo.Repository.Services.JoinDefinitions.RelationshipsJoinsEnum.RelationshipsJoins.RelationshipColumnPairs"/>).
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins.RelationshipColumnPairsColumns">
            <summary>
            The relationships that consists of column with provided ID with foreign key and primary key relation columns with basic data about columns (see <see cref="F:Dataedo.Repository.Services.JoinDefinitions.RelationshipsJoinsEnum.RelationshipsJoins.RelationshipColumnPairsColumns"/>).
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins.RelationshipColumnPairsColumnsKeys">
            <summary>
            The foreign key and primary key relation columns with basic data about columns (see <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.Columns.DTO.ColumnDTO"/>) with keys.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins.RelationshipsReferenced">
            <summary>
            The relationships that consists of column with provided ID as referenced column.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins.RelationshipsReferencedForeignDatabaseObject">
            <summary>
            The relationships that consists of column with provided ID as referenced column with database object (see <see cref="F:Dataedo.Repository.Services.JoinDefinitions.RelationshipsJoinsEnum.RelationshipsJoins.PrimaryDatabaseObject"/>).
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins.RelationshipsReferencedForeignDatabaseObjectWithDatabase">
            <summary>
            The relationships that consists of column with provided ID as referenced column with database object with database (see <see cref="F:Dataedo.Repository.Services.JoinDefinitions.RelationshipsJoinsEnum.RelationshipsJoins.ForeignDatabaseObjectWithDatabase"/>).
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins.RelationshipsReferencedRelationshipColumnPairs">
            <summary>
            The relationships that consists of column with provided ID as referenced column with foreign key and primary key relation columns (see <see cref="F:Dataedo.Repository.Services.JoinDefinitions.RelationshipsJoinsEnum.RelationshipsJoins.RelationshipColumnPairs"/>).
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins.RelationshipsReferencedRelationshipColumnPairsColumns">
            <summary>
            The relationships that consists of column with provided ID as referenced column with foreign key and primary key relation columns with basic data about columns (see <see cref="F:Dataedo.Repository.Services.JoinDefinitions.RelationshipsJoinsEnum.RelationshipsJoins.RelationshipColumnPairsColumns"/>).
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins.RelationshipsReferencing">
            <summary>
            The relationships that consists of column with provided ID as referencing column.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins.RelationshipsReferencingPrimaryDatabaseObject">
            <summary>
            The relationships that consists of column with provided ID as referencing column with database object (see <see cref="F:Dataedo.Repository.Services.JoinDefinitions.RelationshipsJoinsEnum.RelationshipsJoins.PrimaryDatabaseObject"/>).
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins.RelationshipsReferencingPrimaryDatabaseObjectWithDatabase">
            <summary>
            The relationships that consists of column with provided ID as referencing column with database object with database (see <see cref="F:Dataedo.Repository.Services.JoinDefinitions.RelationshipsJoinsEnum.RelationshipsJoins.ForeignDatabaseObjectWithDatabase"/>).
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins.RelationshipsReferencingRelationshipColumnPairs">
            <summary>
            The relationships that consists of column with provided ID as referencing column foreign key and primary key relation columns (see <see cref="F:Dataedo.Repository.Services.JoinDefinitions.RelationshipsJoinsEnum.RelationshipsJoins.RelationshipColumnPairs"/>).
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins.RelationshipsReferencingRelationshipColumnPairsColumns">
            <summary>
            The relationships that consists of column with provided ID as referencing column foreign key and primary key relation columns with basic data about columns (see <see cref="F:Dataedo.Repository.Services.JoinDefinitions.RelationshipsJoinsEnum.RelationshipsJoins.RelationshipColumnPairsColumns"/>).
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins.Keys">
            <summary>
            The keys related to object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins.KeysParentDatabaseObject">
            <summary>
            The keys that consists of column with provided ID with its parent object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins.ParentColumn">
            <summary>
            The parent column containing object (if column in hierarchy with another column).
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins.ParentSubjectArea">
            <summary>
            The parent subject area containing this subject area.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins.SubjectAreas">
            <summary>
            The subject areas that theirs parent is current subject area.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins.SubjectArea">
            <summary>
            The subject area.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins.Tables">
            <summary>
            A list of tables in subject area.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins.Views">
            <summary>
            A list of views in subject area.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins.Procedures">
            <summary>
            A list of procedures in subject area.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins.Functions">
            <summary>
            A list of functions in subject area.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins.HasColumns">
            <summary>
            The value indicating whether column is a parent of any another column.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins.Columns">
            <summary>
            The collection of columns that their parent is current object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins.ColumnsKeys">
            <summary>
            The collection of columns with keys that their parent is current object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins.HasTables">
            <summary>
            The value indicating whether object contains any tables.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins.HasViews">
            <summary>
            The value indicating whether object contains any views.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins.HasProcedures">
            <summary>
            The value indicating whether object contains any procedures.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins.HasFunctions">
            <summary>
            The value indicating whether object contains any functions.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins.ErdNodes">
            <summary>
            The collection of ERD nodes.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins.ErdNodesDatabaseObject">
            <summary>
            The ERD node with database object represented by node.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins.ErdNodesDatabaseObjectDatabase">
            <summary>
            The ERD node with database object represented by node with database.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins.ErdNodesColumns">
            <summary>
            The collection of ERD nodes with columns.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins.ErdNodesColumnsKeys">
            <summary>
            The keys related to object with columns with keys.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins.ErdNodesColumnsRelationshipsReferenced">
            <summary>
            The relationships that consists of column with provided ID as referenced column.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins.ErdNodesColumnsRelationshipsReferencing">
            <summary>
            The relationships that consists of column with provided ID as referencing column.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins.ErdLinks">
            <summary>
            The collection of ERD links.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins.ErdLinksRelationships">
            <summary>
            The collection of ERD links with relations.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins.ErdLinksRelationshipsRelationshipColumnPairs">
            <summary>
            The relationships that consists of column with provided ID with foreign key and primary key relation columns (see <see cref="F:Dataedo.Repository.Services.JoinDefinitions.RelationshipsJoinsEnum.RelationshipsJoins.RelationshipColumnPairs"/>).
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins.ErdLinksRelationshipsRelationshipColumnPairsColumns">
            <summary>
            The relationships that consists of column with provided ID with foreign key and primary key relation with basic data about columns (see <see cref="F:Dataedo.Repository.Services.JoinDefinitions.RelationshipsJoinsEnum.RelationshipsJoins.RelationshipColumnPairsColumns"/>).
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.JoinDefinitions.Base.ProceduresFunctionsJoinsEnum">
            <summary>
            The class providing join enumerations for join parameters in controller methods.
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.JoinDefinitions.Base.ProceduresFunctionsJoinsEnum.ProceduresFunctionsJoins">
            <summary>
            Specifies applicable data joins for procedures.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.Base.ProceduresFunctionsJoinsEnum.ProceduresFunctionsJoins.Database">
            <summary>
            The database that object is in.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.Base.ProceduresFunctionsJoinsEnum.ProceduresFunctionsJoins.SubjectAreas">
            <summary>
            The subject areas that object belongs to.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.Base.ProceduresFunctionsJoinsEnum.ProceduresFunctionsJoins.CustomFields">
            <summary>
            The custom fields of object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.Base.ProceduresFunctionsJoinsEnum.ProceduresFunctionsJoins.CustomFieldDefinition">
            <summary>
            A definition of custom field (see <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDefinitionDTO"/>).
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.Base.ProceduresFunctionsJoinsEnum.ProceduresFunctionsJoins.CustomFieldDefinitionCustomFieldClass">
            <summary>
            A definition of custom field (see <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDefinitionDTO"/>) with class (see <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldClassDTO"/>).
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.Base.ProceduresFunctionsJoinsEnum.ProceduresFunctionsJoins.CustomFieldDefinitionDefinitionValues">
            <summary>
            A definition of custom field (see <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDefinitionDTO"/>) with definition values.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.Base.ProceduresFunctionsJoinsEnum.ProceduresFunctionsJoins.DescriptionFormatted">
            <summary>
            A HTML formatted description of object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.Base.ProceduresFunctionsJoinsEnum.ProceduresFunctionsJoins.DescriptionPlain">
            <summary>
            A plain text description of object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.Base.ProceduresFunctionsJoinsEnum.ProceduresFunctionsJoins.DescriptionPlainShort">
            <summary>
            A short plain text description of object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.Base.ProceduresFunctionsJoinsEnum.ProceduresFunctionsJoins.Parameters">
            <summary>
            The parameters.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.Base.ProceduresFunctionsJoinsEnum.ProceduresFunctionsJoins.Dependencies">
            <summary>
            The dependencies.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.Base.ProceduresFunctionsJoinsEnum.ProceduresFunctionsJoins.Script">
            <summary>
            The script.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.Base.ProceduresFunctionsJoinsEnum.ProceduresFunctionsJoins.SchemaChanges">
            <summary>
            The schema changes.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.Base.ProceduresFunctionsJoinsEnum.ProceduresFunctionsJoins.Metadata">
            <summary>
            A metadata (creation, import and update information) about object.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.JoinDefinitions.Base.ProceduresFunctionsJoinsEnum.HasAnyItem(Dataedo.Repository.Services.JoinDefinitions.Base.ProceduresFunctionsJoinsEnum.ProceduresFunctionsJoins[],Dataedo.Repository.Services.JoinDefinitions.Base.ProceduresFunctionsJoinsEnum.ProceduresFunctionsJoins[])">
            <summary>
            Checks whether provided domain array has any element of items array.
            </summary>
            <param name="array">The domain array of values to check in.</param>
            <param name="items">The array of values to check whether any is domain array.</param>
            <returns><c>true</c> domain array has any element of items array; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.JoinDefinitions.Base.TablesViewsJoinsEnum">
            <summary>
            The class providing join enumerations for join parameters in controller methods.
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.JoinDefinitions.Base.TablesViewsJoinsEnum.TablesViewsJoin">
            <summary>
            Specifies applicable data joins for tables.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.Base.TablesViewsJoinsEnum.TablesViewsJoin.SubjectAreas">
            <summary>
            The subject areas that object belongs to.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.Base.TablesViewsJoinsEnum.TablesViewsJoin.CustomFields">
            <summary>
            The custom fields of object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.Base.TablesViewsJoinsEnum.TablesViewsJoin.CustomFieldDefinition">
            <summary>
            A definition of custom field (see <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDefinitionDTO"/>).
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.Base.TablesViewsJoinsEnum.TablesViewsJoin.CustomFieldDefinitionCustomFieldClass">
            <summary>
            A definition of custom field (see <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDefinitionDTO"/>) with class (see <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldClassDTO"/>).
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.Base.TablesViewsJoinsEnum.TablesViewsJoin.CustomFieldDefinitionDefinitionValues">
            <summary>
            A definition of custom field (see <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDefinitionDTO"/>) with definition values.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.Base.TablesViewsJoinsEnum.TablesViewsJoin.DescriptionFormatted">
            <summary>
            A HTML formatted description of object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.Base.TablesViewsJoinsEnum.TablesViewsJoin.DescriptionPlain">
            <summary>
            A plain text description of object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.Base.TablesViewsJoinsEnum.TablesViewsJoin.Columns">
            <summary>
            The columns.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.Base.TablesViewsJoinsEnum.TablesViewsJoin.Relations">
            <summary>
            The relations.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.Base.TablesViewsJoinsEnum.TablesViewsJoin.Keys">
            <summary>
            The keys.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.Base.TablesViewsJoinsEnum.TablesViewsJoin.Triggers">
            <summary>
            The triggers.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.Base.TablesViewsJoinsEnum.TablesViewsJoin.Dependencies">
            <summary>
            The dependencies.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.Base.TablesViewsJoinsEnum.TablesViewsJoin.GlossaryEntries">
            <summary>
            The linked glossary entries.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.Base.TablesViewsJoinsEnum.TablesViewsJoin.GlossaryEntriesEntryType">
            <summary>
            The linked glossary entries with entry type.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.Base.TablesViewsJoinsEnum.TablesViewsJoin.SchemaChanges">
            <summary>
            The schema changes.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.Base.TablesViewsJoinsEnum.TablesViewsJoin.Metadata">
            <summary>
            A metadata (creation, import and update information) about object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.Base.TablesViewsJoinsEnum.TablesViewsJoin.Script">
            <summary>
            The script.
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.JoinDefinitions.ColumnsJoinsEnum">
            <summary>
            The class providing join enumerations for join parameters in controller methods.
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.JoinDefinitions.ColumnsJoinsEnum.ColumnsJoins">
            <summary>
            Specifies applicable data joins for columns.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ColumnsJoinsEnum.ColumnsJoins.ParentDatabaseObject">
            <summary>
            The parent database object containing object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ColumnsJoinsEnum.ColumnsJoins.ParentDatabaseObjectDescriptionFormatted">
            <summary>
            The parent database object containing object with HTML formatted description of object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ColumnsJoinsEnum.ColumnsJoins.ParentDatabaseObjectDescriptionPlain">
            <summary>
            The parent database object containing object with plain text description of object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ColumnsJoinsEnum.ColumnsJoins.ParentDatabaseObjectDescriptionPlainShort">
            <summary>
            The parent database object containing object with short plain text description of object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ColumnsJoinsEnum.ColumnsJoins.ParentDatabaseObjectWithDatabase">
            <summary>
            The parent of database object with database.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ColumnsJoinsEnum.ColumnsJoins.ParentDatabaseObjectWithDatabaseDescriptionFormatted">
            <summary>
            The parent of database object with database with HTML formatted description of object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ColumnsJoinsEnum.ColumnsJoins.ParentDatabaseObjectWithDatabaseDescriptionPlain">
            <summary>
            The parent of database object with database with plain text description of object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ColumnsJoinsEnum.ColumnsJoins.ParentDatabaseObjectWithDatabaseDescriptionPlainShort">
            <summary>
            The parent of database object with database with short plain text description of object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ColumnsJoinsEnum.ColumnsJoins.ParentColumn">
            <summary>
            The parent column containing object (if column in hierarchy with another column).
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ColumnsJoinsEnum.ColumnsJoins.GlossaryEntries">
            <summary>
            The glossary entries related to column.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ColumnsJoinsEnum.ColumnsJoins.GlossaryEntriesEntryType">
            <summary>
            The glossary entries related to column with entrt type.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ColumnsJoinsEnum.ColumnsJoins.RelationshipsReferenced">
            <summary>
            The relationships that consists of column with provided ID as referenced column.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ColumnsJoinsEnum.ColumnsJoins.RelationshipsReferencedForeignDatabaseObject">
            <summary>
            The relationships that consists of column with provided ID as referenced column with database object (see <see cref="F:Dataedo.Repository.Services.JoinDefinitions.RelationshipsJoinsEnum.RelationshipsJoins.PrimaryDatabaseObject"/>).
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ColumnsJoinsEnum.ColumnsJoins.RelationshipsReferencedForeignDatabaseObjectWithDatabase">
            <summary>
            The relationships that consists of column with provided ID as referenced column with database object with database (see <see cref="F:Dataedo.Repository.Services.JoinDefinitions.RelationshipsJoinsEnum.RelationshipsJoins.ForeignDatabaseObjectWithDatabase"/>).
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ColumnsJoinsEnum.ColumnsJoins.RelationshipsReferencedRelationshipColumnPairs">
            <summary>
            The relationships that consists of column with provided ID as referenced column with foreign key and primary key relation columns (see <see cref="F:Dataedo.Repository.Services.JoinDefinitions.RelationshipsJoinsEnum.RelationshipsJoins.RelationshipColumnPairs"/>).
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ColumnsJoinsEnum.ColumnsJoins.RelationshipsReferencedRelationshipColumnPairsColumns">
            <summary>
            The relationships that consists of column with provided ID as referenced column with foreign key and primary key relation columns with basic data about columns (see <see cref="F:Dataedo.Repository.Services.JoinDefinitions.RelationshipsJoinsEnum.RelationshipsJoins.RelationshipColumnPairsColumns"/>).
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ColumnsJoinsEnum.ColumnsJoins.RelationshipsReferencedRelationshipColumnPairsColumnsKeys">
            <summary>
            The relationships that consists of column with provided ID as referenced column with foreign key and primary key relation columns with basic data about columns (see <see cref="F:Dataedo.Repository.Services.JoinDefinitions.RelationshipsJoinsEnum.RelationshipsJoins.RelationshipColumnPairsColumns"/>) with keys.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ColumnsJoinsEnum.ColumnsJoins.RelationshipsReferencedDescriptionPlain">
            <summary>
            The relationships that consists of column with provided ID as referenced column with plain text description of object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ColumnsJoinsEnum.ColumnsJoins.RelationshipsReferencedDescriptionPlainShort">
            <summary>
            The relationships that consists of column with provided ID as referenced column with short plain text description of object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ColumnsJoinsEnum.ColumnsJoins.RelationshipsReferencing">
            <summary>
            The relationships that consists of column with provided ID as referencing column.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ColumnsJoinsEnum.ColumnsJoins.RelationshipsReferencingPrimaryDatabaseObject">
            <summary>
            The relationships that consists of column with provided ID as referencing column with database object (see <see cref="F:Dataedo.Repository.Services.JoinDefinitions.RelationshipsJoinsEnum.RelationshipsJoins.PrimaryDatabaseObject"/>).
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ColumnsJoinsEnum.ColumnsJoins.RelationshipsReferencingPrimaryDatabaseObjectWithDatabase">
            <summary>
            The relationships that consists of column with provided ID as referencing column with database object with database (see <see cref="F:Dataedo.Repository.Services.JoinDefinitions.RelationshipsJoinsEnum.RelationshipsJoins.ForeignDatabaseObjectWithDatabase"/>).
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ColumnsJoinsEnum.ColumnsJoins.RelationshipsReferencingRelationshipColumnPairs">
            <summary>
            The relationships that consists of column with provided ID as referencing column foreign key and primary key relation columns (see <see cref="F:Dataedo.Repository.Services.JoinDefinitions.RelationshipsJoinsEnum.RelationshipsJoins.RelationshipColumnPairs"/>).
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ColumnsJoinsEnum.ColumnsJoins.RelationshipsReferencingRelationshipColumnPairsColumns">
            <summary>
            The relationships that consists of column with provided ID as referencing column foreign key and primary key relation columns with basic data about columns (see <see cref="F:Dataedo.Repository.Services.JoinDefinitions.RelationshipsJoinsEnum.RelationshipsJoins.RelationshipColumnPairsColumns"/>).
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ColumnsJoinsEnum.ColumnsJoins.RelationshipsReferencingRelationshipColumnPairsColumnsKeys">
            <summary>
            The relationships that consists of column with provided ID as referencing column foreign key and primary key relation columns with basic data about columns (see <see cref="F:Dataedo.Repository.Services.JoinDefinitions.RelationshipsJoinsEnum.RelationshipsJoins.RelationshipColumnPairsColumns"/>) with keys.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ColumnsJoinsEnum.ColumnsJoins.RelationshipsReferencingDescriptionPlain">
            <summary>
            The relationships that consists of column with provided ID as referencing column with plain text description of object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ColumnsJoinsEnum.ColumnsJoins.RelationshipsReferencingDescriptionPlainShort">
            <summary>
            The relationships that consists of column with provided ID as referencing column with short plain text description of object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ColumnsJoinsEnum.ColumnsJoins.Keys">
            <summary>
            The keys related to object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ColumnsJoinsEnum.ColumnsJoins.KeysColumns">
            <summary>
            The keys related to object with columns.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ColumnsJoinsEnum.ColumnsJoins.KeysParentDatabaseObject">
            <summary>
            The keys that consists of column with provided ID with its parent object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ColumnsJoinsEnum.ColumnsJoins.CustomFields">
            <summary>
            The custom fields of object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ColumnsJoinsEnum.ColumnsJoins.CustomFieldDefinition">
            <summary>
            A definition of custom field (see <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDefinitionDTO"/>).
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ColumnsJoinsEnum.ColumnsJoins.CustomFieldDefinitionCustomFieldClass">
            <summary>
            A definition of custom field (see <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDefinitionDTO"/>) with class (see <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldClassDTO"/>).
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ColumnsJoinsEnum.ColumnsJoins.CustomFieldDefinitionDefinitionValues">
            <summary>
            A definition of custom field (see <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDefinitionDTO"/>) with definition values.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ColumnsJoinsEnum.ColumnsJoins.DescriptionPlain">
            <summary>
            A plain text description of object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ColumnsJoinsEnum.ColumnsJoins.DescriptionPlainShort">
            <summary>
            A short plain text description of object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ColumnsJoinsEnum.ColumnsJoins.Metadata">
            <summary>
            A metadata (creation, import and update information) about object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ColumnsJoinsEnum.ColumnsJoins.HasColumns">
            <summary>
            The value indicating whether column is a parent of any another column.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ColumnsJoinsEnum.ColumnsJoins.Columns">
            <summary>
            A collection of columns that their parent is current column.
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.JoinDefinitions.CustomFieldDefinitionJoinsEnum">
            <summary>
            The class providing join enumerations for join parameters in controller methods.
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.JoinDefinitions.CustomFieldDefinitionJoinsEnum.CustomFieldDefinitionJoins">
            <summary>
            Specifies applicable data joins for custom fields objects.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.CustomFieldDefinitionJoinsEnum.CustomFieldDefinitionJoins.CustomFieldClass">
            <summary>
            A class of custom field (see <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldClassDTO"/>).
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.CustomFieldDefinitionJoinsEnum.CustomFieldDefinitionJoins.DefinitionValues">
            <summary>
            A definition of custom field (see <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDefinitionDTO"/>) with definition values.
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.JoinDefinitions.CustomFieldsJoinsEnum">
            <summary>
            The class providing join enumerations for join parameters in controller methods.
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.JoinDefinitions.CustomFieldsJoinsEnum.CustomFieldsJoins">
            <summary>
            Specifies applicable data joins for custom fields objects.
            <para>
            When using <see cref="T:Dataedo.Repository.Services.JoinDefinitions.CustomFieldsJoinsEnum.CustomFieldsJoins"/> for JSON serialization use <code>[Newtonsoft.Json.JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]</code> attribute to make results contain <see cref="T:System.Runtime.Serialization.EnumMemberAttribute"/> EnumMember value instead of number value.
            </para>
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.CustomFieldsJoinsEnum.CustomFieldsJoins.CustomFieldDefinition">
            <summary>
            A definition of custom field (see <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDefinitionDTO"/>).
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.CustomFieldsJoinsEnum.CustomFieldsJoins.CustomFieldDefinitionCustomFieldClass">
            <summary>
            A definition of custom field (see <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDefinitionDTO"/>) with class (see <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldClassDTO"/>).
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.CustomFieldsJoinsEnum.CustomFieldsJoins.CustomFieldDefinitionDefinitionValues">
            <summary>
            A definition of custom field (see <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDefinitionDTO"/>) with definition values.
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.JoinDefinitions.DatabasesJoinsEnum">
            <summary>
            The class providing join enumerations for join parameters in controller methods.
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.JoinDefinitions.DatabasesJoinsEnum.DatabasesJoins">
            <summary>
            Specifies applicable data joins for databases.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.DatabasesJoinsEnum.DatabasesJoins.SubjectAreas">
            <summary>
            The subject areas that object belongs to.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.DatabasesJoinsEnum.DatabasesJoins.CustomFields">
            <summary>
            The custom fields of object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.DatabasesJoinsEnum.DatabasesJoins.CustomFieldDefinition">
            <summary>
            A definition of custom field (see <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDefinitionDTO"/>).
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.DatabasesJoinsEnum.DatabasesJoins.CustomFieldDefinitionCustomFieldClass">
            <summary>
            A definition of custom field (see <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDefinitionDTO"/>) with class (see <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldClassDTO"/>).
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.DatabasesJoinsEnum.DatabasesJoins.CustomFieldDefinitionDefinitionValues">
            <summary>
            A definition of custom field (see <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDefinitionDTO"/>) with definition values.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.DatabasesJoinsEnum.DatabasesJoins.DescriptionFormatted">
            <summary>
            A HTML formatted description of object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.DatabasesJoinsEnum.DatabasesJoins.DescriptionPlain">
            <summary>
            A plain text description of object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.DatabasesJoinsEnum.DatabasesJoins.DescriptionPlainShort">
            <summary>
            A short plain text description of object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.DatabasesJoinsEnum.DatabasesJoins.SchemaChanges">
            <summary>
            The schema changes.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.DatabasesJoinsEnum.DatabasesJoins.Metadata">
            <summary>
            A metadata (creation, import and update information) about object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.DatabasesJoinsEnum.DatabasesJoins.HasTables">
            <summary>
            The value indicating whether database contains any tables.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.DatabasesJoinsEnum.DatabasesJoins.Tables">
            <summary>
            A list of tables in database.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.DatabasesJoinsEnum.DatabasesJoins.HasViews">
            <summary>
            The value indicating whether database contains any views.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.DatabasesJoinsEnum.DatabasesJoins.Views">
            <summary>
            A list of views in database.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.DatabasesJoinsEnum.DatabasesJoins.HasProcedures">
            <summary>
            The value indicating whether database contains any procedures.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.DatabasesJoinsEnum.DatabasesJoins.Procedures">
            <summary>
            A list of procedures in database.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.DatabasesJoinsEnum.DatabasesJoins.HasFunctions">
            <summary>
            The value indicating whether database contains any functions.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.DatabasesJoinsEnum.DatabasesJoins.Functions">
            <summary>
            A list of functions in database.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.JoinDefinitions.DatabasesJoinsEnum.HasAnyItem``1(Dataedo.Repository.Services.JoinDefinitions.DatabasesJoinsEnum.DatabasesJoins[],Dataedo.Repository.Services.JoinDefinitions.DatabasesJoinsEnum.DatabasesJoins[])">
            <summary>
            Checks whether provided domain array has any element of items array.
            </summary>
            <typeparam name="T">The type of element of array of join parameter based on <see cref="T:System.Enum"></see> type.</typeparam>
            <param name="array">The domain array of values to check in.</param>
            <param name="items">The array of values to check whether any is domain array.</param>
            <returns><c>true</c> domain array has any element of items array; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.JoinDefinitions.DependencyJoinsEnum">
            <summary>
            The class providing join enumerations for join parameters in controller methods.
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.JoinDefinitions.DependencyJoinsEnum.DependencyJoins">
            <summary>
            Specifies general applicable data joins for objects.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.DependencyJoinsEnum.DependencyJoins.Relationships">
            <summary>
            The database object relationships.
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.JoinDefinitions.ErdsJoinsEnum">
            <summary>
            The class providing join enumerations for join parameters in controller methods.
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.JoinDefinitions.ErdsJoinsEnum.ErdsJoins">
            <summary>
            Specifies applicable data joins for columns.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ErdsJoinsEnum.ErdsJoins.SubjectArea">
            <summary>
            The subject area.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ErdsJoinsEnum.ErdsJoins.ErdNodes">
            <summary>
            The collection of ERD nodes.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ErdsJoinsEnum.ErdsJoins.ErdNodesDatabaseObject">
            <summary>
            The ERD nodes with database object represented by node.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ErdsJoinsEnum.ErdsJoins.ErdNodesDatabaseObjectDatabase">
            <summary>
            The ERD node with database object represented by node with database.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ErdsJoinsEnum.ErdsJoins.ErdNodesColumns">
            <summary>
            The collection of ERD nodes with columns.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ErdsJoinsEnum.ErdsJoins.ErdNodesColumnsKeys">
            <summary>
            The keys related to object with columns with keys.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ErdsJoinsEnum.ErdsJoins.ErdNodesColumnsRelationshipsReferenced">
            <summary>
            The relationships that consists of column with provided ID as referenced column.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ErdsJoinsEnum.ErdsJoins.ErdNodesColumnsRelationshipsReferencing">
            <summary>
            The relationships that consists of column with provided ID as referencing column.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ErdsJoinsEnum.ErdsJoins.ErdLinks">
            <summary>
            The collection of ERD links.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ErdsJoinsEnum.ErdsJoins.ErdLinksRelationships">
            <summary>
            The collection of ERD links with relationships.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ErdsJoinsEnum.ErdsJoins.ErdLinksRelationshipsRelationshipColumnPairs">
            <summary>
            The collection of ERD links with relationships.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ErdsJoinsEnum.ErdsJoins.ErdLinksRelationshipsRelationshipColumnPairsColumns">
            <summary>
            The relationships that consists of column with provided ID with foreign key and primary key relation with basic data about columns (see <see cref="F:Dataedo.Repository.Services.JoinDefinitions.RelationshipsJoinsEnum.RelationshipsJoins.RelationshipColumnPairsColumns"/>).
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.JoinDefinitions.FunctionsJoinsEnum">
            <summary>
            The class providing join enumerations for join parameters in controller methods.
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.JoinDefinitions.FunctionsJoinsEnum.FunctionsJoins">
            <summary>
            Specifies applicable data joins for functions.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.FunctionsJoinsEnum.FunctionsJoins.Database">
            <summary>
            The database that object is in.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.FunctionsJoinsEnum.FunctionsJoins.SubjectAreas">
            <summary>
            The subject areas that object belongs to.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.FunctionsJoinsEnum.FunctionsJoins.CustomFields">
            <summary>
            The custom fields of object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.FunctionsJoinsEnum.FunctionsJoins.CustomFieldDefinition">
            <summary>
            A definition of custom field (see <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDefinitionDTO"/>).
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.FunctionsJoinsEnum.FunctionsJoins.CustomFieldDefinitionCustomFieldClass">
            <summary>
            A definition of custom field (see <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDefinitionDTO"/>) with class (see <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldClassDTO"/>).
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.FunctionsJoinsEnum.FunctionsJoins.CustomFieldDefinitionDefinitionValues">
            <summary>
            A definition of custom field (see <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDefinitionDTO"/>) with definition values.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.FunctionsJoinsEnum.FunctionsJoins.DescriptionFormatted">
            <summary>
            A HTML formatted description of object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.FunctionsJoinsEnum.FunctionsJoins.DescriptionPlain">
            <summary>
            A plain text description of object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.FunctionsJoinsEnum.FunctionsJoins.DescriptionPlainShort">
            <summary>
            A short plain text description of object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.FunctionsJoinsEnum.FunctionsJoins.Parameters">
            <summary>
            The parameters.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.FunctionsJoinsEnum.FunctionsJoins.Dependencies">
            <summary>
            The dependencies.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.FunctionsJoinsEnum.FunctionsJoins.Script">
            <summary>
            The script.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.FunctionsJoinsEnum.FunctionsJoins.SchemaChanges">
            <summary>
            The schema changes.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.FunctionsJoinsEnum.FunctionsJoins.Metadata">
            <summary>
            A metadata (creation, import and update information) about object.
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.JoinDefinitions.GlossariesJoinsEnum">
            <summary>
            The class providing join enumerations for join parameters in controller methods.
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.JoinDefinitions.GlossariesJoinsEnum.GlossariesJoins">
            <summary>
            Specifies applicable data joins for glossaries.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.GlossariesJoinsEnum.GlossariesJoins.SubjectAreas">
            <summary>
            The subject areas that object belongs to.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.GlossariesJoinsEnum.GlossariesJoins.CustomFields">
            <summary>
            The custom fields of object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.GlossariesJoinsEnum.GlossariesJoins.CustomFieldDefinition">
            <summary>
            A definition of custom field (see <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDefinitionDTO"/>).
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.GlossariesJoinsEnum.GlossariesJoins.CustomFieldDefinitionCustomFieldClass">
            <summary>
            A definition of custom field (see <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDefinitionDTO"/>) with class (see <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldClassDTO"/>).
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.GlossariesJoinsEnum.GlossariesJoins.CustomFieldDefinitionDefinitionValues">
            <summary>
            A definition of custom field (see <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDefinitionDTO"/>) with definition values.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.GlossariesJoinsEnum.GlossariesJoins.DescriptionFormatted">
            <summary>
            A HTML formatted description of object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.GlossariesJoinsEnum.GlossariesJoins.DescriptionPlain">
            <summary>
            A plain text description of object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.GlossariesJoinsEnum.GlossariesJoins.DescriptionPlainShort">
            <summary>
            A short plain text description of object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.GlossariesJoinsEnum.GlossariesJoins.Metadata">
            <summary>
            A metadata (creation and update information) about object.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.JoinDefinitions.GlossariesJoinsEnum.HasAnyItem``1(Dataedo.Repository.Services.JoinDefinitions.GlossariesJoinsEnum.GlossariesJoins[],Dataedo.Repository.Services.JoinDefinitions.GlossariesJoinsEnum.GlossariesJoins[])">
            <summary>
            Checks whether provided domain array has any element of items array.
            </summary>
            <typeparam name="T">The type of element of array of join parameter based on <see cref="T:System.Enum"></see> type.</typeparam>
            <param name="array">The domain array of values to check in.</param>
            <param name="items">The array of values to check whether any is domain array.</param>
            <returns><c>true</c> domain array has any element of items array; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.JoinDefinitions.GlossaryEntriesJoinsEnum">
            <summary>
            The class providing join enumerations for join parameters in controller methods.
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.JoinDefinitions.GlossaryEntriesJoinsEnum.GlossaryEntryJoins">
            <summary>
            Specifies applicable data joins for glossary entries.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.GlossaryEntriesJoinsEnum.GlossaryEntryJoins.Glossary">
            <summary>
            The glossary containing entry.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.GlossaryEntriesJoinsEnum.GlossaryEntryJoins.EntryType">
            <summary>
            The type of glossary entry.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.GlossaryEntriesJoinsEnum.GlossaryEntryJoins.ParentEntry">
            <summary>
            The parent entry containing entry.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.GlossaryEntriesJoinsEnum.GlossaryEntryJoins.ChildEntries">
            <summary>
            The child entries containing entry.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.GlossaryEntriesJoinsEnum.GlossaryEntryJoins.SubjectAreas">
            <summary>
            The subject areas that object belongs to.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.GlossaryEntriesJoinsEnum.GlossaryEntryJoins.RelatedGlossaryEntries">
            <summary>
            The related glossary entries.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.GlossaryEntriesJoinsEnum.GlossaryEntryJoins.LinkedDataAssets">
            <summary>
            The linked data assets (e.g tables, views, columns).
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.GlossaryEntriesJoinsEnum.GlossaryEntryJoins.LinkedDataAssetsParentDatabaseObject">
            <summary>
            The linked data assets (e.g columns) with parent database object containing object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.GlossaryEntriesJoinsEnum.GlossaryEntryJoins.LinkedDataAssetsParentDatabaseObjectWithDatabase">
            <summary>
            The linked data assets (e.g columns) with parent database object containing object with database.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.GlossaryEntriesJoinsEnum.GlossaryEntryJoins.LinkedDataAssetsDatabase">
            <summary>
            The linked data assets (e.g tables, views) with database.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.GlossaryEntriesJoinsEnum.GlossaryEntryJoins.CustomFields">
            <summary>
            The custom fields of object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.GlossaryEntriesJoinsEnum.GlossaryEntryJoins.CustomFieldDefinition">
            <summary>
            A definition of custom field (see <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDefinitionDTO"/>).
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.GlossaryEntriesJoinsEnum.GlossaryEntryJoins.CustomFieldDefinitionCustomFieldClass">
            <summary>
            A definition of custom field (see <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDefinitionDTO"/>) with class (see <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldClassDTO"/>).
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.GlossaryEntriesJoinsEnum.GlossaryEntryJoins.CustomFieldDefinitionDefinitionValues">
            <summary>
            A definition of custom field (see <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDefinitionDTO"/>) with definition values.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.GlossaryEntriesJoinsEnum.GlossaryEntryJoins.DescriptionFormatted">
            <summary>
            A HTML formatted description of object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.GlossaryEntriesJoinsEnum.GlossaryEntryJoins.DescriptionPlain">
            <summary>
            A plain text description of object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.GlossaryEntriesJoinsEnum.GlossaryEntryJoins.DescriptionPlainShort">
            <summary>
            A short plain text description of object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.GlossaryEntriesJoinsEnum.GlossaryEntryJoins.Metadata">
            <summary>
            A metadata (creation and update information) about object.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.JoinDefinitions.GlossaryEntriesJoinsEnum.HasAnyItem``1(Dataedo.Repository.Services.JoinDefinitions.GlossaryEntriesJoinsEnum.GlossaryEntryJoins[],Dataedo.Repository.Services.JoinDefinitions.GlossaryEntriesJoinsEnum.GlossaryEntryJoins[])">
            <summary>
            Checks whether provided domain array has any element of items array.
            </summary>
            <typeparam name="T">The type of element of array of join parameter based on <see cref="T:System.Enum"></see> type.</typeparam>
            <param name="array">The domain array of values to check in.</param>
            <param name="items">The array of values to check whether any is domain array.</param>
            <returns><c>true</c> domain array has any element of items array; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.JoinDefinitions.GlossaryEntryTypesJoinsEnum.GlossaryEntryTypesJoins">
            <summary>
            Specifies applicable data joins for glossaries.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.JoinDefinitions.GlossaryEntryTypesJoinsEnum.HasAnyItem``1(Dataedo.Repository.Services.JoinDefinitions.GlossaryEntryTypesJoinsEnum.GlossaryEntryTypesJoins[],Dataedo.Repository.Services.JoinDefinitions.GlossaryEntryTypesJoinsEnum.GlossaryEntryTypesJoins[])">
            <summary>
            Checks whether provided domain array has any element of items array.
            </summary>
            <typeparam name="T">The type of element of array of join parameter based on <see cref="T:System.Enum"></see> type.</typeparam>
            <param name="array">The domain array of values to check in.</param>
            <param name="items">The array of values to check whether any is domain array.</param>
            <returns><c>true</c> domain array has any element of items array; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.JoinDefinitions.KeysJoinsEnum">
            <summary>
            The class providing join enumerations for join parameters in controller methods.
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.JoinDefinitions.KeysJoinsEnum.KeysJoins">
            <summary>
            Specifies applicable data joins for keys.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.KeysJoinsEnum.KeysJoins.ParentDatabaseObject">
            <summary>
            The parent database object containing object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.KeysJoinsEnum.KeysJoins.Columns">
            <summary>
            The columns of key.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.KeysJoinsEnum.KeysJoins.CustomFields">
            <summary>
            The custom fields of object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.KeysJoinsEnum.KeysJoins.CustomFieldDefinition">
            <summary>
            A definition of custom field (see <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDefinitionDTO"/>).
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.KeysJoinsEnum.KeysJoins.CustomFieldDefinitionCustomFieldClass">
            <summary>
            A definition of custom field (see <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDefinitionDTO"/>) with class (see <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldClassDTO"/>).
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.KeysJoinsEnum.KeysJoins.CustomFieldDefinitionDefinitionValues">
            <summary>
            A definition of custom field (see <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDefinitionDTO"/>) with definition values.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.KeysJoinsEnum.KeysJoins.DescriptionPlain">
            <summary>
            A plain text description of object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.KeysJoinsEnum.KeysJoins.DescriptionPlainShort">
            <summary>
            A short plain text description of object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.KeysJoinsEnum.KeysJoins.Metadata">
            <summary>
            A metadata (creation, import and update information) about object.
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.JoinDefinitions.LicensesJoinsEnum">
            <summary>
            The class providing join enumerations for join parameters in controller methods.
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.JoinDefinitions.LicensesJoinsEnum.LicensesJoins">
            <summary>
            Specifies applicable data joins for databases.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.LicensesJoinsEnum.LicensesJoins.Metadata">
            <summary>
            A metadata (creation, import and update information) about object.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.JoinDefinitions.LicensesJoinsEnum.HasAnyItem``1(Dataedo.Repository.Services.JoinDefinitions.LicensesJoinsEnum.LicensesJoins[],Dataedo.Repository.Services.JoinDefinitions.LicensesJoinsEnum.LicensesJoins[])">
            <summary>
            Checks whether provided domain array has any element of items array.
            </summary>
            <typeparam name="T">The type of element of array of join parameter based on <see cref="T:System.Enum"></see> type.</typeparam>
            <param name="array">The domain array of values to check in.</param>
            <param name="items">The array of values to check whether any is domain array.</param>
            <returns><c>true</c> domain array has any element of items array; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.JoinDefinitions.ParametersJoinsEnum">
            <summary>
            The class providing join enumerations for join parameters in controller methods.
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.JoinDefinitions.ParametersJoinsEnum.ParametersJoins">
            <summary>
            Specifies applicable data joins for parameters.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ParametersJoinsEnum.ParametersJoins.ParentObject">
            <summary>
            A parent object of parameter.
            </summary>
            
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ParametersJoinsEnum.ParametersJoins.Metadata">
            <summary>
            A metadata (creation, import and update information) about object.
            </summary>
            
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ParametersJoinsEnum.ParametersJoins.CustomFields">
            <summary>
            The custom fields of object.
            </summary>
            
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ParametersJoinsEnum.ParametersJoins.CustomFieldDefinitionCustomFieldClass">
            <summary>
            A definition of custom field (see <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDefinitionDTO"/>) with class (see <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldClassDTO"/>).
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ParametersJoinsEnum.ParametersJoins.CustomFieldDefinitionDefinitionValues">
            <summary>
            A definition of custom field (see <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDefinitionDTO"/>) with definition values.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ParametersJoinsEnum.ParametersJoins.DescriptionPlain">
            <summary>
            A description plain 
            </summary>
            
        </member>
        <member name="M:Dataedo.Repository.Services.JoinDefinitions.ParametersJoinsEnum.HasAnyItem(Dataedo.Repository.Services.JoinDefinitions.ParametersJoinsEnum.ParametersJoins[],Dataedo.Repository.Services.JoinDefinitions.ParametersJoinsEnum.ParametersJoins[])">
            <summary>
            Checks whether provided domain array has any element of items array.
            </summary>
            <param name="array">The domain array of values to check in.</param>
            <param name="items">The array of values to check whether any is domain array.</param>
            <returns><c>true</c> domain array has any element of items array; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.JoinDefinitions.ProceduresJoinsEnum">
            <summary>
            The class providing join enumerations for join parameters in controller methods.
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.JoinDefinitions.ProceduresJoinsEnum.ProceduresJoins">
            <summary>
            Specifies applicable data joins for procedures.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ProceduresJoinsEnum.ProceduresJoins.Database">
            <summary>
            The database that object is in.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ProceduresJoinsEnum.ProceduresJoins.SubjectAreas">
            <summary>
            The subject areas that object belongs to.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ProceduresJoinsEnum.ProceduresJoins.CustomFields">
            <summary>
            The custom fields of object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ProceduresJoinsEnum.ProceduresJoins.CustomFieldDefinition">
            <summary>
            A definition of custom field (see <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDefinitionDTO"/>).
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ProceduresJoinsEnum.ProceduresJoins.CustomFieldDefinitionCustomFieldClass">
            <summary>
            A definition of custom field (see <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDefinitionDTO"/>) with class (see <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldClassDTO"/>).
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ProceduresJoinsEnum.ProceduresJoins.CustomFieldDefinitionDefinitionValues">
            <summary>
            A definition of custom field (see <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDefinitionDTO"/>) with definition values.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ProceduresJoinsEnum.ProceduresJoins.DescriptionFormatted">
            <summary>
            A HTML formatted description of object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ProceduresJoinsEnum.ProceduresJoins.DescriptionPlain">
            <summary>
            A plain text description of object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ProceduresJoinsEnum.ProceduresJoins.DescriptionPlainShort">
            <summary>
            A short plain text description of object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ProceduresJoinsEnum.ProceduresJoins.Parameters">
            <summary>
            The parameters.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ProceduresJoinsEnum.ProceduresJoins.Dependencies">
            <summary>
            The dependencies.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ProceduresJoinsEnum.ProceduresJoins.Script">
            <summary>
            The script.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ProceduresJoinsEnum.ProceduresJoins.SchemaChanges">
            <summary>
            The schema changes.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ProceduresJoinsEnum.ProceduresJoins.Metadata">
            <summary>
            A metadata (creation, import and update information) about object.
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.JoinDefinitions.RelationshipsJoinsEnum">
            <summary>
            The class providing join enumerations for join parameters in controller methods.
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.JoinDefinitions.RelationshipsJoinsEnum.RelationshipsJoins">
            <summary>
            Specifies applicable data joins for keys.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.RelationshipsJoinsEnum.RelationshipsJoins.ForeignDatabaseObject">
            <summary>
            The relation foreign database object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.RelationshipsJoinsEnum.RelationshipsJoins.ForeignDatabaseObjectColumns">
            <summary>
            The relation foreign database object with columns.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.RelationshipsJoinsEnum.RelationshipsJoins.ForeignDatabaseObjectColumnsKeys">
            <summary>
            The relation foreign database object with columns and keys.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.RelationshipsJoinsEnum.RelationshipsJoins.ForeignDatabaseObjectWithDatabase">
            <summary>
            The relation foreign database object with included database.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.RelationshipsJoinsEnum.RelationshipsJoins.PrimaryDatabaseObject">
            <summary>
            The relation primary database object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.RelationshipsJoinsEnum.RelationshipsJoins.PrimaryDatabaseObjectColumns">
            <summary>
            The relation primary database object with columns.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.RelationshipsJoinsEnum.RelationshipsJoins.PrimaryDatabaseObjectColumnsKeys">
            <summary>
            The relation primary database object with columns and keys.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.RelationshipsJoinsEnum.RelationshipsJoins.PrimaryDatabaseObjectWithDatabase">
            <summary>
            The relation primary database object with included database.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.RelationshipsJoinsEnum.RelationshipsJoins.RelationshipColumnPairs">
            <summary>
            The foreign key and primary key relation columns.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.RelationshipsJoinsEnum.RelationshipsJoins.RelationshipColumnPairsColumns">
            <summary>
            The foreign key and primary key relation columns with basic data about columns (see <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.Columns.DTO.ColumnDTO"/>).
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.RelationshipsJoinsEnum.RelationshipsJoins.RelationshipColumnPairsColumnsKeys">
            <summary>
            The foreign key and primary key relation columns with basic data about columns (see <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.Columns.DTO.ColumnDTO"/>) with keys.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.RelationshipsJoinsEnum.RelationshipsJoins.CustomFields">
            <summary>
            The custom fields of object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.RelationshipsJoinsEnum.RelationshipsJoins.CustomFieldDefinition">
            <summary>
            A definition of custom field (see <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDefinitionDTO"/>).
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.RelationshipsJoinsEnum.RelationshipsJoins.CustomFieldDefinitionCustomFieldClass">
            <summary>
            A definition of custom field (see <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDefinitionDTO"/>) with class (see <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldClassDTO"/>).
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.RelationshipsJoinsEnum.RelationshipsJoins.CustomFieldDefinitionDefinitionValues">
            <summary>
            A definition of custom field (see <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDefinitionDTO"/>) with definition values.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.RelationshipsJoinsEnum.RelationshipsJoins.DescriptionPlain">
            <summary>
            A plain text description of object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.RelationshipsJoinsEnum.RelationshipsJoins.DescriptionPlainShort">
            <summary>
            A short plain text description of object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.RelationshipsJoinsEnum.RelationshipsJoins.Metadata">
            <summary>
            A metadata (creation, import and update information) about object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.StructuresJoinsEnum.StructuresJoins.Database">
            <summary>
            The database that object is in.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.StructuresJoinsEnum.StructuresJoins.SubjectAreas">
            <summary>
            The subject areas that object belongs to.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.StructuresJoinsEnum.StructuresJoins.CustomFields">
            <summary>
            The custom fields of object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.StructuresJoinsEnum.StructuresJoins.CustomFieldDefinition">
            <summary>
            A definition of custom field (see <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDefinitionDTO"/>).
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.StructuresJoinsEnum.StructuresJoins.CustomFieldDefinitionCustomFieldClass">
            <summary>
            A definition of custom field (see <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDefinitionDTO"/>) with class (see <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldClassDTO"/>).
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.StructuresJoinsEnum.StructuresJoins.CustomFieldDefinitionDefinitionValues">
            <summary>
            A definition of custom field (see <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDefinitionDTO"/>) with definition values.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.StructuresJoinsEnum.StructuresJoins.DescriptionFormatted">
            <summary>
            A HTML formatted description of object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.StructuresJoinsEnum.StructuresJoins.DescriptionPlain">
            <summary>
            A plain text description of object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.StructuresJoinsEnum.StructuresJoins.DescriptionPlainShort">
            <summary>
            A short plain text description of object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.StructuresJoinsEnum.StructuresJoins.Columns">
            <summary>
            The columns.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.StructuresJoinsEnum.StructuresJoins.ColumnsKeys">
            <summary>
            The columns with keys.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.StructuresJoinsEnum.StructuresJoins.Relations">
            <summary>
            The relations.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.StructuresJoinsEnum.StructuresJoins.Keys">
            <summary>
            The keys.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.StructuresJoinsEnum.StructuresJoins.Triggers">
            <summary>
            The triggers.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.StructuresJoinsEnum.StructuresJoins.Dependencies">
            <summary>
            The dependencies.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.StructuresJoinsEnum.StructuresJoins.GlossaryEntries">
            <summary>
            The linked glossary entries.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.StructuresJoinsEnum.StructuresJoins.GlossaryEntriesEntryType">
            <summary>
            The linked glossary entries with entry type.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.StructuresJoinsEnum.StructuresJoins.SchemaChanges">
            <summary>
            The schema changes.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.StructuresJoinsEnum.StructuresJoins.Metadata">
            <summary>
            A metadata (creation, import and update information) about object.
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.JoinDefinitions.SubjectAreasJoinsEnum">
            <summary>
            The class providing join enumerations for join parameters in controller methods.
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.JoinDefinitions.SubjectAreasJoinsEnum.SubjectAreasJoins">
            <summary>
            Specifies applicable data joins for databases.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.SubjectAreasJoinsEnum.SubjectAreasJoins.ParentSubjectArea">
            <summary>
            The parent subject area containing this subject area.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.SubjectAreasJoinsEnum.SubjectAreasJoins.SubjectAreas">
            <summary>
            The subject areas that theirs parent is current subject area.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.SubjectAreasJoinsEnum.SubjectAreasJoins.CustomFields">
            <summary>
            The custom fields of object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.SubjectAreasJoinsEnum.SubjectAreasJoins.CustomFieldDefinition">
            <summary>
            A definition of custom field (see <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDefinitionDTO"/>).
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.SubjectAreasJoinsEnum.SubjectAreasJoins.CustomFieldDefinitionCustomFieldClass">
            <summary>
            A definition of custom field (see <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDefinitionDTO"/>) with class (see <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldClassDTO"/>).
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.SubjectAreasJoinsEnum.SubjectAreasJoins.CustomFieldDefinitionDefinitionValues">
            <summary>
            A definition of custom field (see <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDefinitionDTO"/>) with definition values.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.SubjectAreasJoinsEnum.SubjectAreasJoins.DescriptionFormatted">
            <summary>
            A HTML formatted description of object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.SubjectAreasJoinsEnum.SubjectAreasJoins.DescriptionPlain">
            <summary>
            A plain text description of object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.SubjectAreasJoinsEnum.SubjectAreasJoins.DescriptionPlainShort">
            <summary>
            A short plain text description of object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.SubjectAreasJoinsEnum.SubjectAreasJoins.SchemaChanges">
            <summary>
            The schema changes.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.SubjectAreasJoinsEnum.SubjectAreasJoins.Metadata">
            <summary>
            A metadata (creation, import and update information) about object.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.JoinDefinitions.SubjectAreasJoinsEnum.HasAnyItem``1(Dataedo.Repository.Services.JoinDefinitions.SubjectAreasJoinsEnum.SubjectAreasJoins[],Dataedo.Repository.Services.JoinDefinitions.SubjectAreasJoinsEnum.SubjectAreasJoins[])">
            <summary>
            Checks whether provided domain array has any element of items array.
            </summary>
            <typeparam name="T">The type of element of array of join parameter based on <see cref="T:System.Enum"></see> type.</typeparam>
            <param name="array">The domain array of values to check in.</param>
            <param name="items">The array of values to check whether any is domain array.</param>
            <returns><c>true</c> domain array has any element of items array; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.JoinDefinitions.TablesJoinsEnum">
            <summary>
            The class providing join enumerations for join parameters in controller methods.
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.JoinDefinitions.TablesJoinsEnum.TablesJoins">
            <summary>
            Specifies applicable data joins for tables.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.TablesJoinsEnum.TablesJoins.Database">
            <summary>
            The database that object is in.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.TablesJoinsEnum.TablesJoins.SubjectAreas">
            <summary>
            The subject areas that object belongs to.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.TablesJoinsEnum.TablesJoins.CustomFields">
            <summary>
            The custom fields of object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.TablesJoinsEnum.TablesJoins.CustomFieldDefinition">
            <summary>
            A definition of custom field (see <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDefinitionDTO"/>).
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.TablesJoinsEnum.TablesJoins.CustomFieldDefinitionCustomFieldClass">
            <summary>
            A definition of custom field (see <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDefinitionDTO"/>) with class (see <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldClassDTO"/>).
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.TablesJoinsEnum.TablesJoins.CustomFieldDefinitionDefinitionValues">
            <summary>
            A definition of custom field (see <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDefinitionDTO"/>) with definition values.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.TablesJoinsEnum.TablesJoins.DescriptionFormatted">
            <summary>
            A HTML formatted description of object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.TablesJoinsEnum.TablesJoins.DescriptionPlain">
            <summary>
            A plain text description of object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.TablesJoinsEnum.TablesJoins.DescriptionPlainShort">
            <summary>
            A short plain text description of object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.TablesJoinsEnum.TablesJoins.Columns">
            <summary>
            The columns.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.TablesJoinsEnum.TablesJoins.ColumnsKeys">
            <summary>
            The columns with keys.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.TablesJoinsEnum.TablesJoins.Relations">
            <summary>
            The relations.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.TablesJoinsEnum.TablesJoins.Keys">
            <summary>
            The keys.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.TablesJoinsEnum.TablesJoins.Triggers">
            <summary>
            The triggers.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.TablesJoinsEnum.TablesJoins.Dependencies">
            <summary>
            The dependencies.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.TablesJoinsEnum.TablesJoins.GlossaryEntries">
            <summary>
            The linked glossary entries.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.TablesJoinsEnum.TablesJoins.GlossaryEntriesEntryType">
            <summary>
            The linked glossary entries with entry type.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.TablesJoinsEnum.TablesJoins.SchemaChanges">
            <summary>
            The schema changes.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.TablesJoinsEnum.TablesJoins.Metadata">
            <summary>
            A metadata (creation, import and update information) about object.
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.JoinDefinitions.TriggersJoinsEnum">
            <summary>
            The class providing join enumerations for join parameters in controller methods.
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.JoinDefinitions.TriggersJoinsEnum.TriggersJoins">
            <summary>
            Specifies applicable data joins for triggers.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.TriggersJoinsEnum.TriggersJoins.SubjectAreas">
            <summary>
            The subject areas that object belongs to.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.TriggersJoinsEnum.TriggersJoins.CustomFields">
            <summary>
            The custom fields of object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.TriggersJoinsEnum.TriggersJoins.CustomFieldDefinition">
            <summary>
            A definition of custom field (see <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDefinitionDTO"/>).
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.TriggersJoinsEnum.TriggersJoins.CustomFieldDefinitionCustomFieldClass">
            <summary>
            A definition of custom field (see <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDefinitionDTO"/>) with class (see <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldClassDTO"/>).
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.TriggersJoinsEnum.TriggersJoins.CustomFieldDefinitionDefinitionValues">
            <summary>
            A definition of custom field (see <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDefinitionDTO"/>) with definition values.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.TriggersJoinsEnum.TriggersJoins.DescriptionPlain">
            <summary>
            A plain text description of object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.TriggersJoinsEnum.TriggersJoins.DescriptionPlainShort">
            <summary>
            A short plain text description of object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.TriggersJoinsEnum.TriggersJoins.Script">
            <summary>
            The script.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.TriggersJoinsEnum.TriggersJoins.SchemaChanges">
            <summary>
            The schema changes.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.TriggersJoinsEnum.TriggersJoins.Metadata">
            <summary>
            A metadata (creation, import and update information) about object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.TriggersJoinsEnum.TriggersJoins.ParentDatabaseObject">
            <summary>
            The parent of database object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.TriggersJoinsEnum.TriggersJoins.ParentDatabaseObjectWithDatabase">
            <summary>
            The parent of database object with database.
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.JoinDefinitions.ViewsJoinsEnum">
            <summary>
            The class providing join enumerations for join parameters in controller methods.
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.JoinDefinitions.ViewsJoinsEnum.ViewsJoins">
            <summary>
            Specifies applicable data joins for views.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ViewsJoinsEnum.ViewsJoins.Database">
            <summary>
            The database that object is in.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ViewsJoinsEnum.ViewsJoins.SubjectAreas">
            <summary>
            The subject areas that object belongs to.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ViewsJoinsEnum.ViewsJoins.CustomFields">
            <summary>
            The custom fields of object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ViewsJoinsEnum.ViewsJoins.CustomFieldDefinition">
            <summary>
            A definition of custom field (see <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDefinitionDTO"/>).
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ViewsJoinsEnum.ViewsJoins.CustomFieldDefinitionCustomFieldClass">
            <summary>
            A definition of custom field (see <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDefinitionDTO"/>) with class (see <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldClassDTO"/>).
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ViewsJoinsEnum.ViewsJoins.CustomFieldDefinitionDefinitionValues">
            <summary>
            A definition of custom field (see <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDefinitionDTO"/>) with definition values.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ViewsJoinsEnum.ViewsJoins.DescriptionFormatted">
            <summary>
            A HTML formatted description of object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ViewsJoinsEnum.ViewsJoins.DescriptionPlain">
            <summary>
            A plain text description of object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ViewsJoinsEnum.ViewsJoins.DescriptionPlainShort">
            <summary>
            A short plain text description of object.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ViewsJoinsEnum.ViewsJoins.Columns">
            <summary>
            The columns.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ViewsJoinsEnum.ViewsJoins.ColumnsKeys">
            <summary>
            The columns with keys.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ViewsJoinsEnum.ViewsJoins.Relations">
            <summary>
            The relations.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ViewsJoinsEnum.ViewsJoins.Keys">
            <summary>
            The keys.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ViewsJoinsEnum.ViewsJoins.Dependencies">
            <summary>
            The dependencies.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ViewsJoinsEnum.ViewsJoins.Script">
            <summary>
            The script.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ViewsJoinsEnum.ViewsJoins.GlossaryEntries">
            <summary>
            The linked glossary entries.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ViewsJoinsEnum.ViewsJoins.GlossaryEntriesEntryType">
            <summary>
            The linked glossary entries with entry type.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ViewsJoinsEnum.ViewsJoins.SchemaChanges">
            <summary>
            The schema changes.
            </summary>
        </member>
        <member name="F:Dataedo.Repository.Services.JoinDefinitions.ViewsJoinsEnum.ViewsJoins.Metadata">
            <summary>
            A metadata (creation, import and update information) about object.
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.JoinIncludes.JoinIncludesFactory">
            <summary>
            Manages <see cref="T:Dataedo.Repository.Services.JoinIncludes.JoinIncludesManager"/> instances.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.JoinIncludes.JoinIncludesFactory.Get">
            <summary>
            Gets singleton of the JoinIncludesManager class.
            </summary>
            <returns></returns>
        </member>
        <member name="T:Dataedo.Repository.Services.JoinIncludes.JoinIncludesManager">
            <summary>
            Used for registering and retrieving the entity eager loading expressions.
            Each join is mapped to a specific EF include(expression) execution.
            </summary>
            <example>
            <![CDATA[
            await this.RepositoryContext.Tables
                .EagerLoading<Tables>(EnumTools.Convert<TablesJoinsEnum.TablesJoins, ObjectsJoins>(join))
                .All();
            ]]>
            </example>
        </member>
        <member name="M:Dataedo.Repository.Services.JoinIncludes.JoinIncludesManager.Register``1(Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins,System.Func{System.Linq.IQueryable{``0},System.Linq.IQueryable{``0}})">
            <summary>
            Associate the EF include() method call with a specified model and join.
            </summary>
            <example><![CDATA[manager.Register<GlossaryTerms>(ObjectsJoins.Glossary, x => x.Database);]]></example>
            <typeparam name="T">Expression will be applied only to this model class.</typeparam>
            <param name="join">Unified join enum, see <see cref="M:Dataedo.Repository.Services.Tools.EnumTools.Convert``2(``0[])"/>.</param>
            <param name="query"></param>
        </member>
        <member name="M:Dataedo.Repository.Services.JoinIncludes.JoinIncludesManager.Has``1(Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins)">
            <summary>
            Check if specified model contains an EF include() expresions for given join.
            </summary>
            <typeparam name="T">Model class.</typeparam>
            <param name="join">Unified join enum, see <see cref="M:Dataedo.Repository.Services.Tools.EnumTools.Convert``2(``0[])"/>.</param>
            <returns></returns>
        </member>
        <member name="M:Dataedo.Repository.Services.JoinIncludes.JoinIncludesManager.Get``1(Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins)">
            <summary>
            Get EF include() expressions for given model and join.
            </summary>
            <typeparam name="T">Model class.</typeparam>
            <param name="join">Unified join enum, see <see cref="M:Dataedo.Repository.Services.Tools.EnumTools.Convert``2(``0[])"/>.</param>
            <returns></returns>
        </member>
        <member name="T:Dataedo.Repository.Services.JoinMethods.ColumnsJoinMethod">
            <summary>
            Builds a collection of <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.Columns.DTO.ColumnDTO"/>
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.JoinMethods.ColumnsJoinMethod.JoinColumns(System.Collections.Generic.ICollection{Dataedo.Repository.EntityFrameworkModel.Models.UniqueConstraintsColumns},Dataedo.Repository.Services.JoinDefinitions.KeysJoinsEnum.KeysJoins[])">
            <summary>
            Gets a collection of <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.Columns.DTO.ColumnDTO"/>.
            </summary>
            <param name="columns">The input parameter of columns/>.</param>
            <param name="join">The array of names of data to load with object.</param>
            <returns></returns>
        </member>
        <member name="T:Dataedo.Repository.Services.JoinMethods.CustomFieldDefinitionJoinMethod">
            <summary>
            Provides custom field definition join functionality.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.JoinMethods.CustomFieldDefinitionJoinMethod.JoinCustomFieldDefinition(Dataedo.Repository.EntityFrameworkModel.Models.CustomFields,Dataedo.Repository.Services.JoinDefinitions.CustomFieldsJoinsEnum.CustomFieldsJoins[])">
            <summary>
            Builds <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDefinitionDTO"/> from collection of <see cref="T:Dataedo.Repository.EntityFrameworkModel.Models.CustomFields"/> using joins.
            </summary>
            <param name="definition">Custom field definition</param>
            <param name="join">The array of names of data to load with object.</param>
            <returns></returns>
        </member>
        <member name="T:Dataedo.Repository.Services.JoinMethods.CustomFieldJoinMethod">
            <summary>
            Provides custom fields join functionality.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.JoinMethods.CustomFieldJoinMethod.JoinCustomFields``1(System.Collections.Generic.IEnumerable{Dataedo.Repository.EntityFrameworkModel.Models.CustomFields},Dataedo.Repository.EntityFrameworkModel.Customization.CustomFieldsData,``0[])">
            <summary>
            Builds an array of <see cref="T:Dataedo.Repository.Services.Features.CustomFields.DTO.CustomFieldDTO"/> object from <see cref="T:Dataedo.Repository.EntityFrameworkModel.Customization.CustomFieldsData"/> object data using joins.
            </summary>
            <typeparam name="T">The type of element of array of join parameter based on <see cref="T:System.Enum"></see> type.</typeparam>
            <param name="data">The source data.</param>
            <param name="definitions">Custom fields definitions.</param>
            <param name="join">The array of names of data to load with object.</param>
            <returns></returns>
        </member>
        <member name="T:Dataedo.Repository.Services.JoinMethods.DatabaseJoinMethod">
            <summary>
            Provides database join functionality.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.JoinMethods.DatabaseJoinMethod.JoinDatabase``1(Dataedo.Repository.EntityFrameworkModel.Customization.Interfaces.IDatabase,``0[],System.Boolean)">
            <summary>
            Builds <see cref="T:Dataedo.Repository.Services.Features.Databases.DTO.DatabaseDTO"/> from context (Entity Framework) model (<see cref="T:Dataedo.Repository.EntityFrameworkModel.Customization.Interfaces.IDatabase"/>) containing information about database (<see cref="T:Dataedo.Repository.EntityFrameworkModel.Models.Databases"/>) using joins.
            <para>The property is set if specific join is provided.</para>
            </summary>
            <typeparam name="T">The type of element of array of join parameter based on <see cref="T:System.Enum"></see> type.</typeparam>
            <param name="baseDatabaseObject">The context (Entity Framework) model (<see cref="T:Dataedo.Repository.EntityFrameworkModel.Customization.Interfaces.IDatabase"/>) containing information about database (<see cref="T:Dataedo.Repository.EntityFrameworkModel.Models.Databases"/>).</param>
            <param name="join">The array of names of data to load with objects.</param>
            <returns>The <see cref="T:Dataedo.Repository.Services.Features.Databases.DTO.DatabaseDTO"/> from context (Entity Framework) model (<see cref="T:Dataedo.Repository.EntityFrameworkModel.Customization.Interfaces.IDatabase"/>) containing information about database (<see cref="T:Dataedo.Repository.EntityFrameworkModel.Models.Databases"/>) using joins.</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.JoinMethods.DatabaseObjectMetadataDTOJoinMethod">
            <summary>
            Extended metadata DTO builder.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.JoinMethods.DatabaseObjectMetadataDTOJoinMethod.JoinMetadata``1(Dataedo.Repository.EntityFrameworkModel.Customization.Interfaces.IDatabaseObjectMetadata,``0[])">
            <summary>
            
            </summary>
            <typeparam name="T">The type of element of array of join parameter based on <see cref="T:System.Enum"></see> type.</typeparam>
            <param name="metadata">The object data.</param>
            <param name="join">The array of names of data to load with objects.</param>
            <returns></returns>
        </member>
        <member name="T:Dataedo.Repository.Services.JoinMethods.DescriptionJoinMethod">
            <summary>
            Joins description DTO.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.JoinMethods.DescriptionJoinMethod.JoinDescription``1(Dataedo.Repository.EntityFrameworkModel.Customization.Interfaces.IDescription,``0[])">
            <summary>
            
            </summary>
            <typeparam name="T">The type of element of array of join parameter based on <see cref="T:System.Enum"></see> type.</typeparam>
            <param name="data">The <see cref="T:Dataedo.Repository.EntityFrameworkModel.Customization.Interfaces.IDescription"/> object data.</param>
            <param name="join">The array of names of data to load with objects.</param>
            <returns></returns>
        </member>
        <member name="M:Dataedo.Repository.Services.JoinMethods.GlossaryJoinMethod.JoinGlossary``1(Dataedo.Repository.EntityFrameworkModel.Models.GlossaryTerms,``0[])">
            <typeparam name="T">The type of element of array of join parameter based on <see cref="T:System.Enum"></see> type.</typeparam>
            <param name="data">The object data.</param>
            <param name="join">The array of names of data to load with objects.</param>
            <returns></returns>
        </member>
        <member name="M:Dataedo.Repository.Services.JoinMethods.GlossaryParentEntryJoinMethod.JoinGlossaryParentEntry``1(Dataedo.Repository.EntityFrameworkModel.Models.GlossaryTerms,``0[])">
            <typeparam name="T">The type of element of array of join parameter based on <see cref="T:System.Enum"></see> type.</typeparam>
            <param name="data">The object data.</param>
            <param name="join">The array of names of data to load with objects.</param>
            <returns></returns>
        </member>
        <member name="M:Dataedo.Repository.Services.JoinMethods.GlossaryParentEntryJoinMethod.JoinGlossaryParentEntryWithAdditionalProperties``1(Dataedo.Repository.EntityFrameworkModel.Models.GlossaryTerms,System.Collections.Generic.IEnumerable{Dataedo.Repository.EntityFrameworkModel.Models.CustomFields},``0[],System.Nullable{System.Int32},System.Boolean)">
            <typeparam name="T">The type of element of array of join parameter based on <see cref="T:System.Enum"></see> type.</typeparam>
            <param name="data">The object data.</param>
            <param name="customFieldsDefinitions">Custom field definitions.</param>
            <param name="join">The array of names of data to load with objects.</param>
            <returns></returns>
        </member>
        <member name="M:Dataedo.Repository.Services.JoinMethods.GlossaryTypeJoinMethod.JoinGlossaryEntryType``1(Dataedo.Repository.EntityFrameworkModel.Models.GlossaryTerms,``0[])">
            <typeparam name="T">The type of element of array of join parameter based on <see cref="T:System.Enum"></see> type.</typeparam>
            <param name="data">The object data.</param>
            <param name="join">The array of names of data to load with objects.</param>
            <returns></returns>
        </member>
        <member name="T:Dataedo.Repository.Services.JoinMethods.MetadataJoinMethod">
            <summary>
            Builds a <see cref="T:Dataedo.Repository.Services.DTO.MetadataDTO"/>.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.JoinMethods.MetadataJoinMethod.JoinMetadata``1(Dataedo.Repository.EntityFrameworkModel.Customization.Interfaces.IMetadata,``0[])">
            <summary>
            Builds metadata <see cref="T:Dataedo.Repository.Services.DTO.MetadataDTO"/>
            </summary>
            <typeparam name="T">The type of element of array of join parameter based on <see cref="T:System.Enum"></see> type.</typeparam>
            <param name="metadata">The object data.</param>
            <param name="join">The array of names of data to load with objects.</param>
            <returns></returns>
        </member>
        <member name="T:Dataedo.Repository.Services.JoinMethods.PlainDescriptionJoinMethod">
            <summary>
            Provides plain description join functionality.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.JoinMethods.PlainDescriptionJoinMethod.JoinPlainDescription``1(System.String,``0[])">
            <summary>
            Builds a <see cref="T:Dataedo.Repository.Services.DTO.PlainDescriptionDTO"/>.
            </summary>
            <typeparam name="T">The type of element of array of join parameter based on <see cref="T:System.Enum"></see> type.</typeparam>
            <param name="plainDescription"></param>
            <param name="join"></param>
            <returns></returns>
        </member>
        <member name="T:Dataedo.Repository.Services.JoinMethods.ScriptJoinMethod">
            <summary>
            Provides <see cref="T:Dataedo.Repository.Services.DTO.ScriptDTO"/> join functionality
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.JoinMethods.ScriptJoinMethod.JoinScript``1(Dataedo.Repository.EntityFrameworkModel.Customization.Interfaces.IScript,``0[])">
            <summary>
            Builds an array of <see cref="T:Dataedo.Repository.Services.DTO.ScriptDTO"/> object from <see cref="T:Dataedo.Repository.EntityFrameworkModel.Customization.Interfaces.IScript"/> object data using joins.
            </summary>
            <typeparam name="T">The type of element of array of join parameter based on <see cref="T:System.Enum"></see> type.</typeparam>
            <param name="data">The source data.</param>
            <param name="join">The array of names of data to load with object.</param>
            <returns></returns>
        </member>
        <member name="T:Dataedo.Repository.Services.JoinMethods.TableViewParentJoinMethod">
            <summary>
            Builds a <see cref="T:Dataedo.Repository.Services.Features.DatabaseObjects.BaseDatabaseObject.DTO.BaseDatabaseObjectDTO"></see>
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.JoinMethods.TableViewParentJoinMethod.JoinBaseDatabaseObject``1(Dataedo.Repository.EntityFrameworkModel.Models.Tables,System.Boolean,``0[],System.Boolean,System.Boolean)">
            <typeparam name="T">The type of element of array of join parameter based on <see cref="T:System.Enum"></see> type.</typeparam>
            <param name="data">The object data.</param>
            <param name="join">The array of names of data to load with objects.</param>
            <returns></returns>
        </member>
        <member name="T:Dataedo.Repository.Services.JoinMethods.TriggerParentJoinMethod">
            <summary>
            Provides a trigger parent object join functionality.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.JoinMethods.TriggerParentJoinMethod.JoinBaseDatabaseObject``1(Dataedo.Repository.EntityFrameworkModel.Models.Triggers,System.Boolean,``0[],System.Boolean)">
            <typeparam name="T">The type of element of array of join parameter based on <see cref="T:System.Enum"></see> type.</typeparam>
            <param name="data">The object data.</param>
            <param name="join">The array of names of data to load with objects.</param>
            <returns></returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Parameters.OffsetLimitFilterParameters`1">
            <summary>
            The class providing common input parameters for list actions for getting lists.
            </summary>
            <typeparam name="TFilterKey">The type of key representing filtering method for filtering by value.</typeparam>
        </member>
        <member name="P:Dataedo.Repository.Services.Parameters.OffsetLimitFilterParameters`1.Filter">
            <summary>
            Gets or sets the key-value list for filtering. Key have to be available value depending on context of data.
            
            Data is filtered by key representing method (property, complex condition) with matching value. 
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.Parameters.OffsetLimitFilterSortParameters`1">
            <summary>
            The class providing common input parameters for list actions for getting lists.
            </summary>
            <typeparam name="TFilterKey">The type of key representing filtering method for filtering by value.</typeparam>
        </member>
        <member name="P:Dataedo.Repository.Services.Parameters.OffsetLimitFilterSortParameters`1.Sort">
            <summary>
            Gets or sets the name of method (property, complex condition) to sort results by.
            
            If name begins with hyphen then data is sorted descending; otherwise ascending. 
            
            <para>*URI example: -name*</para>
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.Parameters.OffsetLimitParameters">
            <summary>
            The class providing parameters for choosing required set of data by skipping and limiting result items.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Parameters.OffsetLimitParameters.Offset">
            <summary>
            Gets or sets the number of records to skip from base sequence and return remaining records. 
            
            <para>*URI example: 60*</para>
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Parameters.OffsetLimitParameters.Limit">
            <summary>
            Gets or sets the max number of records in result. 
            
            <para>*URI example: 20*</para>
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.Parameters.RepositoryConnectionData">
            <summary>
            The object providing repository connection input parameters.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Parameters.RepositoryConnectionData.ServerName">
            <summary>
            Gets or sets the host name used for building connection string.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Parameters.RepositoryConnectionData.Port">
            <summary>
            Gets or sets the port used for building connection string.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Parameters.RepositoryConnectionData.Login">
            <summary>
            Gets or sets the login used for building connection string.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Parameters.RepositoryConnectionData.Password">
            <summary>
            Gets or sets the password used for building connection string.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.Parameters.RepositoryConnectionData.Database">
            <summary>
            Gets or sets the database name for building connection string.
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.RepositoryAccess.IRepository">
            <summary>
            Represents object providing repository services.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.RepositoryAccess.IRepository.DatabasesService">
            <summary>
            Gets object providing actions for database objects.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.RepositoryAccess.IRepository.SubjectAreasService">
            <summary>
            Gets object providing actions for subject areas objects.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.RepositoryAccess.IRepository.GlossariesService">
            <summary>
            Gets object providing actions for glossary objects.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.RepositoryAccess.IRepository.FunctionsService">
            <summary>
            Gets object providing actions for function objects.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.RepositoryAccess.IRepository.ProceduresService">
            <summary>
            Gets object providing actions for procedure objects.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.RepositoryAccess.IRepository.TablesService">
            <summary>
            Gets object providing actions for table objects.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.RepositoryAccess.IRepository.ViewsService">
            <summary>
            Gets object providing actions for view objects.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.RepositoryAccess.IRepository.TriggersService">
            <summary>
            Gets object providing actions for trigger objects.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.RepositoryAccess.IRepository.ColumnsService">
            <summary>
            Gets object providing actions for column objects.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.RepositoryAccess.IRepository.MenusService">
            <summary>
            Gets object providing actions for menus.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.RepositoryAccess.IRepository.GlossaryEntriesService">
            <summary>
            Gets object providing actions for glossary entries objects.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.RepositoryAccess.IRepository.QuickSearchService">
            <summary>
            Gets object providing actions for searching objects.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.RepositoryAccess.IRepository.FacetedSearchService">
            <summary>
            Gets object providing actions for searching objects.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.RepositoryAccess.IRepository.TablesWriteService">
            <summary>
            Gets object providing update actions for tables.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.RepositoryAccess.IRepository.ViewsWriteService">
            <summary>
            Gets object providing update actions for views.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.RepositoryAccess.IRepository.ProceduresWriteService">
            <summary>
            Gets object providing update actions for procedures.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.RepositoryAccess.IRepository.FunctionsWriteService">
            <summary>
            Gets object providing update actions for functions.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.RepositoryAccess.IRepository.TriggersWriteService">
            <summary>
            Gets object providing update actions for triggers.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.RepositoryAccess.IRepository.ParametersWriteService">
            <summary>
            Gets object providing update actions for parameters.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.RepositoryAccess.IRepository.DatabasesWriteService">
            <summary>
            Gets object providing update actions for databases.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.RepositoryAccess.IRepository.GlossariesWriteService">
            <summary>
            Gets object providing update actions for glossaries.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.RepositoryAccess.IRepository.SubjectAreasWriteService">
            <summary>
            Gets object providing update actions for glossaries.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.RepositoryAccess.IRepository.ColumnsWriteService">
            <summary>
            Gets object providing update actions for columns.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.RepositoryAccess.IRepository.GlossaryEntriesWriteService">
            <summary>
            Gets object providing update actions for glossary entries.
            </summary>s
        </member>
        <member name="P:Dataedo.Repository.Services.RepositoryAccess.IRepository.UniqueConstraintsWriteService">
            <summary>
            Gets object providing update actions for unique constraints.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.RepositoryAccess.IRepository.RelationshipWriteService">
            <summary>
            Gets object providing update actions for relationships.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.RepositoryAccess.IRepository.FeedbackService">
            <summary>
            Gets object providing actions for searching feedback.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.RepositoryAccess.IRepository.LicensesService">
            <summary>
            Gets object providing actions for licenses.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.RepositoryAccess.IRepository.GlossaryEntryRelationshipTypesService">
            <summary>
            Gets object providing actions for glossary entry relationship types.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.RepositoryAccess.RepositoryVersion.Major">
            <summary>
            Alias for Version property.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.RepositoryAccess.RepositoryVersion.Minor">
            <summary>
            Alias for Update property.
            </summary>
        </member>
        <member name="P:Dataedo.Repository.Services.RepositoryAccess.RepositoryVersion.Patch">
            <summary>
            Alias for Release property.
            </summary>
        </member>
        <member name="T:Dataedo.Repository.Services.Services.BaseEnumConversions`1">
            <summary>
            The base class providing support for enumeration objects.
            </summary>
            <typeparam name="T">The type of element of array of join parameter based on <see cref="T:System.Enum"></see> type.</typeparam>
        </member>
        <member name="M:Dataedo.Repository.Services.Services.BaseEnumConversions`1.ToEnum(System.String)">
            <summary>
            Converts text value to enumeration value.
            </summary>
            <param name="value">The text value representing enumeration value.</param>
            <returns>The enumeration value.</returns>;
            <exception cref="T:System.ArgumentException">Thrown when value does not match enumeration value.</exception>
        </member>
        <member name="M:Dataedo.Repository.Services.Services.BaseEnumConversions`1.ToEnumString(`0)">
            <summary>
            Converts enumeration value to <see cref="T:System.String"/> value.
            </summary>
            <param name="value">The enumeration value.</param>
            <returns>The text value representing enumeration value</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Services.ClassService">
            <summary>
            Class for creating class object.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Services.ClassService.GetClass(System.String)">
            <summary>
            Gets an object which represents database object class.
            </summary>
            <param name="objectClass">Database object class.</param>
            <returns>Returns an instance of <see cref="T:Dataedo.Repository.Services.DTO.ValueNameDTO"></see>.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Services.Cryptography.SimpleAES.GenerateEncryptionKey">
            -------------- Two Utility Methods (not used but may be useful) -----------
            Generates an encryption key.
        </member>
        <member name="M:Dataedo.Repository.Services.Services.Cryptography.SimpleAES.GenerateEncryptionVector">
            Generates a unique encryption vector
        </member>
        <member name="M:Dataedo.Repository.Services.Services.Cryptography.SimpleAES.EncryptToString(System.String)">
            ----------- The commonly used methods ------------------------------
            Encrypt some text and return a string suitable for passing in a URL.
        </member>
        <member name="M:Dataedo.Repository.Services.Services.Cryptography.SimpleAES.Encrypt(System.String)">
            Encrypt some text and return an encrypted byte array.
        </member>
        <member name="M:Dataedo.Repository.Services.Services.Cryptography.SimpleAES.DecryptString(System.String)">
            <summary>
            The other side: Decryption methods
            </summary>
            <param name="EncryptedString"></param>
            <returns></returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Services.Cryptography.SimpleAES.Decrypt(System.Byte[])">
            <summary>
            Decryption when working with byte arrays.
            </summary>
            <param name="EncryptedValue"></param>
            <returns></returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Services.Cryptography.SimpleAES.StrToByteArray(System.String)">
            <summary>
            Convert a string to a byte array.  NOTE: Normally we'd create a Byte Array from a string using an ASCII encoding (like so).
                 System.Text.ASCIIEncoding encoding = new System.Text.ASCIIEncoding();
                 return encoding.GetBytes(str);
            However, this results in character values that cannot be passed in a URL.  So, instead, I just
            lay out all of the byte values in a long string of numbers (three per - must pad numbers less than 100).
            </summary>
            <param name="str"></param>
            <returns></returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Services.Cryptography.SimpleAES.ByteArrToString(System.Byte[])">
            <summary>
                 Same comment as above.  Normally the conversion would use an ASCII encoding in the other direction:
                 System.Text.ASCIIEncoding enc = new System.Text.ASCIIEncoding();
                 return enc.GetString(byteArr);
            </summary>
            <param name="byteArr"></param>
            <returns></returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Services.DataDictionaryClassService">
            <summary>
            Class for creating menu tree node class object.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Services.DataDictionaryClassService.GetNodeClass(System.String)">
            <summary>
            Gets an object which represents documentation object or folder class based on type.
            </summary>
            <param name="databaseType">The input parameter of database type or folder.</param>
            <returns>The documentation or folder class representation.</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Services.DataDictionaryTypeService">
            <summary>
            Class for creating menu tree type object.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Services.DataDictionaryTypeService.GetDatabaseType(System.String)">
            <summary>
            Gets an object which represents documentation node type.
            </summary>
            <param name="objectType">The input database type parameter.</param>
            <returns>Returns an instance of <see cref="T:Dataedo.Repository.Services.DTO.ValueNameDTO"></see>.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Services.DataDictionaryTypeService.GetFolderType(System.String,System.String)">
            <summary>
            Gets an object which represents the database folder node object type.
            </summary>
            <param name="objectClass">Class of database object.</param>
            <param name="objectType">Object type of database object.</param>
            <returns>Returns an instance of <see cref="T:Dataedo.Repository.Services.DTO.ValueNameDTO">.</see></returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Services.DataSourceTypeService">
            <summary>
            Class for creating data source type object.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Services.DataSourceTypeService.GetDataSourceType(System.String)">
            <summary>
            Gets an object which represents data source type.
            </summary>
            <param name="value">Class fetched from database.</param>
            <returns>Returns an instance of <see cref="T:Dataedo.Repository.Services.DTO.ValueNameDTO">.</see></returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Services.DbmsService">
            <summary>
            Class for creating dbms object.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Services.DbmsService.GetDbms(System.String)">
            <summary>
            Gets an object which represents dbms.
            </summary>
            <param name="dbms">Dbms fetched from database.</param>
            <returns>Returns an instance of <see cref="T:Dataedo.Repository.Services.DTO.ValueNameDTO">.</see></returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Services.DisplayDocumentationNameModeService">
            <summary>
            Class for creating display documentation name mode object.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Services.DisplayDocumentationNameModeService.GetDisplayDocumentationNameMode(System.String)">
            <summary>
            Gets an object which represents documentation name mode.
            </summary>
            <param name="source">The display documentation name mode source string.</param>
            <returns>Returns an instance of <see cref="T:Dataedo.Repository.Services.DTO.ValueNameDTO">.</see></returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Services.SourceService">
            <summary>
            Class for creating source object.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Services.SourceService.GetSource(System.String)">
            <summary>
            Gets an object which represents database object source.
            </summary>
            <param name="source">Database object source.</param>
            <returns>Returns an instance of <see cref="T:Dataedo.Repository.Services.DTO.ValueNameDTO">.</see></returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Services.StatusService">
            <summary>
            Class for creating status object.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Services.StatusService.GetStatus(System.String)">
            <summary>
            Gets an object which represents database object status.
            </summary>
            <param name="status">Database object status.</param>
            <returns>Returns an instance of <see cref="T:Dataedo.Repository.Services.DTO.ValueNameDTO">.</see></returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Services.TypeService">
            <summary>
            Class for creating type object.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Services.TypeService.GetType(System.String,System.String)">
            <summary>
            Gets an object which represents database object type.
            </summary>
            <param name="objectClass">Class of database object.</param>
            <param name="objectType">Object type of database object.</param>
            <returns>Returns an instance of <see cref="T:Dataedo.Repository.Services.DTO.ValueNameDTO">.</see></returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Tools.CheckingObjects">
            <summary>
            The class providing helper methods for checking object.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Tools.CheckingObjects.CheckIfExists(System.Object)">
            <summary>
            Checks whether object exists (value is not null).
            <para>If value is null then throws <see cref="T:Dataedo.Repository.Services.Exceptions.ObjectNotFoundException"/>; otherwise no action.</para>
            </summary>
            <param name="objectValue">The object to check.</param>
        </member>
        <member name="T:Dataedo.Repository.Services.Tools.CheckingParameters">
            <summary>
            The class providing helper methods for parameters for actions.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Tools.CheckingParameters.CheckIfNonNegativeId(System.Int32)">
            <summary>
            Checks whether value is non-negative.
            <para>If value is negative then throws <see cref="T:Dataedo.Repository.Services.Exceptions.BadRequestException"/>; otherwise no action.</para>
            </summary>
            <param name="value">The value to check.</param>
        </member>
        <member name="T:Dataedo.Repository.Services.Tools.DescriptionHelper">
            <summary>
            The class providing helper methods for descriptions
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Tools.DescriptionHelper.GetShortDescriptionPlain(System.String)">
            <summary>
            Returns shortened description plain
            </summary>
            <param name="descriptionPlain">Description plain of an object.</param>
            <returns>Shortened description plain by <see cref="F:Dataedo.Repository.Services.Tools.DescriptionHelper.Limit"/></returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Tools.DisplayNameHelper">
            <summary>
            The class providing object name helper methods.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Tools.DisplayNameHelper.GetDisplayName(System.String,System.String,System.String,System.Boolean)">
            <summary>
            Returns display name.
            </summary>
            <param name="schema">Schema</param>
            <param name="name">Name</param>
            <param name="title">Title</param>
            <returns>Returns object display name.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Tools.DisplayNameHelper.GetDisplayNameWithoutTitle(System.String,System.String,System.Boolean)">
            <summary>
            Returns display name.
            </summary>
            <param name="schema">Schema</param>
            <param name="name">Name</param>
            <returns>Returns object display name.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Tools.DisplayNameHelper.GetDisplayNameWithDatabase(System.String,System.String,System.String,System.String,System.Boolean)">
            <summary>
            Returns display name.
            </summary>
            <param name="schema">Schema.</param>
            <param name="name">Name.</param>
            <param name="title">Title.</param>
            <param name="database">Database title.</param>
            <returns>Returns object display name.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Tools.DisplayNameHelper.GetColumnDisplayName(System.String,System.String)">
            <summary>
            Gets a display name of a column.
            </summary>
            <param name="name">The input name parameter.</param>
            <param name="title">The input title parameter.</param>
            <returns>
            If title exists then it returns name combined with title.
            Else it returns name.
            </returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Tools.EnumTools">
            <summary>
            The class providing helper methods for <see cref="T:System.Enum"/> types.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Tools.EnumTools.Convert``2(``0[])">
            <summary>
            Converts <typeparamref name="TSource"/> array into <typeparamref name="TSource"/> array.
            <para>If item does not match result type then it is not added to result.</para>
            </summary>
            <typeparam name="TSource">The type of source array items.</typeparam>
            <typeparam name="TResult">The type of result array items.</typeparam>
            <param name="array">The input source array.</param>
            <returns>The result array from converted input array.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Tools.EnumTools.ConvertForContext``2(``0[],Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins)">
            <summary>
            Converts <typeparamref name="TSource"/> array in context of <paramref name="context"/> into <typeparamref name="TResult"/> array. 
            <para>
            Context value is created by removing context name from beginning of source value.
            If context name is not at beginning then result value is not added.
            </para>
            <para>
            Example: source value: KeysParentDatabaseObject; context Keys; result: ParentDatabaseObject.
            </para>
            <para>If item does not match result type then it is not added to result.</para>
            </summary>
            <typeparam name="TSource">The type of source array items.</typeparam>
            <typeparam name="TResult">The type of result array items.</typeparam>
            <param name="array">The input source array.</param>
            <param name="context">The value determining context of result values.</param>
            <returns>The result array from converted input array.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Tools.EnumTools.ChangeContext``2(``0[],Dataedo.Repository.Services.JoinDefinitions.BaseObjectJoins.ObjectsJoins)">
            <summary>
            Converts <typeparamref name="TSource"/> array to context of <paramref name="context"/> into <typeparamref name="TResult"/> array. 
            <para>
            Context value is created by adding context name at beginning of source value.
            If value in new context not exists then result value is not added.
            </para>
            <para>
            Example: source value: ParentDatabaseObject; context Keys; result: KeysParentDatabaseObject.
            </para>
            <para>If item does not match result type then it is not added to result.</para>
            </summary>
            <typeparam name="TSource">The type of source array items.</typeparam>
            <typeparam name="TResult">The type of result array items.</typeparam>
            <param name="array">The input source array.</param>
            <param name="context">The value determining context of result values.</param>
            <returns>The result array from converted input array.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Tools.EnumTools.HasAnyItemExact``1(``0[],``0[])">
            <summary>
            Checks whether provided domain array has any element of items array.
            </summary>
            <typeparam name="T">The type of element of array of join parameter based on <see cref="T:System.Enum"></see> type.</typeparam>
            <param name="array">The domain array of values to check in.</param>
            <param name="items">The array of values to check whether any is domain array.</param>
            <returns><c>true</c> domain array has any element of items array; otherwise, <c>false</c>.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Tools.EnumTools.HasAnyItem``1(``0[],``0[])">
            <summary>
            Checks whether provided domain array has any element of items array or domain array contains any logical subitem.
            <para>
            Example: domain: KeysParentDatabaseObject; items (to check) Keys; result: True.
            It means that KeysParentDatabaseObject contains Keys.
            </para>
            </summary>
            <typeparam name="T">The type of element of array of join parameter based on <see cref="T:System.Enum"></see> type.</typeparam>
            <param name="array">The domain array of values to check in.</param>
            <param name="items">The array of values to check whether any is domain array.</param>
            <returns><c>true</c> domain array has any element of items array; otherwise, <c>false</c>.</returns>
        </member>
        <member name="T:Dataedo.Repository.Services.Tools.PathHelper">
            <summary>
            The class providing helper methods for processing paths.
            </summary>
        </member>
        <member name="M:Dataedo.Repository.Services.Tools.PathHelper.GetPathShort(System.String)">
            <summary>
            Gets the shortened path string.
            <para>Value is at least composed of beggining and ending of path and may contain splitter value if path is too long.</para>
            </summary>
            <param name="path">The path string to be shortened.</param>
            <returns>The shortened path string.</returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Tools.SQLFileReader.GetSqlFileContent(System.Reflection.Assembly,System.String)">
            <summary>
            Gets an sql file content. Due to the assembly, the file has to be in the same solution as the service class which is running the method.
            </summary>
            <param name="assembly"></param>
            <param name="fileNameInAssembly"></param>
            <returns></returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Tools.SQLFileReader.GetSqlFileScripts(System.Reflection.Assembly,System.String)">
            <summary>
            Gets an sql file content. Due to the assembly, the file has to be in the same solution as the service class which is running the method.
            </summary>
            <param name="assembly"></param>
            <param name="fileNameInAssembly"></param>
            <returns></returns>
        </member>
        <member name="M:Dataedo.Repository.Services.Tools.SQLFileReader.SplitScript(System.Collections.Generic.IList{System.String})">
            <summary>
            Method returns script splitted to single instructions
            </summary>
            <param name="path"></param>
            <param name="createDatabase"></param>
            <returns></returns>
        </member>
    </members>
</doc>
